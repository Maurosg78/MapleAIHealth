[{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AppRouter />\n      <ReactQueryDevtools initialIsOpen={false} />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/__tests__/services/emr/ClinicCloudAdapter.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":1,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HttpService' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":190,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":190,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'consultation' is assigned a value but never used.","line":243,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":243,"endColumn":25}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from \"@testing-library/react\"\nimport { HttpService } from \"../../../lib/api\"\nimport { ClinicCloudAdapter } from \"../../../services/emr/implementations/ClinicCloudAdapter\"\nimport { MockHttpService } from \"./mocks/MockHttpService\"\nimport {\n  clinicCloudPatientData,\n  clinicCloudSearchResults,\n  clinicCloudPatientHistory,\n  patientMetrics,\n} from './mocks/MockEMRResponses';\n\n// Creamos un mock de la clase Logger para evitar logs en los tests\njest.mock('../../../lib/logger', () => {\n  return {\n    Logger: jest.fn().mockImplementation(() => {\n      return {\n        info: jest.fn(),\n        error: jest.fn(),\n        warn: jest.fn(),\n        debug: jest.fn(),\n      };\n    }),\n  };\n});\n\ndescribe('ClinicCloudAdapter', () => {\n  let adapter: ClinicCloudAdapter;\n  let mockHttp: MockHttpService;\n\n  // Configuración antes de cada test\n  beforeEach(() => {\n    // Creamos un mock del servicio HTTP\n    mockHttp = new MockHttpService();\n\n    // Creamos una instancia del adaptador con el mock\n    adapter = new ClinicCloudAdapter({\n      apiUrl: 'https://api.cliniccloud-test.es',\n      apiKey: 'test-api-key-123',\n      clinicId: 'clinica456',\n    });\n\n    // Reemplazamos el método httpService privado con nuestro mock\n    // Usamos un tipo 'unknown' para evitar problemas de acceso a propiedades privadas\n    (adapter as unknown as { httpService: MockHttpService }).httpService =\n      mockHttp;\n  });\n\n  describe('testConnection', () => {\n    it('debería devolver true cuando la conexión es exitosa', async () => {\n      // Preparamos el mock para simular una autenticación exitosa\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockResolvedValue('mock-token');\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos el resultado\n      expect(result).toBe(true);\n      expect(mockHttp.authenticateClinicCloud).toHaveBeenCalledWith(\n        'test-api-key-123'\n      );\n    });\n\n    it('debería devolver false cuando falla la autenticación', async () => {\n      // Preparamos el mock para simular un fallo en la autenticación\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockRejectedValue(new Error('API Key inválida'));\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos el resultado\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getPatientData', () => {\n    it('debería obtener y convertir correctamente los datos del paciente', async () => {\n      // Preparamos el mock para la autenticación\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockResolvedValue('mock-token');\n      // Preparamos el mock para la obtención de datos\n      jest.spyOn(mockHttp, 'get').mockResolvedValue(clinicCloudPatientData);\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos que se haya llamado correctamente al servicio HTTP\n      expect(mockHttp.get).toHaveBeenCalledWith(\n        'https://api.cliniccloud-test.es/paciente/cc-67890',\n        'cliniccloud'\n      );\n\n      // Verificamos los datos convertidos\n      expect(patientData).toEqual({\n        id: 'cc-67890',\n        fullName: 'Laura Sánchez Pérez',\n        birthDate: '1988-11-24',\n        gender: 'female',\n        contactInfo: {\n          email: 'laura.sanchez@example.es',\n          phone: '634567890',\n          address: {\n            street: 'Calle Gran Vía 123',\n            city: 'Madrid',\n            state: 'Madrid',\n            postalCode: '28013',\n            country: 'España',\n          },\n        },\n        identifiers: {\n          mrn: 'CC-2023-1234',\n          nationalId: {\n            type: 'DNI',\n            value: '87654321X',\n          },\n        },\n      });\n    });\n\n    it('debería manejar errores al obtener datos del paciente', async () => {\n      // Preparamos el mock para la autenticación\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockResolvedValue('mock-token');\n      // Preparamos el mock para simular un error en la API\n      jest\n        .spyOn(mockHttp, 'get')\n        .mockRejectedValue(new Error('Error al obtener datos'));\n\n      // Ejecutamos el método y verificamos que lance un error\n      await expect(adapter.getPatientData('cc-67890')).rejects.toThrow(\n        'Error al obtener datos del paciente: Error al obtener datos'\n      );\n    });\n  });\n\n  describe('searchPatients', () => {\n    it('debería buscar y convertir correctamente los resultados', async () => {\n      // Preparamos el mock para la autenticación\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockResolvedValue('mock-token');\n      // Preparamos el mock para la búsqueda\n      jest.spyOn(mockHttp, 'get').mockResolvedValue(clinicCloudSearchResults);\n\n      // Ejecutamos el método a probar\n      const searchResults = await adapter.searchPatients(\n        {\n          name: 'Martín',\n          documentId: 'X1234567Z',\n        },\n        10\n      );\n\n      // Verificamos que la URL de búsqueda sea correcta\n      expect(mockHttp.get).toHaveBeenCalledWith(\n        expect.stringContaining('https://api.cliniccloud-test.es/buscar'),\n        'cliniccloud',\n        expect.objectContaining({\n          nombre: 'Martín',\n          documento: 'X1234567Z',\n          limite: '10',\n        })\n      );\n\n      // Verificamos los resultados convertidos\n      expect(searchResults.length).toBe(2);\n      expect(searchResults[0].id).toBe('cc-67890');\n      expect(searchResults[0].name).toBe('Laura Sánchez Pérez');\n      expect(searchResults[0].birthDate).toBe('1988-11-24');\n      expect(searchResults[0].gender).toBe('female');\n      expect(searchResults[0].mrn).toBe('CC-2023-1234');\n    });\n  });\n\n  describe('getPatientHistory', () => {\n    it('debería obtener y convertir correctamente el historial médico', async () => {\n      // Preparamos el mock para la autenticación\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockResolvedValue('mock-token');\n      // Preparamos el mock para la obtención del historial\n      jest.spyOn(mockHttp, 'get').mockResolvedValue(clinicCloudPatientHistory);\n\n      // Opciones para el historial\n      const options = {\n        startDate: new Date('2023-01-01'),\n        endDate: new Date('2023-12-31'),\n      };\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos que la URL de obtención sea correcta\n      expect(mockHttp.get).toHaveBeenCalledWith(\n        expect.stringContaining(\n          'https://api.cliniccloud-test.es/historial/cc-67890'\n        ),\n        'cliniccloud',\n        expect.objectContaining({\n          fechaInicio: '2023-01-01',\n          fechaFin: '2023-12-31',\n        })\n      );\n\n      // Verificamos los datos convertidos\n      expect(history).toHaveProperty('consultations');\n      expect(history).toHaveProperty('medications');\n      expect(history).toHaveProperty('allergies');\n      expect(history).toHaveProperty('diagnosticTests');\n\n      // Verificamos las consultas\n      expect(history?.consultations?.length).toBe(2);\n      expect(history?.consultations?.[0].id).toBe('cons-500');\n      expect(history?.consultations?.[0].date).toBe('2023-09-15T16:00:00');\n      expect(history?.consultations?.[0].reason).toBe('Dolor cervical');\n      expect(history?.consultations?.[0].diagnoses?.length).toBe(1);\n      expect(history?.consultations?.[0].diagnoses?.[0].code).toBe('M54.2');\n\n      // Verificamos los medicamentos\n      expect(history?.medications?.length).toBe(2);\n      expect(history?.medications?.[0].name).toBe('Enantyum');\n      expect(history?.medications?.[0].dosage).toBe('25mg');\n    });\n  });\n\n  describe('saveConsultation', () => {\n    it('debería guardar una consulta correctamente', async () => {\n      // Preparamos el mock para la autenticación\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockResolvedValue('mock-token');\n      // Preparamos el mock para la creación de la consulta\n      jest\n        .spyOn(mockHttp, 'post')\n        .mockResolvedValue({ id: 'nueva-consulta-456', estado: 'creada' });\n\n      // Datos de la consulta a guardar\n      const consultation: EMRConsultation = {\n        patientId: 'cc-67890',\n        date: new Date('2023-11-20T16:30:00'),\n        reason: 'Dolor en rodilla derecha',\n        notes: 'Paciente refiere dolor en rodilla derecha tras caída',\n        diagnoses: [\n          {\n            code: 'S83.6',\n            description: 'Esguince de rodilla',\n            system: 'ICD-10',\n            status: 'active'\n          } as EMRDiagnosis,\n        ],\n      };\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos el resultado\n      expect(result).toBeDefined();\n      expect(mockHttp.post).toHaveBeenCalledWith(\n        'https://api.cliniccloud-test.es/consulta',\n        'cliniccloud',\n        expect.objectContaining({\n          pacienteId: 'cc-67890',\n          fecha: expect.any(String),\n          motivo: 'Dolor en rodilla derecha',\n        })\n      );\n    });\n  });\n\n  describe('getPatientMetrics', () => {\n    it('debería obtener y convertir correctamente las métricas', async () => {\n      // Preparamos el mock para la autenticación\n      jest\n        .spyOn(mockHttp, 'authenticateClinicCloud')\n        .mockResolvedValue('mock-token');\n      // Preparamos el mock para la obtención de métricas\n      jest.spyOn(mockHttp, 'get').mockResolvedValue(patientMetrics);\n\n      // Ejecutamos el método a probar\n      const metrics = await adapter.getPatientMetrics('cc-67890', [\n        'peso',\n        'altura',\n        'tensionArterial',\n      ]) as unknown as {\n        weight: { value: number; unit: string };\n        height: { value: number; unit: string };\n        bloodPressure: { systolic: number; diastolic: number };\n      };\n\n      // Verificamos que la URL de obtención sea correcta\n      expect(mockHttp.get).toHaveBeenCalledWith(\n        expect.stringContaining(\n          'https://api.cliniccloud-test.es/metricas/cc-67890'\n        ),\n        'cliniccloud',\n        expect.objectContaining({\n          tipos: 'peso,altura,tensionArterial',\n        })\n      );\n\n      // Verificamos los datos convertidos\n      expect(metrics).toHaveProperty('weight');\n      expect(metrics).toHaveProperty('height');\n      expect(metrics).toHaveProperty('bloodPressure');\n\n      expect(metrics.weight.value).toBe(75.5);\n      expect(metrics.weight.unit).toBe('kg');\n      expect(metrics.height.value).toBe(175);\n      expect(metrics.height.unit).toBe('cm');\n      expect(metrics.bloodPressure.systolic).toBe(120);\n      expect(metrics.bloodPressure.diastolic).toBe(80);\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/__tests__/services/emr/EMRAdapterFactory.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'render' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'screen' is defined but never used.","line":1,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'HttpService' is defined but never used.","line":2,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config' is assigned a value but never used.","line":85,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config1' is assigned a value but never used.","line":96,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'config2' is assigned a value but never used.","line":103,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { render, screen } from '@testing-library/react'\nimport { HttpService } from '../../../lib/api'\nimport { EMRAdapterFactory } from '../../../services/emr/EMRAdapterFactory'\nimport { GenericEMRAdapter } from '../../../services/emr/implementations/GenericEMRAdapter'\nimport { OSCARAdapter } from '../../../services/emr/implementations/OSCARAdapter'\nimport { ClinicCloudAdapter } from '../../../services/emr/implementations/ClinicCloudAdapter'\nimport { EPICAdapter } from '../../../services/emr/implementations/EPICAdapter'\n\n// Creamos un mock de la clase Logger para evitar logs en los tests\njest.mock('../../../lib/logger', () => {\n  return {\n    Logger: jest.fn().mockImplementation(() => {\n      return {\n        info: jest.fn(),\n        error: jest.fn(),\n        warn: jest.fn(),\n        debug: jest.fn(),\n      };\n    }),\n  };\n});\n\ndescribe('EMRAdapterFactory', () => {\n  beforeEach(() => {\n    // Reseteamos el estado de la fábrica antes de cada test\n    // Accedemos a un método protegido para tests\n    (EMRAdapterFactory as unknown).resetForTests();\n  });\n\n  describe('getAdapter', () => {\n    it('debería devolver un GenericEMRAdapter cuando se solicita GENERIC', () => {\n      expect(adapter).toBeInstanceOf(GenericEMRAdapter);\n    });\n\n    it('debería devolver un OSCARAdapter cuando se solicita OSCAR', () => {\n      const adapter = EMRAdapterFactory.getAdapter('OSCAR', {\n        baseUrl: 'https://oscar-test.example.ca',\n        username: 'testuser',\n        password: 'testpass',\n        clinicId: 'clinic123',\n      });\n      expect(adapter).toBeInstanceOf(OSCARAdapter);\n    });\n\n    it('debería devolver un ClinicCloudAdapter cuando se solicita CLINICCLOUD', () => {\n      const adapter = EMRAdapterFactory.getAdapter('CLINICCLOUD', {\n        apiUrl: 'https://api.cliniccloud-test.es',\n        apiKey: 'test-api-key-123',\n        clinicId: 'clinica456',\n      });\n      expect(adapter).toBeInstanceOf(ClinicCloudAdapter);\n    });\n\n    it('debería devolver un EPICAdapter cuando se solicita EPIC', () => {\n      const adapter = EMRAdapterFactory.getAdapter('EPIC', {\n        baseUrl: 'https://epic-fhir-api.example.org',\n        apiKey: 'test-api-key',\n        clientId: 'test-client-id',\n        clientSecret: 'test-client-secret',\n      });\n      expect(adapter).toBeInstanceOf(EPICAdapter);\n    });\n\n    it('debería lanzar un error cuando se solicita un adaptador desconocido', () => {\n      expect(() => EMRAdapterFactory.getAdapter('UNKNOWN' as unknown)).toThrow(\n        'Adaptador EMR no soportado: UNKNOWN'\n      );\n    });\n\n    it('debería lanzar un error cuando faltan parámetros requeridos', () => {\n      expect(() => EMRAdapterFactory.getAdapter('OSCAR', {})).toThrow(\n        'Se requiere baseUrl para el adaptador OSCAR'\n      );\n\n      expect(() => EMRAdapterFactory.getAdapter('CLINICCLOUD', {})).toThrow(\n        'Se requiere apiUrl y apiKey para el adaptador CLINICCLOUD'\n      );\n\n      expect(() => EMRAdapterFactory.getAdapter('EPIC', {})).toThrow(\n        'Se requiere baseUrl para el adaptador EPIC'\n      );\n    });\n\n    it('debería reutilizar instancias existentes para las mismas configuraciones', () => {\n      const config = {\n        baseUrl: 'https://oscar-test.example.ca',\n        username: 'testuser',\n        password: 'testpass',\n        clinicId: 'clinic123',\n      };\n\n      expect(adapter1).toBe(adapter2); // Misma instancia\n    });\n\n    it('debería crear nuevas instancias para diferentes configuraciones', () => {\n      const config1 = {\n        baseUrl: 'https://oscar-test1.example.ca',\n        username: 'testuser1',\n        password: 'testpass1',\n        clinicId: 'clinic123',\n      };\n\n      const config2 = {\n        baseUrl: 'https://oscar-test2.example.ca',\n        username: 'testuser2',\n        password: 'testpass2',\n        clinicId: 'clinic456',\n      };\n\n      expect(adapter1).not.toBe(adapter2); // Diferentes instancias\n    });\n  });\n\n  describe('getAvailableAdapters', () => {\n    it('debería devolver un array con los IDs de los adaptadores disponibles', () => {\n      expect(adapters).toContain('GENERIC');\n      expect(adapters).toContain('OSCAR');\n      expect(adapters).toContain('CLINICCLOUD');\n      expect(adapters).toContain('EPIC');\n    });\n  });\n\n  describe('getAdaptersInfo', () => {\n    it('debería devolver información detallada de los adaptadores disponibles', () => {\n      expect(info.length).toBeGreaterThanOrEqual(4); // Al menos 4 adaptadores\n\n      // Verificar que cada adaptador tiene la estructura correcta\n      info.forEach((adapter) => {\n        expect(adapter).toHaveProperty('id');\n        expect(adapter).toHaveProperty('name');\n        expect(adapter).toHaveProperty('description');\n      });\n\n      // Verificar que los adaptadores específicos existen\n      expect(info.find((a) => a.id === 'GENERIC')).toBeDefined();\n      expect(info.find((a) => a.id === 'OSCAR')).toBeDefined();\n      expect(info.find((a) => a.id === 'CLINICCLOUD')).toBeDefined();\n      expect(info.find((a) => a.id === 'EPIC')).toBeDefined();\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/__tests__/services/emr/OSCARAdapter.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from \"@testing-library/react\"\n  oscarPatientData,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  oscarSearchResults,\nimport { \n  oscarPatientHistory,\n  patientMetrics,\n} from './mocks/MockEMRResponses';\n\n// Creamos un mock de la clase Logger para evitar logs en los tests\njest.mock('../../../lib/logger', () => {\n  return {\n    Logger: jest.fn().mockImplementation(() => {\n      return {\n        info: jest.fn(),\n        error: jest.fn(),\n        warn: jest.fn(),\n        debug: jest.fn(),\n      };\n    }),\n  };\n});\n\ndescribe('OSCARAdapter', () => {\n  let adapter: OSCARAdapter;\n  let mockHttp: MockHttpService;\n\n  // Configuración antes de cada test\n  beforeEach(() => {\n    // Creamos un mock del servicio HTTP\n    mockHttp = new MockHttpService();\n\n    // Creamos una instancia del adaptador con el mock\n    adapter = new OSCARAdapter({\n      baseUrl: 'https://oscar-test.example.ca',\n      username: 'testuser',\n      password: 'testpass',\n      clinicId: 'clinic123',\n    });\n\n    // Reemplazamos el método httpService privado con nuestro mock\n    (adapter as unknown as { httpService: MockHttpService }).httpService = mockHttp;\n  });\n\n  describe('testConnection', () => {\n    it('debería devolver true cuando la conexión es exitosa', async () => {\n      // Preparamos el mock para simular una autenticación exitosa\n      jest.spyOn(mockHttp, 'authenticateOscar').mockResolvedValue('mock-token');\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos el resultado\n      expect(result).toBe(true);\n      expect(mockHttp.authenticateOscar).toHaveBeenCalledWith(\n        'testuser',\n        'testpass'\n      );\n    });\n\n    it('debería devolver false cuando falla la autenticación', async () => {\n      // Preparamos el mock para simular un fallo en la autenticación\n      jest.spyOn(mockHttp, 'authenticateOscar').mockRejectedValue(\n        new Error('Credenciales inválidas')\n      );\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos el resultado\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getPatientData', () => {\n    it('debería obtener y convertir correctamente los datos del paciente', async () => {\n      // Preparamos el mock para la autenticación\n      jest.spyOn(mockHttp, 'authenticateOscar').mockResolvedValue('mock-token');\n      // Preparamos el mock para la obtención de datos\n      jest.spyOn(mockHttp, 'get').mockResolvedValue(oscarPatientData);\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos que se haya llamado correctamente al servicio HTTP\n      expect(mockHttp.get).toHaveBeenCalledWith(\n        'https://oscar-test.example.ca/demographic/12345',\n        'oscar'\n      );\n\n      // Verificamos los datos convertidos\n      expect(patientData).toEqual({\n        id: '12345',\n        fullName: 'Roberto García',\n        birthDate: '1975-08-15',\n        gender: 'male',\n        contactInfo: {\n          email: 'roberto.garcia@example.com',\n          phone: '416-555-1234',\n          address: {\n            street: '123 Maple Street',\n            city: 'Toronto',\n            state: 'ON',\n            postalCode: 'M5V 2N4',\n            country: 'Canada',\n          },\n        },\n        identifiers: {\n          mrn: 'ONT123456789',\n        },\n      });\n    });\n\n    it('debería manejar errores al obtener datos del paciente', async () => {\n      // Preparamos el mock para la autenticación\n      jest.spyOn(mockHttp, 'authenticateOscar').mockResolvedValue('mock-token');\n      // Preparamos el mock para simular un error en la API\n      jest.spyOn(mockHttp, 'get').mockRejectedValue(\n        new Error('Error al obtener datos')\n      );\n\n      // Ejecutamos el método y verificamos que lance un error\n      await expect(adapter.getPatientData('12345')).rejects.toThrow(\n        'Error al obtener datos del paciente: Error al obtener datos'\n      );\n    });\n  });\n\n  describe('searchPatients', () => {\n    it('debería devolver resultados de búsqueda de pacientes', async () => {\n      httpServiceMock.get.and.returnValue(Promise.resolve({ data: { patients: [] } }));\n\n      const results = await adapter.searchPatients({\n        name: 'Juan',\n      });\n\n      expect(results).toBeDefined();\n      expect(Array.isArray(results)).toBe(true);\n\n      // Si tenemos resultados, verificamos que cada resultado tenga los campos requeridos\n      results.forEach((patient) => {\n        expect(patient.id).toBeDefined();\n        expect(patient.name).toBeDefined();\n        expect(patient.birthDate).toBeDefined();\n        expect(patient.gender).toBeDefined();\n        expect(patient.mrn).toBeDefined();\n      });\n    });\n  });\n\n  describe('getPatientHistory', () => {\n    it('debería obtener el historial médico completo del paciente', async () => {\n\n\n\n      expect(history).toBeDefined();\n      expect(history.patientId).toBe(patientId);\n      expect(history.consultations).toBeDefined();\n      expect(history.treatments).toBeDefined();\n\n      // Verificamos los medicamentos con optional chaining\n      if (history.medications && history.medications.length > 0) {\n        expect(history.medications[0].name).toBeDefined();\n        expect(history.medications[0].dosage).toBeDefined(); // Usamos dosage en lugar de dose\n        expect(history.medications[0].frequency).toBeDefined();\n      }\n    });\n  });\n\n  describe('saveConsultation', () => {\n    it('debería guardar una consulta correctamente', async () => {\n      // Preparamos el mock para la autenticación\n      jest.spyOn(mockHttp, 'authenticateOscar').mockResolvedValue('mock-token');\n      // Preparamos el mock para la creación de la consulta\n      jest.spyOn(mockHttp, 'post').mockResolvedValue({\n        id: 'new-consultation-123',\n        status: 'created',\n      });\n\n      // Datos de la consulta a guardar\n      const consultation: EMRConsultation = {\n        patientId: '12345',\n        date: new Date('2023-10-15T11:30:00'),\n        reason: 'Consulta de seguimiento',\n        notes: 'El paciente muestra mejoría',\n        diagnoses: [\n          {\n            code: 'J45.909',\n            description: 'Asma no especificada',\n            system: 'ICD-10',\n            status: 'active'\n          } as EMRDiagnosis,\n        ],\n      };\n\n      // Ejecutamos el método a probar\n\n\n      // Verificamos el resultado\n      expect(result).toBe('new-consultation-123');\n      expect(mockHttp.post).toHaveBeenCalledWith(\n        'https://oscar-test.example.ca/consultation',\n        'oscar',\n        jasmine.any(Object)\n      );\n    });\n  });\n\n  describe('getPatientMetrics', () => {\n    it('debería obtener las métricas de salud del paciente', async () => {\n\n      const metrics = await adapter.getPatientMetrics(patientId, [\n        'weight',\n        'height',\n        'bloodPressure',\n      ]);\n\n      expect(metrics).toBeDefined();\n      expect(metrics.patientId).toBe(patientId);\n\n      // Verificamos con optional chaining para evitar errores de tipo\n      if (metrics.weightHistory && metrics.weightHistory.length > 0) {\n        expect(metrics.weightHistory[0].value).toBeGreaterThan(0);\n      }\n\n      if (metrics.heightHistory && metrics.heightHistory.length > 0) {\n        expect(metrics.heightHistory[0].value).toBeGreaterThan(0);\n      }\n\n      if (metrics.bloodPressureHistory && metrics.bloodPressureHistory.length > 0) {\n        expect(metrics.bloodPressureHistory[0].systolic).toBeGreaterThan(0);\n        expect(metrics.bloodPressureHistory[0].diastolic).toBeGreaterThan(0);\n      }\n    });\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/__tests__/services/emr/mocks/MockEMRResponses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/__tests__/services/emr/mocks/MockHttpService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from \"@testing-library/react\"\n  oscarPatientData,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  oscarSearchResults,\nimport { \n  oscarPatientHistory,\n  clinicCloudPatientData,\n  clinicCloudSearchResults,\n  clinicCloudPatientHistory,\n  epicPatientData,\n  epicSearchResults,\n  epicPatientHistory,\n  patientMetrics,\n  apiErrors,\n} from './MockEMRResponses';\n\n// Definir tipos para mejorar la legibilidad y mantenimiento\ntype ErrorType =\n  | 'unauthorized'\n  | 'notFound'\n  | 'serverError'\n  | 'badRequest'\n  | null;\ntype AdapterType = 'oscar' | 'cliniccloud' | 'epic';\ntype ResponseData = Record<string, unknown>;\n\n/**\n * Servicio HTTP Mock para pruebas unitarias\n * Simula llamadas a APIs de sistemas EMR\n */\nexport class MockHttpService {\n  private authTokens: Record<string, string> = {};\n  private shouldFailAuth: boolean = false;\n  private shouldFailRequests: boolean = false;\n  private delayMs: number = 0;\n  private errorToThrow: ErrorType = null;\n\n  // Mapeo de endpoints para respuestas GET\n  private readonly endpointResponses: Record<\n    AdapterType,\n    Record<string, unknown>\n  > = {\n    oscar: {\n      demographic: oscarPatientData,\n      search: oscarSearchResults,\n      history: oscarPatientHistory,\n      metrics: patientMetrics,\n    },\n    cliniccloud: {\n      paciente: clinicCloudPatientData,\n      buscar: clinicCloudSearchResults,\n      historial: clinicCloudPatientHistory,\n      metricas: patientMetrics,\n    },\n    epic: {\n      Patient: epicPatientData,\n      'Patient?': epicSearchResults,\n      Bundle: epicPatientHistory,\n      Observation: patientMetrics,\n    },\n  };\n\n  // Mapeo de endpoints para POST\n  private readonly postEndpoints = {\n    consultation: true,\n    consulta: true,\n    Encounter: true,\n    treatment: true,\n    tratamiento: true,\n    MedicationRequest: true,\n  };\n\n  /**\n   * Configura si la autenticación debe fallar\n   */\n  public setAuthShouldFail(shouldFail: boolean): void {\n    this.shouldFailAuth = shouldFail;\n  }\n\n  /**\n   * Configura si las peticiones deben fallar\n   */\n  public setRequestsShouldFail(shouldFail: boolean): void {\n    this.shouldFailRequests = shouldFail;\n  }\n\n  /**\n   * Configura un retraso en las respuestas (en ms)\n   */\n  public setResponseDelay(delayMs: number): void {\n    this.delayMs = delayMs;\n  }\n\n  /**\n   * Configura un error específico para lanzar\n   */\n  public setErrorToThrow(error: ErrorType): void {\n    this.errorToThrow = error;\n  }\n\n  /**\n   * Simula autenticación para OSCAR\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async authenticateOscar(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _username: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _password: string\n  ): Promise<string> {\n    return this.authenticate('oscar');\n  }\n\n  /**\n   * Simula autenticación para ClinicCloud\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async authenticateClinicCloud(_apiKey: string): Promise<string> {\n    return this.authenticate('cliniccloud');\n  }\n\n  /**\n   * Simula autenticación OAuth2 para EPIC\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async authenticateEpic(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _clientId: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _clientSecret: string\n  ): Promise<string> {\n    return this.authenticate('epic');\n  }\n\n  /**\n   * Método común para manejar la autenticación\n   */\n  private async authenticate(adapter: AdapterType): Promise<string> {\n    await this.delay();\n\n    if (this.shouldFailAuth) {\n      throw new Error(apiErrors.unauthorized.message);\n    }\n\n\n    this.authTokens[adapter] = token;\n    return token;\n  }\n\n  /**\n   * Simula una solicitud GET\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async get<T>(\n    url: string,\n    adapter: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _params?: Record<string, string>\n  ): Promise<T> {\n    await this.delay();\n    this.checkErrors();\n    this.verifyAuthentication(adapter as AdapterType);\n\n    // Extraer el endpoint y clave de respuesta\n    const { endpoint, responseKey } = this.extractEndpointInfo(\n      url,\n      adapter as AdapterType\n    );\n\n    // Obtener la respuesta correspondiente\n    const response = this.getResponseForEndpoint(\n      adapter as AdapterType,\n      endpoint,\n      responseKey\n    );\n\n    if (response) {\n      return response as unknown as T;\n    }\n\n    throw new Error(apiErrors.notFound.message);\n  }\n\n  /**\n   * Extrae información del endpoint y clave de respuesta\n   */\n  private extractEndpointInfo(\n    url: string,\n    adapter: AdapterType\n  ): { endpoint: string; responseKey: string } {\n\n\n\n    // Para EPIC, tenemos algunos casos especiales\n    let responseKey = endpoint;\n    if (adapter === 'epic') {\n      if (url.includes('Patient?')) {\n        responseKey = 'Patient?';\n      } else if (url.includes('Bundle')) {\n        responseKey = 'Bundle';\n      }\n    }\n\n    return { endpoint, responseKey };\n  }\n\n  /**\n   * Obtiene la respuesta adecuada según el adaptador y endpoint\n   */\n  private getResponseForEndpoint(\n    adapter: AdapterType,\n    endpoint: string,\n    responseKey: string\n  ): unknown {\n\n    if (!adapterResponses) return null;\n\n    return adapterResponses[responseKey] || null;\n  }\n\n  /**\n   * Simula una solicitud POST\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async post<T>(\n    url: string,\n    adapter: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _data: Record<string, unknown>\n  ): Promise<T> {\n    await this.delay();\n    this.checkErrors();\n    this.verifyAuthentication(adapter as AdapterType);\n\n    // Extraer el endpoint\n\n\n\n    // Verificar si es un endpoint válido para POST\n    if (this.isValidPostEndpoint(endpoint)) {\n      return this.createSuccessResponse('created') as unknown as T;\n    }\n\n    throw new Error(apiErrors.notFound.message);\n  }\n\n  /**\n   * Simula una solicitud PUT\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async put<T>(\n    url: string,\n    adapter: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _data: Record<string, unknown>\n  ): Promise<T> {\n    await this.delay();\n    this.checkErrors();\n    this.verifyAuthentication(adapter as AdapterType);\n\n    // Extraer el endpoint e ID\n\n\n\n\n    // Verificar si es un endpoint válido para PUT (solo consultas por ahora)\n    if (\n      endpoint === 'consultation' ||\n      endpoint === 'consulta' ||\n      endpoint === 'Encounter'\n    ) {\n      return { id, status: 'updated' } as unknown as T;\n    }\n\n    throw new Error(apiErrors.notFound.message);\n  }\n\n  /**\n   * Verifica si el endpoint es válido para POST\n   */\n  private isValidPostEndpoint(endpoint: string): boolean {\n    return endpoint in this.postEndpoints;\n  }\n\n  /**\n   * Crea una respuesta de éxito\n   */\n  private createSuccessResponse(status: string): ResponseData {\n    return { id: `gen-${Date.now()}`, status };\n  }\n\n  /**\n   * Verifica la autenticación para el adaptador especificado\n   */\n  private verifyAuthentication(adapter: AdapterType): void {\n    if (!this.authTokens[adapter]) {\n      throw new Error(apiErrors.unauthorized.message);\n    }\n  }\n\n  /**\n   * Verifica si se debe lanzar algún error\n   */\n  private checkErrors(): void {\n    if (this.shouldFailRequests) {\n      throw new Error(apiErrors.serverError.message);\n    }\n\n    if (this.errorToThrow) {\n\n      throw new Error(error.message);\n    }\n  }\n\n  /**\n   * Simula un retraso en la respuesta\n   */\n  private async delay(): Promise<void> {\n    if (this.delayMs > 0) {\n      return new Promise((resolve) => setTimeout(resolve, this.delayMs));\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/__tests__/setup.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   render, screen \n } from \"@testing-library/react\"\n * Configuración global para los tests con Jest\nimport { \n/**\n */\n\n// Aumentamos el timeout para pruebas asíncronas\njest.setTimeout(10000);\n\n// Mock global para localStorage\nclass LocalStorageMock {\n  private store: Record<string, string> = {};\n\n  clear(): void {\n    this.store = {};\n  }\n\n  getItem(key: string): string | null {\n    return this.store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this.store[key] = String(value);\n  }\n\n  removeItem(key: string): void {\n    delete this.store[key];\n  }\n}\n\n// Configurar localStorage global para pruebas\nglobal.localStorage = new LocalStorageMock() as unknown as Storage;\n\n// Asegurarse de que fetch esté disponible\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    json: () => Promise.resolve({}),\n    text: () => Promise.resolve(''),\n    ok: true,\n    status: 200,\n    statusText: 'OK',\n    headers: {\n      get: jest.fn(),\n      forEach: jest.fn(),\n      has: jest.fn(),\n    },\n  } as Response)\n) as jest.Mock;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/ai/ResponseFeedback.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":5,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":5,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":41}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport { \n   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport React from 'react'\ninterface ResponseFeedbackProps {\n  entryId: string;\n  onFeedbackSubmitted?: () => void;\n}\n\nexport const ResponseFeedback: React.FC<ResponseFeedbackProps> = ({\n  entryId,\n  onFeedbackSubmitted,\n}) => {\n  const handleSubmit = async () => {\n    if (helpful === null) return;\n\n    try {\n      setSubmitting(true);\n      await aiHistoryService.addFeedback(entryId, {\n        helpful,\n        comment: comment.trim() || undefined,\n      });\n      onFeedbackSubmitted?.();\n    } catch (error) {\n      console.error('Error submitting feedback:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"mt-4 space-y-4\">\n      <div className=\"flex items-center space-x-4\">\n        <Button\n          variant={helpful === true ? 'primary' : 'secondary'}\n          onClick={() => setHelpful(true)}\n          disabled={submitting}\n        >\n          👍 Útil\n        </Button>\n        <Button\n          variant={helpful === false ? 'primary' : 'secondary'}\n          onClick={() => setHelpful(false)}\n          disabled={submitting}\n        >\n          👎 No útil\n        </Button>\n      </div>\n\n      {helpful !== null && (\n        <div className=\"space-y-2\">\n          <Input\n            type=\"text\"\n            placeholder=\"Comentario (opcional)\"\n            value={comment}\n            onChange={(e) => setComment(e.target.value)}\n            disabled={submitting}\n          />\n          <Button\n            onClick={handleSubmit}\n            disabled={submitting}\n            className=\"w-full\"\n          >\n            {submitting ? 'Enviando...' : 'Enviar Feedback'}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/appointment/AppointmentFormModal.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  Appointment,\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  AppointmentStatus,\nimport { \n  AppointmentType,\n} from '../../types/appointment';\n\ninterface AppointmentFormModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  appointment?: Appointment;\n  onSuccess: () => void;\n}\n\nexport const AppointmentFormModal: React.FC<AppointmentFormModalProps> = ({\n  isOpen,\n  onClose,\n  appointment,\n  onSuccess,\n}) => {\n\n\n  const [formData, setFormData] = useState<Partial<Appointment>>({\n    patientId: '',\n    doctorId: '',\n    date: '',\n    time: '',\n    type: 'consultation',\n    status: 'scheduled',\n    notes: '',\n  });\n\n  useEffect(() => {\n    if (appointment) {\n      setFormData(appointment);\n    }\n  }, [appointment]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (appointment) {\n        await appointmentService.updateAppointment(appointment.id, formData);\n      } else {\n        await appointmentService.createAppointment(\n          formData as Omit<Appointment, 'id' | 'createdAt' | 'updatedAt'>\n        );\n      }\n      onSuccess();\n      onClose();\n    } catch (err) {\n      setError('Error al guardar la cita');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={appointment ? 'Editar Cita' : 'Nueva Cita'}\n    >\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <Input\n          label=\"ID del Paciente\"\n          value={formData.patientId}\n          onChange={(e) =>\n            setFormData({ ...formData, patientId: e.target.value })\n          }\n          required\n          disabled={loading}\n        />\n\n        <Input\n          label=\"ID del Doctor\"\n          value={formData.doctorId}\n          onChange={(e) =>\n            setFormData({ ...formData, doctorId: e.target.value })\n          }\n          required\n          disabled={loading}\n        />\n\n        <Input\n          label=\"Fecha\"\n          type=\"date\"\n          value={formData.date}\n          onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n          required\n          disabled={loading}\n        />\n\n        <Input\n          label=\"Hora\"\n          type=\"time\"\n          value={formData.time}\n          onChange={(e) => setFormData({ ...formData, time: e.target.value })}\n          required\n          disabled={loading}\n        />\n\n        <Select\n          label=\"Tipo de Cita\"\n          value={formData.type}\n          onChange={(e) =>\n            setFormData({\n              ...formData,\n              type: e.target.value as AppointmentType,\n            })\n          }\n          options={[\n            { value: 'consultation', label: 'Consulta' },\n            { value: 'follow-up', label: 'Seguimiento' },\n            { value: 'emergency', label: 'Emergencia' },\n            { value: 'routine', label: 'Rutina' },\n          ]}\n          disabled={loading}\n        />\n\n        <Select\n          label=\"Estado\"\n          value={formData.status}\n          onChange={(e) =>\n            setFormData({\n              ...formData,\n              status: e.target.value as AppointmentStatus,\n            })\n          }\n          options={[\n            { value: 'scheduled', label: 'Programada' },\n            { value: 'confirmed', label: 'Confirmada' },\n            { value: 'completed', label: 'Completada' },\n            { value: 'cancelled', label: 'Cancelada' },\n          ]}\n          disabled={loading}\n        />\n\n        <Input\n          label=\"Notas\"\n          value={formData.notes}\n          onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n          disabled={loading}\n        />\n\n        {error && <div className=\"text-red-500 text-sm\">{error}</div>}\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={onClose}\n            disabled={loading}\n          >\n            Cancelar\n          </Button>\n          <Button type=\"submit\" disabled={loading}>\n            {loading ? <Spinner size=\"sm\" /> : 'Guardar'}\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/auth/ProtectedRoute.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface ProtectedRouteProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  children: React.ReactNode\nimport React from \"react\"\n}\n\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\n\n\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated()) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return <>{children}</>;\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Alert.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  CheckCircleIcon,\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  XCircleIcon,\nimport { \n  ExclamationCircleIcon,\n  InformationCircleIcon,\n} from '@heroicons/react/24/outline';\n\ninterface AlertProps {\n  /**\n   * El tipo de alerta\n   */\n  type?: 'success' | 'error' | 'warning' | 'info';\n  /**\n   * El título de la alerta (opcional)\n   */\n  title?: string;\n  /**\n   * El contenido de la alerta\n   */\n  children: React.ReactNode;\n  /**\n   * Clases CSS adicionales\n   */\n  className?: string;\n  /**\n   * Función para cerrar la alerta\n   */\n  onClose?: () => void;\n  /**\n   * Variante de estilo\n   */\n  variant?: 'solid' | 'outlined' | 'ghost';\n  /**\n   * Icono personalizado\n   */\n  icon?: React.ReactNode;\n}\n\nconst icons = {\n  success: CheckCircleIcon,\n  error: XCircleIcon,\n  warning: ExclamationCircleIcon,\n  info: InformationCircleIcon,\n};\n\n/**\n * Componente Alert para mostrar mensajes importantes\n */\nexport const Alert: React.FC<AlertProps> = ({\n  type = 'info',\n  title,\n  children,\n  className,\n  onClose,\n  variant = 'solid',\n  icon,\n}) => {\n\n\n\n  const variantStyles = {\n    solid: {\n      success: 'bg-green-50 text-green-800 border border-green-200',\n      error: 'bg-red-50 text-red-800 border border-red-200',\n      warning: 'bg-yellow-50 text-yellow-800 border border-yellow-200',\n      info: 'bg-blue-50 text-blue-800 border border-blue-200',\n    },\n    outlined: {\n      success: 'bg-white border border-green-500 text-green-800',\n      error: 'bg-white border border-red-500 text-red-800',\n      warning: 'bg-white border border-yellow-500 text-yellow-800',\n      info: 'bg-white border border-blue-500 text-blue-800',\n    },\n    ghost: {\n      success: 'bg-transparent text-green-800',\n      error: 'bg-transparent text-red-800',\n      warning: 'bg-transparent text-yellow-800',\n      info: 'bg-transparent text-blue-800',\n    },\n  };\n\n  const iconColorStyles = {\n    success: 'text-green-400',\n    error: 'text-red-400',\n    warning: 'text-yellow-400',\n    info: 'text-blue-400',\n  };\n\n  return (\n    <output\n      className={cn(baseStyles, variantStyles[variant][type], className)}\n      role=\"alert\"\n    >\n      {icon ||\n        (Icon && (\n          <Icon\n            className={cn('h-5 w-5', iconColorStyles[type])}\n            aria-hidden=\"true\"\n          />\n        ))}\n      <div className=\"flex-1\">\n        {title && <div className=\"font-medium mb-1\">{title}</div>}\n        <div>{children}</div>\n      </div>\n      {onClose && (\n        <button\n          onClick={onClose}\n          className=\"ml-auto text-current hover:opacity-75 focus:outline-none\"\n          aria-label=\"Cerrar alerta\"\n        >\n          ×\n        </button>\n      )}\n    </output>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Avatar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":5,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":5,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":5,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport { \n   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport React from 'react'\nexport type AvatarSize = 'sm' | 'md' | 'lg' | 'xl';\nexport type AvatarVariant = 'circle' | 'square' | 'rounded';\n\ninterface AvatarProps {\n  /**\n   * La URL de la imagen del avatar\n   */\n  src?: string;\n  /**\n   * El texto alternativo para la imagen\n   */\n  alt?: string;\n  /**\n   * El tamaño del avatar\n   */\n  size?: AvatarSize;\n  /**\n   * La variante del avatar que determina su forma\n   */\n  variant?: AvatarVariant;\n  /**\n   * Si el avatar está deshabilitado\n   */\n  disabled?: boolean;\n  /**\n   * Si el avatar está en estado de carga\n   */\n  isLoading?: boolean;\n  /**\n   * Clases CSS adicionales\n   */\n  className?: string;\n}\n\nconst sizeStyles: Record<AvatarSize, string> = {\n  sm: 'w-8 h-8 text-sm',\n  md: 'w-10 h-10 text-base',\n  lg: 'w-12 h-12 text-lg',\n  xl: 'w-16 h-16 text-xl',\n};\n\nconst variantStyles: Record<AvatarVariant, string> = {\n  circle: 'rounded-full',\n  square: 'rounded-none',\n  rounded: 'rounded-lg',\n};\n\nexport const Avatar: React.FC<AvatarProps> = ({\n  src,\n  alt = 'Avatar',\n  size = 'md',\n  variant = 'circle',\n  disabled = false,\n  isLoading = false,\n  className,\n}) => {\n  const getInitials = (alt: string) => {\n    return alt\n      .split(' ')\n      .map((word) => word[0])\n      .join('')\n      .toUpperCase();\n  };\n\n  return (\n    <div\n      className={twMerge(\n        'relative inline-flex items-center justify-center bg-gray-200 text-gray-600 font-medium',\n        sizeStyles[size],\n        variantStyles[variant],\n        disabled && 'opacity-50 cursor-not-allowed',\n        isLoading && 'animate-pulse',\n        className\n      )}\n    >\n      {src ? (\n        <img\n          src={src}\n          alt={alt}\n          className={twMerge(\n            'w-full h-full object-cover',\n            variantStyles[variant]\n          )}\n        />\n      ) : (\n        <span aria-label={alt}>{getInitials(alt)}</span>\n      )}\n      {isLoading && (\n        <div\n          className={twMerge(\n            'absolute inset-0 bg-gray-200 animate-pulse',\n            variantStyles[variant]\n          )}\n        />\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Badge.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":5,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":5,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":5,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport { \n   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport React from 'react'\nexport type BadgeType = 'success' | 'error' | 'warning' | 'info';\nexport type BadgeVariant = 'solid' | 'outlined' | 'ghost';\nexport type BadgeSize = 'sm' | 'md' | 'lg';\n\ninterface BadgeProps {\n  type?: BadgeType;\n  variant?: BadgeVariant;\n  size?: BadgeSize;\n  children: React.ReactNode;\n  icon?: string;\n  className?: string;\n}\n\nconst typeStyles: Record<BadgeType, Record<BadgeVariant, string>> = {\n  success: {\n    solid: 'bg-green-100 text-green-800',\n    outlined: 'border-green-200 text-green-800',\n    ghost: 'text-green-800',\n  },\n  error: {\n    solid: 'bg-red-100 text-red-800',\n    outlined: 'border-red-200 text-red-800',\n    ghost: 'text-red-800',\n  },\n  warning: {\n    solid: 'bg-yellow-100 text-yellow-800',\n    outlined: 'border-yellow-200 text-yellow-800',\n    ghost: 'text-yellow-800',\n  },\n  info: {\n    solid: 'bg-blue-100 text-blue-800',\n    outlined: 'border-blue-200 text-blue-800',\n    ghost: 'text-blue-800',\n  },\n};\n\nconst sizeStyles: Record<BadgeSize, string> = {\n  sm: 'text-xs px-2 py-0.5',\n  md: 'text-sm px-2.5 py-0.5',\n  lg: 'text-base px-3 py-1',\n};\n\nconst iconSizeStyles: Record<BadgeSize, string> = {\n  sm: 'w-3 h-3',\n  md: 'w-4 h-4',\n  lg: 'w-5 h-5',\n};\n\nexport const Badge: React.FC<BadgeProps> = ({\n  type = 'info',\n  variant = 'solid',\n  size = 'md',\n  children,\n  icon,\n  className,\n}) => {\n  return (\n    <div\n      className={twMerge(\n        'inline-flex items-center gap-1.5 rounded-full font-medium',\n        sizeStyles[size],\n        typeStyles[type][variant],\n        className\n      )}\n    >\n      {icon && (\n        <img\n          src={icon}\n          alt=\"\"\n          className={twMerge('flex-shrink-0', iconSizeStyles[size])}\n        />\n      )}\n      {children}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Button.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: '{' expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\nexport interface ButtonProps\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\nimport React from \"react\"\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  fullWidth?: boolean;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  isLoading?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant = 'primary',\n      size = 'md',\n      fullWidth = false,\n      disabled,\n      leftIcon,\n      rightIcon,\n      isLoading = false,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const baseStyles =\n      'inline-flex items-center justify-center rounded-lg font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';\n\n    const variantStyles = {\n      primary:\n        'bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-500',\n      secondary:\n        'bg-secondary-600 text-white hover:bg-secondary-700 focus:ring-secondary-500',\n      outline:\n        'border-2 border-primary-600 text-primary-600 hover:bg-primary-50 focus:ring-primary-500',\n      ghost: 'text-gray-600 hover:bg-gray-100 focus:ring-gray-500',\n    };\n\n    const sizeStyles = {\n      sm: 'px-3 py-1.5 text-sm',\n      md: 'px-4 py-2 text-base',\n      lg: 'px-6 py-3 text-lg',\n    };\n\n\n\n\n    return (\n      <button\n        ref={ref}\n        className={twMerge(\n          baseStyles,\n          variantStyles[variant],\n          sizeStyles[size],\n          widthStyles,\n          iconStyles,\n          className\n        )}\n        disabled={disabled || isLoading}\n        {...props}\n      >\n        {isLoading ? (\n          <div className=\"flex items-center justify-center\">\n            <svg className=\"animate-spin h-5 w-5 mr-2\" viewBox=\"0 0 24 24\">\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n                fill=\"none\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n            {children}\n          </div>\n        ) : (\n          <>\n            {leftIcon && <span className=\"flex-shrink-0\">{leftIcon}</span>}\n            {children}\n            {rightIcon && <span className=\"flex-shrink-0\">{rightIcon}</span>}\n          </>\n        )}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Card.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\nexport interface CardProps extends React.HTMLAttributes<HTMLDivElement> {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  variant?: 'default' | 'elevated' | 'outlined'\nimport React from \"react\"\n  padding?: 'none' | 'sm' | 'md' | 'lg';\n  children: React.ReactNode;\n}\n\nexport interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport interface CardBodyProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  (\n    { className, variant = 'default', padding = 'md', children, ...props },\n    ref\n  ) => {\n\n    const variantStyles = {\n      default: 'border border-gray-200',\n      elevated: 'shadow-md hover:shadow-lg transition-shadow',\n      outlined: 'border-2 border-gray-200',\n    };\n    const paddingStyles = {\n      none: '',\n      sm: 'p-4',\n      md: 'p-6',\n      lg: 'p-8',\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={twMerge(\n          baseStyles,\n          variantStyles[variant],\n          paddingStyles[padding],\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nconst CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={twMerge('border-b border-gray-200 px-6 py-4', className)}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nconst CardBody = React.forwardRef<HTMLDivElement, CardBodyProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div ref={ref} className={twMerge('px-6 py-4', className)} {...props}>\n        {children}\n      </div>\n    );\n  }\n);\n\nconst CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={twMerge('border-t border-gray-200 px-6 py-4', className)}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nCard.displayName = 'Card';\nCardHeader.displayName = 'CardHeader';\nCardBody.displayName = 'CardBody';\nCardFooter.displayName = 'CardFooter';\n\nexport { Card, CardHeader, CardBody, CardFooter };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Input.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: '{' expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\nexport interface InputProps\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  extends React.InputHTMLAttributes<HTMLInputElement> {\nimport React from \"react\"\n  label?: string;\n  error?: string;\n  helperText?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  fullWidth?: boolean;\n  value?: string;\n  type?: string;\n}\n\nconst getIconStyles = (\n  leftIcon?: React.ReactNode,\n  rightIcon?: React.ReactNode\n): string => {\n  if (leftIcon) return 'pl-10';\n  if (rightIcon) return 'pr-10';\n  return '';\n};\n\nexport const Input = forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      className,\n      label,\n      error,\n      helperText,\n      leftIcon,\n      rightIcon,\n      fullWidth = false,\n      disabled,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const inputId =\n      id ?? `input-${Math.random().toString(36).substring(2, 11)}`;\n    const baseStyles =\n      'px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 transition-colors';\n\n    const errorStyles = error\n      ? 'border-red-500 focus:ring-red-200'\n      : 'border-gray-300 focus:ring-primary-200 focus:border-primary-500';\n    const disabledStyles = disabled\n      ? 'bg-gray-100 cursor-not-allowed'\n      : 'bg-white';\n\n\n\n\n\n    return (\n      <div className={twMerge('flex flex-col gap-1', widthStyles)}>\n        {label && (\n          <label\n            htmlFor={inputId}\n            className=\"text-sm font-medium text-gray-700\"\n          >\n            {label}\n          </label>\n        )}\n        <div className=\"relative\">\n          {leftIcon && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\">\n              {leftIcon}\n            </div>\n          )}\n          <input\n            ref={ref}\n            id={inputId}\n            className={twMerge(\n              baseStyles,\n              widthStyles,\n              errorStyles,\n              disabledStyles,\n              iconStyles,\n              className\n            )}\n            disabled={disabled}\n            {...props}\n          />\n          {rightIcon && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400\">\n              {rightIcon}\n            </div>\n          )}\n        </div>\n        {helperTextContent && (\n          <p className={twMerge('text-sm', helperTextColor)}>\n            {helperTextContent}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Modal.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface ModalProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  /**\nimport React from \"react\"\n   * El contenido del modal\n   */\n  children: React.ReactNode;\n  /**\n   * Si el modal está abierto\n   */\n  isOpen: boolean;\n  /**\n   * Función para cerrar el modal\n   */\n  onClose: () => void;\n  /**\n   * El título del modal\n   */\n  title?: string;\n  /**\n   * Clases CSS adicionales\n   */\n  className?: string;\n}\n\nexport const Modal: React.FC<ModalProps> = ({\n  children,\n  isOpen,\n  onClose,\n  title,\n  className,\n}) => {\n\n\n  useEffect(() => {\n\n    if (!dialog) return;\n\n    if (isOpen) {\n      dialog.showModal();\n    } else {\n      dialog.close();\n    }\n\n    const handleClose = () => {\n      onClose();\n    };\n\n    dialog.addEventListener('close', handleClose);\n    return () => {\n      dialog.removeEventListener('close', handleClose);\n    };\n  }, [isOpen, onClose]);\n\n  const handleOverlayClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  const handleOverlayKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return createPortal(\n    <>\n      <button\n        className=\"fixed inset-0 w-full h-full bg-black/50 backdrop-blur-sm\"\n        onClick={handleOverlayClick}\n        onKeyDown={handleOverlayKeyDown}\n        aria-label=\"Cerrar modal (clic fuera)\"\n      />\n      <dialog\n        ref={dialogRef}\n        className={cn(\n          'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2',\n          'rounded-lg shadow-xl border border-gray-200',\n          'p-6 max-w-lg w-full',\n          'bg-white dark:bg-gray-800',\n          'focus:outline-none focus:ring-2 focus:ring-primary-500',\n          'animate-fade-in',\n          className\n        )}\n      >\n        <div className=\"relative\">\n          {title && (\n            <h2 className=\"text-xl font-semibold mb-4 text-gray-900 dark:text-white\">\n              {title}\n            </h2>\n          )}\n          <button\n            onClick={onClose}\n            className=\"absolute top-0 right-0 p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\n            aria-label=\"Cerrar modal (botón x)\"\n          >\n            ×\n          </button>\n          {children}\n        </div>\n      </dialog>\n    </>,\n    document.body\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/NotFound.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":7,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":7,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":7,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":7,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport function NotFound() {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  return (\n    <div className=\"min-h-screen bg-gray-100 px-4 py-16 sm:px-6 sm:py-24 md:grid md:place-items-center lg:px-8\">\n      <div className=\"mx-auto max-w-max\">\n        <main className=\"sm:flex\">\n          <p className=\"text-4xl font-bold tracking-tight text-primary-600 sm:text-5xl\">\n            404\n          </p>\n          <div className=\"sm:ml-6\">\n            <div className=\"sm:border-l sm:border-gray-200 sm:pl-6\">\n              <h1 className=\"text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl\">\n                Página no encontrada\n              </h1>\n              <p className=\"mt-1 text-base text-gray-500\">\n                Por favor, verifica la URL e intenta nuevamente.\n              </p>\n            </div>\n            <div className=\"mt-10 flex space-x-3 sm:border-l sm:border-transparent sm:pl-6\">\n              <Link\n                to=\"/\"\n                className=\"inline-flex items-center rounded-md bg-primary-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-primary-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary-600\"\n              >\n                Volver al inicio\n              </Link>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Progress.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface ProgressProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  /**\nimport React from \"react\"\n   * Valor del progreso (0-100)\n   */\n  value: number;\n  /**\n   * Etiqueta del progreso\n   */\n  label?: string;\n  /**\n   * Si el progreso está en estado indeterminado\n   */\n  isIndeterminate?: boolean;\n  /**\n   * Si se muestra el valor del progreso\n   */\n  showValue?: boolean;\n  /**\n   * Clases CSS adicionales\n   */\n  className?: string;\n}\n\nexport const Progress: React.FC<ProgressProps> = ({\n  value,\n  isIndeterminate = false,\n  label = 'Progreso',\n  className,\n  showValue = true,\n}) => {\n  return (\n    <div className=\"w-full\">\n      {label && (\n        <div className=\"flex justify-between mb-1\">\n          <span className=\"text-sm font-medium text-gray-700\">{label}</span>\n          {showValue && !isIndeterminate && (\n            <span className=\"text-sm font-medium text-gray-700\">{value}%</span>\n          )}\n        </div>\n      )}\n      <div className=\"relative\">\n        <progress\n          value={isIndeterminate ? undefined : value}\n          max=\"100\"\n          className={twMerge(\n            'w-full h-2 rounded-full overflow-hidden',\n            '[&::-webkit-progress-bar]:bg-gray-200 [&::-webkit-progress-bar]:rounded-full',\n            '[&::-webkit-progress-value]:bg-primary-600 [&::-webkit-progress-value]:rounded-full',\n            '[&::-moz-progress-bar]:bg-primary-600 [&::-moz-progress-bar]:rounded-full',\n            isIndeterminate && 'animate-progress-indeterminate',\n            className\n          )}\n          aria-label={label}\n        />\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Select.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: '{' expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\nexport interface SelectProps\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  extends React.SelectHTMLAttributes<HTMLSelectElement> {\nimport React from \"react\"\n  label?: string;\n  error?: string;\n  helperText?: string;\n  options: Array<{\n    value: string;\n    label: string;\n  }>;\n  fullWidth?: boolean;\n  value?: string;\n}\n\nexport const Select = forwardRef<HTMLSelectElement, SelectProps>(\n  (\n    {\n      className,\n      label,\n      error,\n      helperText,\n      options,\n      fullWidth = false,\n      disabled,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const selectId =\n      id ?? `select-${Math.random().toString(36).substring(2, 11)}`;\n    const baseStyles =\n      'px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 transition-colors appearance-none bg-white';\n\n    const errorStyles = error\n      ? 'border-red-500 focus:ring-red-200'\n      : 'border-gray-300 focus:ring-primary-200 focus:border-primary-500';\n\n\n\n\n\n    return (\n      <div className={twMerge('flex flex-col gap-1', widthStyles)}>\n        {label && (\n          <label\n            htmlFor={selectId}\n            className=\"text-sm font-medium text-gray-700\"\n          >\n            {label}\n          </label>\n        )}\n        <div className=\"relative\">\n          <select\n            ref={ref}\n            id={selectId}\n            className={twMerge(\n              baseStyles,\n              widthStyles,\n              errorStyles,\n              disabledStyles,\n              className\n            )}\n            disabled={disabled}\n            {...props}\n          >\n            {options.map((option) => (\n              <option key={option.value} value={option.value}>\n                {option.label}\n              </option>\n            ))}\n          </select>\n          <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n            <svg\n              className=\"h-4 w-4 fill-current\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 20 20\"\n            >\n              <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n            </svg>\n          </div>\n        </div>\n        {helperTextContent && (\n          <p className={twMerge('text-sm', helperTextColor)}>\n            {helperTextContent}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nSelect.displayName = 'Select';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Skeleton.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface SkeletonProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  /**\nimport React from \"react\"\n   * La variante del skeleton\n   */\n  variant?: 'circular' | 'rectangular' | 'rounded' | 'text';\n  /**\n   * El tamaño del skeleton\n   */\n  size?: 'sm' | 'md' | 'lg';\n  /**\n   * El ancho del skeleton\n   */\n  width?: string | number;\n  /**\n   * La altura del skeleton\n   */\n  height?: string | number;\n  /**\n   * Si el skeleton está animado\n   */\n  animated?: boolean;\n  /**\n   * Clases CSS adicionales\n   */\n  className?: string;\n  children?: React.ReactNode;\n}\n\n/**\n * Obtiene la clase CSS para el ancho del skeleton\n */\nconst getWidthClass = (width: string | number): string => {\n  if (typeof width === 'number') {\n    return `w-[${width}px]`;\n  }\n  if (width === '100%') {\n    return 'w-full';\n  }\n  return `w-[${width}]`;\n};\n\n/**\n * Obtiene la clase CSS para la altura del skeleton\n */\nconst getHeightClass = (height: string | number): string => {\n  if (typeof height === 'number') {\n    return `h-[${height}px]`;\n  }\n  return `h-[${height}]`;\n};\n\nconst variantStyles = {\n  circular: 'rounded-full',\n  rectangular: 'rounded-none',\n  rounded: 'rounded',\n  text: 'rounded',\n};\n\nconst sizeStyles = {\n  sm: 'h-3',\n  md: 'h-4',\n  lg: 'h-6',\n};\n\n/**\n * Componente Skeleton para mostrar estados de carga\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  variant = 'rounded',\n  size = 'md',\n  width = '100%',\n  height,\n  animated = true,\n  className,\n  children,\n}) => {\n\n\n\n  return (\n    <output\n      className={cn(\n        'bg-gray-200 dark:bg-gray-700',\n        animated && 'animate-pulse',\n        variantStyles[variant],\n        widthClass,\n        heightClass,\n        className\n      )}\n      aria-label=\"Cargando\"\n    >\n      {children}\n    </output>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Spinner.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":5,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":5,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":32}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport { \n   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport React from 'react'\nexport type SpinnerType = 'primary' | 'success' | 'error' | 'warning' | 'info';\nexport type SpinnerSize = 'sm' | 'md' | 'lg';\n\ninterface SpinnerProps {\n  /**\n   * El tipo de spinner que determina el color\n   */\n  type?: SpinnerType;\n  /**\n   * El tamaño del spinner\n   */\n  size?: SpinnerSize;\n  /**\n   * Si el spinner está deshabilitado\n   */\n  disabled?: boolean;\n  /**\n   * Clases CSS adicionales\n   */\n  className?: string;\n}\n\nconst typeStyles: Record<SpinnerType, string> = {\n  primary: 'text-primary-600',\n  success: 'text-green-600',\n  error: 'text-red-600',\n  warning: 'text-yellow-600',\n  info: 'text-blue-600',\n};\n\nconst sizeStyles: Record<SpinnerSize, string> = {\n  sm: 'w-4 h-4',\n  md: 'w-6 h-6',\n  lg: 'w-8 h-8',\n};\n\nexport const Spinner: React.FC<SpinnerProps> = ({\n  type = 'primary',\n  size = 'md',\n  disabled = false,\n  className,\n}) => {\n  return (\n    <output\n      className={twMerge(\n        'inline-block animate-spin',\n        disabled && 'opacity-50',\n        className\n      )}\n      aria-label=\"Cargando\"\n    >\n      <svg\n        className={twMerge('animate-spin', typeStyles[type], sizeStyles[size])}\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n      >\n        <circle\n          className=\"opacity-25\"\n          cx=\"12\"\n          cy=\"12\"\n          r=\"10\"\n          stroke=\"currentColor\"\n          strokeWidth=\"4\"\n        />\n        <path\n          className=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n    </output>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/TextArea.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: '{' expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\nexport interface TextAreaProps\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\nimport React from \"react\"\n  label?: string;\n  error?: string;\n  helperText?: string;\n  leftIcon?: React.ReactNode;\n  rightIcon?: React.ReactNode;\n  fullWidth?: boolean;\n  value?: string;\n}\n\nconst getIconStyles = (\n  leftIcon?: React.ReactNode,\n  rightIcon?: React.ReactNode\n): string => {\n  if (leftIcon) return 'pl-10';\n  if (rightIcon) return 'pr-10';\n  return '';\n};\n\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  (\n    {\n      className,\n      label,\n      error,\n      helperText,\n      leftIcon,\n      rightIcon,\n      fullWidth = false,\n      disabled,\n      id,\n      ...props\n    },\n    ref\n  ) => {\n    const textareaId =\n      id ?? `textarea-${Math.random().toString(36).substring(2, 11)}`;\n    const baseStyles =\n      'px-4 py-2 rounded-lg border focus:outline-none focus:ring-2 transition-colors';\n\n    const errorStyles = error\n      ? 'border-red-500 focus:ring-red-200'\n      : 'border-gray-300 focus:ring-primary-200 focus:border-primary-500';\n    const disabledStyles = disabled\n      ? 'bg-gray-100 cursor-not-allowed'\n      : 'bg-white';\n\n\n\n\n\n    return (\n      <div className={twMerge('flex flex-col gap-1', widthStyles)}>\n        {label && (\n          <label\n            htmlFor={textareaId}\n            className=\"text-sm font-medium text-gray-700\"\n          >\n            {label}\n          </label>\n        )}\n        <div className=\"relative\">\n          {leftIcon && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400\">\n              {leftIcon}\n            </div>\n          )}\n          <textarea\n            ref={ref}\n            id={textareaId}\n            className={twMerge(\n              baseStyles,\n              widthStyles,\n              errorStyles,\n              disabledStyles,\n              iconStyles,\n              className\n            )}\n            disabled={disabled}\n            {...props}\n          />\n          {rightIcon && (\n            <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400\">\n              {rightIcon}\n            </div>\n          )}\n        </div>\n        {helperTextContent && (\n          <p className={twMerge('text-sm', helperTextColor)}>\n            {helperTextContent}\n          </p>\n        )}\n      </div>\n    );\n  }\n);\n\nTextArea.displayName = 'TextArea';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/Toast.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  CheckCircleIcon,\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  XCircleIcon,\nimport { \n  ExclamationCircleIcon,\n  InformationCircleIcon,\n} from '@heroicons/react/24/outline';\n\ninterface ToastProps {\n  /**\n   * El tipo de toast\n   */\n  type?: 'success' | 'error' | 'warning' | 'info';\n  /**\n   * El mensaje del toast\n   */\n  message: string;\n  /**\n   * Posición del toast\n   */\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  /**\n   * Función para cerrar el toast\n   */\n  onClose?: () => void;\n  /**\n   * Duración en milisegundos antes de cerrar automáticamente\n   */\n  duration?: number;\n  /**\n   * Clases CSS adicionales\n   */\n  className?: string;\n}\n\nconst icons = {\n  success: CheckCircleIcon,\n  error: XCircleIcon,\n  warning: ExclamationCircleIcon,\n  info: InformationCircleIcon,\n};\n\nconst positions = {\n  'top-left': 'top-4 left-4',\n  'top-right': 'top-4 right-4',\n  'bottom-left': 'bottom-4 left-4',\n  'bottom-right': 'bottom-4 right-4',\n};\n\n/**\n * Componente Toast para mostrar notificaciones temporales\n */\nexport const Toast: React.FC<ToastProps> = ({\n  type = 'info',\n  message,\n  position = 'bottom-right',\n  onClose,\n  duration = 3000,\n  className,\n}) => {\n  useEffect(() => {\n    if (duration && onClose) {\n\n      return () => clearTimeout(timer);\n    }\n  }, [duration, onClose]);\n\n\n\n  const baseStyles =\n    'fixed p-4 rounded-lg shadow-lg max-w-sm flex items-center gap-3';\n  const typeStyles = {\n    success: 'bg-green-50 border border-green-200 text-green-800',\n    error: 'bg-red-50 border border-red-200 text-red-800',\n    warning: 'bg-yellow-50 border border-yellow-200 text-yellow-800',\n    info: 'bg-blue-50 border border-blue-200 text-blue-800',\n  };\n\n  const iconColorStyles = {\n    success: 'text-green-400',\n    error: 'text-red-400',\n    warning: 'text-yellow-400',\n    info: 'text-blue-400',\n  };\n\n  return createPortal(\n    <div\n      className={cn(\n        baseStyles,\n        typeStyles[type],\n        positions[position],\n        className\n      )}\n      role=\"alert\"\n      aria-live=\"polite\"\n    >\n      {Icon && (\n        <Icon\n          className={cn('h-5 w-5', iconColorStyles[type])}\n          aria-hidden=\"true\"\n        />\n      )}\n      <div className=\"flex-1\">{message}</div>\n      {onClose && (\n        <button\n          onClick={onClose}\n          className=\"ml-auto text-current hover:opacity-75 focus:outline-none\"\n          aria-label=\"Cerrar notificación\"\n        >\n          ×\n        </button>\n      )}\n    </div>,\n    document.body\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Alert.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Alert', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente con el contenido proporcionado', () => {\n    render(<Alert>Mensaje de alerta</Alert>);\n    expect(screen.getByText('Mensaje de alerta')).toBeInTheDocument();\n  });\n\n  it('muestra el título cuando se proporciona', () => {\n    render(<Alert title=\"Título de la alerta\">Mensaje de alerta</Alert>);\n    expect(screen.getByText('Título de la alerta')).toBeInTheDocument();\n  });\n\n  it('aplica los estilos correctos según el tipo', () => {\n    expect(screen.getByRole('alert')).toHaveClass('bg-green-50');\n\n    rerender(<Alert type=\"error\">Mensaje de error</Alert>);\n    expect(screen.getByRole('alert')).toHaveClass('bg-red-50');\n\n    rerender(<Alert type=\"warning\">Mensaje de advertencia</Alert>);\n    expect(screen.getByRole('alert')).toHaveClass('bg-yellow-50');\n\n    rerender(<Alert type=\"info\">Mensaje informativo</Alert>);\n    expect(screen.getByRole('alert')).toHaveClass('bg-blue-50');\n  });\n\n  it('aplica las variantes correctamente', () => {\n    expect(screen.getByRole('alert')).toHaveClass('bg-blue-50');\n\n    rerender(<Alert variant=\"outlined\">Mensaje outline</Alert>);\n    expect(screen.getByRole('alert')).toHaveClass('bg-white');\n\n    rerender(<Alert variant=\"ghost\">Mensaje ghost</Alert>);\n    expect(screen.getByRole('alert')).toHaveClass('bg-transparent');\n  });\n\n  it('muestra el icono correcto según el tipo', () => {\n    expect(\n      screen.getByRole('alert').querySelector('.text-green-400')\n    ).toBeInTheDocument();\n\n    rerender(<Alert type=\"error\">Mensaje</Alert>);\n    expect(\n      screen.getByRole('alert').querySelector('.text-red-400')\n    ).toBeInTheDocument();\n\n    rerender(<Alert type=\"warning\">Mensaje</Alert>);\n    expect(\n      screen.getByRole('alert').querySelector('.text-yellow-400')\n    ).toBeInTheDocument();\n\n    rerender(<Alert type=\"info\">Mensaje</Alert>);\n    expect(\n      screen.getByRole('alert').querySelector('.text-blue-400')\n    ).toBeInTheDocument();\n  });\n\n  it('permite personalizar el icono', () => {\n    render(<Alert icon={customIcon}>Mensaje</Alert>);\n    expect(screen.getByTestId('custom-icon')).toBeInTheDocument();\n  });\n\n  it('tiene los atributos ARIA correctos', () => {\n    render(<Alert>Mensaje</Alert>);\n    expect(screen.getByRole('alert')).toBeInTheDocument();\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(<Alert className=\"custom-class\">Mensaje</Alert>);\n    expect(screen.getByRole('alert')).toHaveClass('custom-class');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Avatar.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Avatar', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente con una imagen', () => {\n    render(<Avatar src=\"https://example.com/avatar.jpg\" alt=\"Usuario\" />);\n\n    expect(container).toBeInTheDocument();\n    expect(img).toBeInTheDocument();\n    expect(img).toHaveAttribute('src', 'https://example.com/avatar.jpg');\n    expect(img).toHaveAttribute('alt', 'Usuario');\n  });\n\n  it('renderiza correctamente sin imagen, mostrando iniciales', () => {\n    render(<Avatar alt=\"Juan Pérez\" />);\n\n    expect(container).toBeInTheDocument();\n    expect(screen.getByText('JP')).toBeInTheDocument();\n    expect(screen.getByText('JP')).toHaveAttribute('aria-label', 'Juan Pérez');\n  });\n\n  it('aplica los tamaños correctamente', () => {\n    const { rerender } = render(\n      <Avatar size=\"sm\" src=\"https://example.com/avatar.jpg\" />\n    );\n\n    expect(container).toHaveClass('w-8', 'h-8', 'text-sm');\n\n    rerender(<Avatar size=\"md\" src=\"https://example.com/avatar.jpg\" />);\n    expect(container).toHaveClass('w-10', 'h-10', 'text-base');\n\n    rerender(<Avatar size=\"lg\" src=\"https://example.com/avatar.jpg\" />);\n    expect(container).toHaveClass('w-12', 'h-12', 'text-lg');\n\n    rerender(<Avatar size=\"xl\" src=\"https://example.com/avatar.jpg\" />);\n    expect(container).toHaveClass('w-16', 'h-16', 'text-xl');\n  });\n\n  it('aplica las variantes correctamente', () => {\n    const { rerender } = render(\n      <Avatar variant=\"circle\" src=\"https://example.com/avatar.jpg\" />\n    );\n\n    expect(container).toHaveClass('rounded-full');\n\n    rerender(<Avatar variant=\"square\" src=\"https://example.com/avatar.jpg\" />);\n    expect(container).toHaveClass('rounded-none');\n\n    rerender(<Avatar variant=\"rounded\" src=\"https://example.com/avatar.jpg\" />);\n    expect(container).toHaveClass('rounded-lg');\n  });\n\n  it('aplica el estado deshabilitado correctamente', () => {\n    render(<Avatar disabled src=\"https://example.com/avatar.jpg\" />);\n\n    expect(container).toHaveClass('opacity-50', 'cursor-not-allowed');\n  });\n\n  it('aplica el estado de carga correctamente', () => {\n    render(<Avatar isLoading src=\"https://example.com/avatar.jpg\" />);\n\n    expect(container).toHaveClass('animate-pulse');\n    expect(container.querySelector('div')).toHaveClass('animate-pulse');\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(\n      <Avatar className=\"custom-class\" src=\"https://example.com/avatar.jpg\" />\n    );\n\n    expect(container).toHaveClass('custom-class');\n  });\n\n  it('genera las iniciales correctamente', () => {\n    expect(screen.getByText('JP')).toBeInTheDocument();\n\n    rerender(<Avatar alt=\"María José García\" />);\n    expect(screen.getByText('MJG')).toBeInTheDocument();\n\n    rerender(<Avatar alt=\"Carlos\" />);\n    expect(screen.getByText('C')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Badge.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Badge', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente con el contenido proporcionado', () => {\n    render(<Badge>Test Badge</Badge>);\n    expect(screen.getByText('Test Badge')).toBeInTheDocument();\n  });\n\n  it('aplica los estilos correctos según el tipo', () => {\n    expect(badge).toHaveClass('bg-green-100', 'text-green-800');\n\n    rerender(<Badge type=\"error\">Error</Badge>);\n    expect(badge).toHaveClass('bg-red-100', 'text-red-800');\n\n    rerender(<Badge type=\"warning\">Warning</Badge>);\n    expect(badge).toHaveClass('bg-yellow-100', 'text-yellow-800');\n\n    rerender(<Badge type=\"info\">Info</Badge>);\n    expect(badge).toHaveClass('bg-blue-100', 'text-blue-800');\n  });\n\n  it('aplica las variantes correctamente', () => {\n    expect(badge).toHaveClass('bg-blue-100', 'text-blue-800');\n\n    rerender(<Badge variant=\"outlined\">Outlined</Badge>);\n    expect(badge).toHaveClass('border-blue-200', 'text-blue-800');\n\n    rerender(<Badge variant=\"ghost\">Ghost</Badge>);\n    expect(badge).toHaveClass('text-blue-800');\n  });\n\n  it('aplica los tamaños correctamente', () => {\n    expect(badge).toHaveClass('text-xs', 'px-2', 'py-0.5');\n\n    rerender(<Badge size=\"md\">Medium</Badge>);\n    expect(badge).toHaveClass('text-sm', 'px-2.5', 'py-0.5');\n\n    rerender(<Badge size=\"lg\">Large</Badge>);\n    expect(badge).toHaveClass('text-base', 'px-3', 'py-1');\n  });\n\n  it('muestra el icono cuando se proporciona', () => {\n    render(<Badge icon=\"https://example.com/icon.svg\">With Icon</Badge>);\n\n    expect(icon).toBeInTheDocument();\n    expect(icon).toHaveAttribute('src', 'https://example.com/icon.svg');\n    expect(icon).toHaveAttribute('alt', '');\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(<Badge className=\"custom-class\">Custom</Badge>);\n\n    expect(badge).toHaveClass('custom-class');\n  });\n\n  it('aplica el tamaño correcto al icono según el tamaño del badge', () => {\n    const { rerender } = render(\n      <Badge size=\"sm\" icon=\"https://example.com/icon.svg\">\n        Small\n      </Badge>\n    );\n\n    expect(icon).toHaveClass('w-3', 'h-3');\n\n    rerender(\n      <Badge size=\"md\" icon=\"https://example.com/icon.svg\">\n        Medium\n      </Badge>\n    );\n    expect(icon).toHaveClass('w-4', 'h-4');\n\n    rerender(\n      <Badge size=\"lg\" icon=\"https://example.com/icon.svg\">\n        Large\n      </Badge>\n    );\n    expect(icon).toHaveClass('w-5', 'h-5');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Button.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Button', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente con el texto proporcionado', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByText('Click me')).toBeInTheDocument();\n  });\n\n  it('aplica la variante primary por defecto', () => {\n    render(<Button>Click me</Button>);\n\n    expect(button).toHaveClass('bg-primary-600');\n  });\n\n  it('aplica la variante secondary cuando se especifica', () => {\n    render(<Button variant=\"secondary\">Click me</Button>);\n\n    expect(button).toHaveClass('bg-secondary-600');\n  });\n\n  it('muestra el estado de carga cuando isLoading es true', () => {\n    render(<Button isLoading>Click me</Button>);\n\n    expect(button).toHaveClass('disabled:opacity-50');\n    expect(button).toBeDisabled();\n  });\n\n  it('llama a onClick cuando se hace clic', () => {\n    render(<Button onClick={handleClick}>Click me</Button>);\n    fireEvent.click(screen.getByText('Click me'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('no llama a onClick cuando está deshabilitado', () => {\n    render(\n      <Button onClick={handleClick} disabled>\n        Click me\n      </Button>\n    );\n    fireEvent.click(screen.getByText('Click me'));\n    expect(handleClick).not.toHaveBeenCalled();\n  });\n\n  it('muestra los iconos izquierdo y derecho cuando se proporcionan', () => {\n    render(\n      <Button\n        leftIcon={<span data-testid=\"left-icon\">←</span>}\n        rightIcon={<span data-testid=\"right-icon\">→</span>}\n      >\n        Click me\n      </Button>\n    );\n    expect(screen.getByTestId('left-icon')).toBeInTheDocument();\n    expect(screen.getByTestId('right-icon')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Card.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'container' is assigned a value but never used.","line":76,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":22}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Card', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente con contenido básico', () => {\n    render(\n      <Card>\n        <div>Contenido de la tarjeta</div>\n      </Card>\n    );\n    expect(screen.getByText('Contenido de la tarjeta')).toBeInTheDocument();\n  });\n\n  it('aplica la variante elevated correctamente', () => {\n    render(\n      <Card variant=\"elevated\">\n        <div>Contenido elevado</div>\n      </Card>\n    );\n\n    expect(card).toHaveClass('shadow-md');\n  });\n\n  it('aplica la variante outlined correctamente', () => {\n    render(\n      <Card variant=\"outlined\">\n        <div>Contenido con borde</div>\n      </Card>\n    );\n\n    expect(card).toHaveClass('border-2');\n  });\n\n  it('aplica diferentes tamaños de padding', () => {\n    render(\n      <Card padding=\"lg\">\n        <div>Contenido con padding grande</div>\n      </Card>\n    );\n\n    expect(card).toHaveClass('p-8');\n  });\n\n  it('renderiza correctamente con header, body y footer', () => {\n    render(\n      <Card>\n        <CardHeader>Encabezado</CardHeader>\n        <CardBody>Cuerpo</CardBody>\n        <CardFooter>Pie de página</CardFooter>\n      </Card>\n    );\n\n    expect(screen.getByText('Encabezado')).toBeInTheDocument();\n    expect(screen.getByText('Cuerpo')).toBeInTheDocument();\n    expect(screen.getByText('Pie de página')).toBeInTheDocument();\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(\n      <Card className=\"bg-blue-100\">\n        <div>Contenido personalizado</div>\n      </Card>\n    );\n\n    expect(card).toHaveClass('bg-blue-100');\n  });\n\n  it('mantiene la estructura semántica con header, body y footer', () => {\n    const { container } = render(\n      <Card>\n        <CardHeader>Header</CardHeader>\n        <CardBody>Body</CardBody>\n        <CardFooter>Footer</CardFooter>\n      </Card>\n    );\n\n    expect(header).toBeInTheDocument();\n    expect(body).toBeInTheDocument();\n    expect(footer).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Input.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Input', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente con el label proporcionado', () => {\n    render(<Input label=\"Nombre\" />);\n    expect(screen.getByLabelText('Nombre')).toBeInTheDocument();\n  });\n\n  it('muestra el error cuando se proporciona', () => {\n    render(<Input error=\"Este campo es requerido\" />);\n    expect(screen.getByText('Este campo es requerido')).toBeInTheDocument();\n    expect(screen.getByRole('textbox')).toHaveClass('border-red-500');\n  });\n\n  it('muestra el texto de ayuda cuando se proporciona', () => {\n    render(<Input helperText=\"Ingresa tu nombre completo\" />);\n    expect(screen.getByText('Ingresa tu nombre completo')).toBeInTheDocument();\n  });\n\n  it('muestra los iconos izquierdo y derecho cuando se proporcionan', () => {\n    render(<Input leftIcon={leftIcon} rightIcon={rightIcon} />);\n\n    expect(screen.getByTestId('left-icon')).toBeInTheDocument();\n    expect(screen.getByTestId('right-icon')).toBeInTheDocument();\n  });\n\n  it('llama a onChange cuando se cambia el valor', () => {\n    render(<Input onChange={handleChange} />);\n\n    fireEvent.change(screen.getByRole('textbox'), {\n      target: { value: 'test' },\n    });\n\n    expect(handleChange).toHaveBeenCalled();\n  });\n\n  it('está deshabilitado cuando se proporciona la prop disabled', () => {\n    render(<Input disabled />);\n    expect(screen.getByRole('textbox')).toBeDisabled();\n  });\n\n  it('aplica la clase fullWidth cuando se proporciona la prop fullWidth', () => {\n    render(<Input fullWidth />);\n    expect(\n      screen.getByRole('textbox').parentElement?.parentElement\n    ).toHaveClass('w-full');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Modal.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Modal', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n\n  beforeEach(() => {\n    mockOnClose.mockClear();\n    // Mock del elemento dialog\n    HTMLDialogElement.prototype.showModal = vi.fn();\n    HTMLDialogElement.prototype.close = vi.fn();\n  });\n\n  it('renders correctly when open', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    expect(screen.getByRole('dialog', { hidden: true })).toBeInTheDocument();\n    expect(screen.getByText('Test Modal')).toBeInTheDocument();\n    expect(screen.getByText('Modal content')).toBeInTheDocument();\n  });\n\n  it('does not render when closed', () => {\n    render(\n      <Modal isOpen={false} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    expect(screen.queryByRole('dialog')).not.toBeInTheDocument();\n  });\n\n  it('calls onClose when clicking outside', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    const overlay = screen.getByRole('button', {\n      name: /cerrar modal \\(clic fuera\\)/i,\n      hidden: true,\n    });\n    fireEvent.click(overlay);\n    expect(mockOnClose).toHaveBeenCalled();\n  });\n\n  it('llama a onClose cuando se hace clic en el botón de cerrar', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    const closeButton = screen.getByRole('button', {\n      name: /cerrar modal \\(botón x\\)/i,\n      hidden: true,\n    });\n    fireEvent.click(closeButton);\n    expect(mockOnClose).toHaveBeenCalledTimes(1);\n  });\n\n  it('llama a onClose cuando se hace clic en el overlay', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    const overlay = screen.getByRole('button', {\n      name: /cerrar modal \\(clic fuera\\)/i,\n      hidden: true,\n    });\n    fireEvent.click(overlay);\n    expect(mockOnClose).toHaveBeenCalledTimes(1);\n  });\n\n  it('llama a onClose cuando se presiona Enter en el overlay', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    const overlay = screen.getByRole('button', {\n      name: /cerrar modal \\(clic fuera\\)/i,\n      hidden: true,\n    });\n    fireEvent.keyDown(overlay, { key: 'Enter' });\n    expect(mockOnClose).toHaveBeenCalledTimes(1);\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(\n      <Modal\n        isOpen={true}\n        onClose={mockOnClose}\n        title=\"Test Modal\"\n        className=\"custom-class\"\n      >\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    expect(dialog).toHaveClass('custom-class');\n  });\n\n  it('no muestra el título cuando no se proporciona', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose}>\n        <div>Modal content</div>\n      </Modal>\n    );\n\n    expect(screen.queryByRole('heading')).not.toBeInTheDocument();\n  });\n\n  it('muestra el contenido del modal', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose}>\n        <div data-testid=\"modal-content\">Contenido personalizado</div>\n      </Modal>\n    );\n\n    expect(screen.getByTestId('modal-content')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Progress.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Progress', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente con el valor proporcionado', () => {\n    render(<Progress value={75} />);\n\n    expect(progress).toBeInTheDocument();\n    expect(progress).toHaveAttribute('value', '75');\n    expect(progress).toHaveAttribute('max', '100');\n  });\n\n  it('muestra la etiqueta cuando se proporciona', () => {\n    render(<Progress value={50} label=\"Progreso de carga\" />);\n    expect(screen.getByText('Progreso de carga')).toBeInTheDocument();\n  });\n\n  it('muestra el valor del progreso cuando showValue es true', () => {\n    render(<Progress value={75} />);\n    expect(screen.getByText('75%')).toBeInTheDocument();\n  });\n\n  it('no muestra el valor del progreso cuando showValue es false', () => {\n    render(<Progress value={75} showValue={false} />);\n    expect(screen.queryByText('75%')).not.toBeInTheDocument();\n  });\n\n  it('no muestra el valor del progreso cuando isIndeterminate es true', () => {\n    render(<Progress value={75} isIndeterminate />);\n    expect(screen.queryByText('75%')).not.toBeInTheDocument();\n  });\n\n  it('renderiza en estado indeterminado cuando isIndeterminate es true', () => {\n    render(<Progress value={50} isIndeterminate />);\n\n    expect(progress).toBeInTheDocument();\n    expect(progress).toHaveClass('animate-progress-indeterminate');\n    expect(progress).not.toHaveAttribute('value');\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(<Progress value={50} className=\"custom-class\" />);\n\n    expect(progress).toHaveClass('custom-class');\n  });\n\n  it('aplica el aria-label correcto', () => {\n    render(<Progress value={50} label=\"Progreso de carga\" />);\n\n    expect(progress).toHaveAttribute('aria-label', 'Progreso de carga');\n  });\n\n  it('aplica los estilos correctos al elemento progress', () => {\n    render(<Progress value={50} />);\n\n    expect(progress).toHaveClass(\n      'w-full',\n      'h-2',\n      'rounded-full',\n      'overflow-hidden'\n    );\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Skeleton.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Skeleton', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente', () => {\n    render(<Skeleton />);\n\n    expect(skeleton).toBeInTheDocument();\n    expect(skeleton).toHaveAttribute('aria-label', 'Cargando');\n  });\n\n  it('aplica las variantes correctamente', () => {\n    expect(screen.getByRole('status')).toHaveClass('rounded-full');\n\n    rerender(<Skeleton variant=\"rectangular\" />);\n    expect(screen.getByRole('status')).toHaveClass('rounded-none');\n\n    rerender(<Skeleton variant=\"text\" />);\n    expect(screen.getByRole('status')).toHaveClass('rounded');\n  });\n\n  it('aplica los tamaños correctamente', () => {\n    expect(screen.getByRole('status')).toHaveClass('h-3');\n\n    rerender(<Skeleton size=\"md\" />);\n    expect(screen.getByRole('status')).toHaveClass('h-4');\n\n    rerender(<Skeleton size=\"lg\" />);\n    expect(screen.getByRole('status')).toHaveClass('h-6');\n  });\n\n  it('aplica la animación correctamente', () => {\n    expect(screen.getByRole('status')).toHaveClass('animate-pulse');\n\n    rerender(<Skeleton animated={false} />);\n    expect(screen.getByRole('status')).not.toHaveClass('animate-pulse');\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(<Skeleton className=\"custom-class\" />);\n    expect(screen.getByRole('status')).toHaveClass('custom-class');\n  });\n\n  it('tiene el color de fondo correcto', () => {\n    render(<Skeleton />);\n    expect(screen.getByRole('status')).toHaveClass('bg-gray-200');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Spinner.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Spinner', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  it('renderiza correctamente', () => {\n    render(<Spinner />);\n\n    expect(spinner).toBeInTheDocument();\n    expect(spinner).toHaveAttribute('aria-label', 'Cargando');\n  });\n\n  it('aplica los estilos correctos según el tipo', () => {\n    expect(screen.getByRole('status').querySelector('svg')).toHaveClass(\n      'text-green-600'\n    );\n\n    rerender(<Spinner type=\"error\" />);\n    expect(screen.getByRole('status').querySelector('svg')).toHaveClass(\n      'text-red-600'\n    );\n\n    rerender(<Spinner type=\"warning\" />);\n    expect(screen.getByRole('status').querySelector('svg')).toHaveClass(\n      'text-yellow-600'\n    );\n\n    rerender(<Spinner type=\"info\" />);\n    expect(screen.getByRole('status').querySelector('svg')).toHaveClass(\n      'text-blue-600'\n    );\n  });\n\n  it('aplica los tamaños correctamente', () => {\n    expect(screen.getByRole('status').querySelector('svg')).toHaveClass(\n      'w-4',\n      'h-4'\n    );\n\n    rerender(<Spinner size=\"md\" />);\n    expect(screen.getByRole('status').querySelector('svg')).toHaveClass(\n      'w-6',\n      'h-6'\n    );\n\n    rerender(<Spinner size=\"lg\" />);\n    expect(screen.getByRole('status').querySelector('svg')).toHaveClass(\n      'w-8',\n      'h-8'\n    );\n  });\n\n  it('aplica el estado deshabilitado correctamente', () => {\n    render(<Spinner disabled />);\n    expect(screen.getByRole('status')).toHaveClass('opacity-50');\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(<Spinner className=\"custom-class\" />);\n    expect(screen.getByRole('status')).toHaveClass('custom-class');\n  });\n\n  it('tiene la estructura SVG correcta', () => {\n    render(<Spinner />);\n\n    expect(svg).toHaveAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    expect(svg).toHaveAttribute('fill', 'none');\n    expect(svg).toHaveAttribute('viewBox', '0 0 24 24');\n    expect(svg?.querySelector('circle')).toBeInTheDocument();\n    expect(svg?.querySelector('path')).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/__tests__/Toast.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":5,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":10,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":10,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":10,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":10,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":10,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   render, screen \n } from '@testing-library/react'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ndescribe('Toast', () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  beforeEach(() => {\n    vi.useFakeTimers();\n  });\n\n  afterEach(() => {\n    vi.useRealTimers();\n  });\n\n  it('renderiza correctamente con el mensaje proporcionado', () => {\n    render(<Toast message=\"Mensaje de prueba\" />);\n    expect(screen.getByText('Mensaje de prueba')).toBeInTheDocument();\n  });\n\n  it('aplica los estilos correctos según el tipo', () => {\n    const { rerender } = render(\n      <Toast message=\"Mensaje de éxito\" type=\"success\" />\n    );\n    expect(screen.getByRole('alert')).toHaveClass('bg-green-50');\n\n    rerender(<Toast message=\"Mensaje de error\" type=\"error\" />);\n    expect(screen.getByRole('alert')).toHaveClass('bg-red-50');\n\n    rerender(<Toast message=\"Mensaje de advertencia\" type=\"warning\" />);\n    expect(screen.getByRole('alert')).toHaveClass('bg-yellow-50');\n\n    rerender(<Toast message=\"Mensaje informativo\" type=\"info\" />);\n    expect(screen.getByRole('alert')).toHaveClass('bg-blue-50');\n  });\n\n  it('aplica la posición correcta', () => {\n    const { rerender } = render(\n      <Toast message=\"Mensaje\" position=\"top-right\" />\n    );\n    expect(screen.getByRole('alert')).toHaveClass('top-4', 'right-4');\n\n    rerender(<Toast message=\"Mensaje\" position=\"bottom-left\" />);\n    expect(screen.getByRole('alert')).toHaveClass('bottom-4', 'left-4');\n  });\n\n  it('llama a onClose después del tiempo especificado', () => {\n    render(<Toast message=\"Mensaje\" duration={1000} onClose={onClose} />);\n\n    vi.advanceTimersByTime(1000);\n\n    expect(onClose).toHaveBeenCalledTimes(1);\n  });\n\n  it('tiene los atributos ARIA correctos', () => {\n    render(<Toast message=\"Mensaje\" />);\n\n    expect(alert).toHaveAttribute('aria-live', 'polite');\n  });\n\n  it('aplica clases personalizadas a través de className', () => {\n    render(<Toast message=\"Mensaje\" className=\"custom-class\" />);\n    expect(screen.getByRole('alert')).toHaveClass('custom-class');\n  });\n\n  it('muestra el icono correcto según el tipo', () => {\n    expect(\n      screen.getByRole('alert').querySelector('.text-green-400')\n    ).toBeInTheDocument();\n\n    rerender(<Toast message=\"Mensaje\" type=\"error\" />);\n    expect(\n      screen.getByRole('alert').querySelector('.text-red-400')\n    ).toBeInTheDocument();\n\n    rerender(<Toast message=\"Mensaje\" type=\"warning\" />);\n    expect(\n      screen.getByRole('alert').querySelector('.text-yellow-400')\n    ).toBeInTheDocument();\n\n    rerender(<Toast message=\"Mensaje\" type=\"info\" />);\n    expect(\n      screen.getByRole('alert').querySelector('.text-blue-400')\n    ).toBeInTheDocument();\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/common/index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport { \nexport { Card } from './Card';\nexport { Spinner } from './Spinner';\nexport { Button } from './Button';\nexport { Input } from './Input';\nexport { Select } from './Select';\nexport { Modal } from './Modal';\nexport { Alert } from './Alert';\nexport { Toast } from './Toast';\nexport { Progress } from './Progress';\nexport { Badge } from './Badge';\nexport { Avatar } from './Avatar';\nexport { NotFound } from './NotFound';\nexport { Skeleton } from './Skeleton';\nexport { TextArea } from './TextArea';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/dashboard/AIMedicalWidget.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":7,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const AIMedicalWidget: React.FC = () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!query.trim()) return;\n\n    const result = await aiQuery({\n      query,\n      context: 'medical',\n      priority: 'normal',\n    });\n\n    if (result) {\n      setCurrentEntry(result);\n    }\n  };\n\n  return (\n    <Card className=\"p-4\">\n      <h3 className=\"text-lg font-semibold mb-4\">Consulta IA Médica</h3>\n\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <Input\n          type=\"text\"\n          placeholder=\"Ingrese su consulta médica...\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          disabled={loading}\n        />\n\n        <Button\n          type=\"submit\"\n          disabled={loading || !query.trim()}\n          className=\"w-full\"\n        >\n          {loading ? <Spinner size=\"sm\" /> : 'Consultar'}\n        </Button>\n      </form>\n\n      {error && <div className=\"mt-4 text-red-500 text-sm\">{error}</div>}\n\n      {response && (\n        <div className=\"mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n          <h4 className=\"font-medium mb-2\">Respuesta:</h4>\n          <p className=\"text-sm\">{response.response}</p>\n          <div className=\"mt-2 text-xs text-gray-500\">\n            Fuente: {response.provider}\n          </div>\n        </div>\n      )}\n\n      {currentEntry && (\n        <ResponseFeedback\n          entryId={currentEntry.id}\n          onFeedbackSubmitted={() => setCurrentEntry(null)}\n        />\n      )}\n    </Card>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/dashboard/MetricCard.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface MetricCardProps {\nimport { \n   useState, useEffect \n } from \"react\"\n  title: string\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  value: number\nimport React from \"react\"\n  icon: React.ReactNode;\n  description?: string;\n}\n\nexport const MetricCard = ({\n  title,\n  value,\n  icon,\n  description,\n}: MetricCardProps) => {\n  return (\n    <div className=\"bg-white overflow-hidden shadow rounded-lg\">\n      <div className=\"p-5\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-shrink-0\">{icon}</div>\n          <div className=\"ml-5 w-0 flex-1\">\n            <dl>\n              <dt className=\"text-sm font-medium text-gray-500 truncate\">\n                {title}\n              </dt>\n              <dd className=\"flex items-baseline\">\n                <div className=\"text-2xl font-semibold text-gray-900\">\n                  {value}\n                </div>\n              </dd>\n            </dl>\n          </div>\n        </div>\n        {description && (\n          <div className=\"mt-4\">\n            <p className=\"text-sm text-gray-500\">{description}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/dashboard/RecentActivities.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface RecentActivitiesProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  activities: Activity[]\nimport React from \"react\"\n}\n\nexport const RecentActivities = ({ activities }: RecentActivitiesProps) => {\n  return (\n    <div className=\"bg-white shadow rounded-lg\">\n      <div className=\"px-4 py-5 sm:px-6\">\n        <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n          Actividades Recientes\n        </h3>\n      </div>\n      <div className=\"border-t border-gray-200\">\n        <ul className=\"divide-y divide-gray-200\">\n          {activities.map((activity) => (\n            <li key={activity.id} className=\"px-4 py-4 sm:px-6\">\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-sm font-medium text-primary-600 truncate\">\n                  {activity.description}\n                </p>\n                <div className=\"ml-2 flex-shrink-0 flex\">\n                  <p className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                    {new Date(activity.timestamp).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/dashboard/RecentActivity.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface RecentActivityProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  activities: Activity[]\nimport React from \"react\"\n}\n\nexport const RecentActivity: React.FC<RecentActivityProps> = ({\n  activities,\n}) => {\n  const getActivityIcon = (type: Activity['type']) => {\n    switch (type) {\n      case 'appointment':\n        return '📅';\n      case 'patient':\n        return '👤';\n      case 'task':\n        return '✓';\n      case 'ai_query':\n        return '🤖';\n      default:\n        return '•';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {activities.map((activity) => (\n        <div key={activity.id} className=\"flex items-start space-x-3\">\n          <span className=\"text-lg\">{getActivityIcon(activity.type)}</span>\n          <div>\n            <p className=\"text-sm\">{activity.description}</p>\n            <p className=\"text-xs text-gray-500\">\n              {new Date(activity.timestamp).toLocaleString()}\n            </p>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/emr/AIAssistant.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  aiService,\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  UnstructuredNote,\nimport { \n  AIResponse,\n} from '../../services/ai/aiService';\n\ninterface AIAssistantProps {\n  patientId: string;\n}\n\nexport const AIAssistant: React.FC<AIAssistantProps> = ({ patientId }) => {\n\n\n\n\n\n  const analyzeNotes = useCallback(\n    async (notesToAnalyze: UnstructuredNote[]) => {\n      try {\n        setLoading(true);\n        setError(null);\n        const results = await aiService.analyzeUnstructuredNotes(\n          patientId,\n          notesToAnalyze\n        );\n        setAnalysis(results);\n      } catch (err) {\n        setError('Error al analizar las notas médicas');\n        console.error('Error:', err);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [patientId]\n  );\n\n  // Cargar notas de ejemplo\n  useEffect(() => {\n    const loadExampleNotes = async () => {\n      const exampleNotes: UnstructuredNote[] = [\n        {\n          content:\n            'Paciente llega a urgencias con fiebre de 39.2°C, tos seca y dificultad respiratoria. Presión arterial 160/95, frecuencia cardíaca 120 bpm, saturación de O2 92%. Refiere que hace 5 días comenzó con malestar general y dolor de cabeza. Se administra paracetamol 1g y se inicia oxígeno nasal a 2L/min.',\n          type: 'emergency',\n          timestamp: new Date(\n            Date.now() - 5 * 24 * 60 * 60 * 1000\n          ).toISOString(),\n          author: 'Dr. Urgencias',\n          symptoms: [\n            'fiebre',\n            'tos seca',\n            'dificultad respiratoria',\n            'malestar general',\n            'dolor de cabeza',\n          ],\n          medications: ['paracetamol 1g', 'oxígeno nasal 2L/min'],\n          vitalSigns: {\n            temperature: 39.2,\n            bloodPressure: '160/95',\n            heartRate: 120,\n            oxygenSaturation: 92,\n          },\n        },\n        {\n          content:\n            'Paciente presenta mejoría de síntomas respiratorios. Temperatura 37.8°C, presión 140/90, FC 95 bpm, SatO2 96%. Se mantiene tratamiento con paracetamol y se agrega amoxicilina 500mg cada 8 horas. El paciente menciona que tiene antecedentes de hipertensión pero no recuerda qué medicamentos toma.',\n          type: 'consultation',\n          timestamp: new Date(\n            Date.now() - 4 * 24 * 60 * 60 * 1000\n          ).toISOString(),\n          author: 'Dr. Internista',\n          symptoms: ['síntomas respiratorios'],\n          medications: ['paracetamol', 'amoxicilina 500mg'],\n          vitalSigns: {\n            temperature: 37.8,\n            bloodPressure: '140/90',\n            heartRate: 95,\n            oxygenSaturation: 96,\n          },\n        },\n        {\n          content:\n            'Resultados de laboratorio: Leucocitos: 15,000 (elevados), Neutrófilos: 85% (elevados), PCR: 45 mg/L (elevado), Hemoglobina: 13.2 g/dL, Plaquetas: 250,000, Creatinina: 1.2 mg/dL (elevada), Urea: 45 mg/dL (elevada), Glicemia: 126 mg/dL (elevada)',\n          type: 'lab-result',\n          timestamp: new Date(\n            Date.now() - 3 * 24 * 60 * 60 * 1000\n          ).toISOString(),\n          author: 'Laboratorio',\n        },\n        {\n          content:\n            'Paciente refiere dolor en el pecho y fatiga. Signos vitales: TA 150/92, FC 110 bpm, SatO2 94%. Se suspende amoxicilina por sospecha de reacción alérgica. Se indica reposo y se mantiene paracetamol.',\n          type: 'consultation',\n          timestamp: new Date(\n            Date.now() - 2 * 24 * 60 * 60 * 1000\n          ).toISOString(),\n          author: 'Dr. Internista',\n          symptoms: ['dolor en el pecho', 'fatiga'],\n          medications: ['paracetamol'],\n          vitalSigns: {\n            bloodPressure: '150/92',\n            heartRate: 110,\n            oxygenSaturation: 94,\n          },\n        },\n        {\n          content:\n            'Paciente regresa a urgencias con empeoramiento de síntomas. Temperatura 38.5°C, TA 165/98, FC 125 bpm, SatO2 90%. Se inicia tratamiento con ceftriaxona 1g IV cada 24 horas. El paciente menciona que tiene diabetes tipo 2 pero no está en control.',\n          type: 'emergency',\n          timestamp: new Date().toISOString(),\n          author: 'Dr. Urgencias',\n          symptoms: ['empeoramiento de síntomas'],\n          medications: ['ceftriaxona 1g IV'],\n          vitalSigns: {\n            temperature: 38.5,\n            bloodPressure: '165/98',\n            heartRate: 125,\n            oxygenSaturation: 90,\n          },\n        },\n      ];\n\n      setNotes(exampleNotes);\n      await analyzeNotes(exampleNotes);\n    };\n\n    loadExampleNotes();\n  }, [analyzeNotes]);\n\n  const handleNoteSubmit = async (note: UnstructuredNote) => {\n\n    setNotes(updatedNotes);\n    await analyzeNotes(updatedNotes);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <h2 className=\"text-xl font-semibold mb-4\">Asistente Virtual Médico</h2>\n        <p className=\"text-gray-600 mb-4\">\n          Ingresa las notas médicas y el asistente virtual organizará la\n          información, identificará puntos de atención y generará\n          recomendaciones.\n        </p>\n        <NoteInput onSubmit={handleNoteSubmit} />\n      </Card>\n\n      {loading && (\n        <div className=\"flex justify-center\">\n          <Spinner />\n        </div>\n      )}\n\n      {error && (\n        <div className=\"bg-red-50 text-red-700 p-4 rounded-lg\">{error}</div>\n      )}\n\n      {analysis && <AnalysisResults response={analysis} />}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/emr/AnalysisResults.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  Card,\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  CardContent,\nimport { \n  AIResponse,\n  TimelineEvent,\n  Insight,\n  Recommendation,\n } from '../../services/ai/types'\nimport { \n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Box,\n} from '@mui/material';\n\ninterface AnalysisResultsProps {\n  response: AIResponse;\n}\n\nconst AnalysisResults: React.FC<AnalysisResultsProps> = ({ response }) => {\n  const renderTimeline = (timeline: {\n    date: string;\n    events: TimelineEvent[];\n  }) => (\n    <Box key={timeline.date} sx={{ mb: 2 }}>\n      <Typography variant=\"subtitle1\" color=\"primary\">\n        {new Date(timeline.date).toLocaleDateString()}\n      </Typography>\n      <List>\n        {timeline.events.map((event: TimelineEvent) => (\n          <ListItem key={`${event.type}-${event.description}`}>\n            <ListItemText primary={event.type} secondary={event.description} />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n\n  const renderInsights = (insight: Insight) => (\n    <ListItem key={`${insight.type}-${insight.description}`}>\n      <ListItemText\n        primary={\n          <Typography variant=\"subtitle1\" color=\"error\">\n            {insight.type}\n          </Typography>\n        }\n        secondary={\n          <>\n            <Typography variant=\"body2\">{insight.description}</Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Severidad: {insight.severity}\n            </Typography>\n            {insight.evidence && (\n              <Box sx={{ mt: 1 }}>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Evidencia:\n                </Typography>\n                <List dense>\n                  {insight.evidence.map((evidence: string) => (\n                    <ListItem key={evidence}>\n                      <ListItemText primary={evidence} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n            )}\n          </>\n        }\n      />\n    </ListItem>\n  );\n\n  const renderRecommendations = (recommendation: Recommendation) => (\n    <ListItem key={`${recommendation.type}-${recommendation.description}`}>\n      <ListItemText\n        primary={\n          <Typography variant=\"subtitle1\" color=\"primary\">\n            {recommendation.type}\n          </Typography>\n        }\n        secondary={\n          <>\n            <Typography variant=\"body2\">\n              {recommendation.description}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Prioridad: {recommendation.priority}\n            </Typography>\n            {recommendation.evidence && (\n              <Box sx={{ mt: 1 }}>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Evidencia:\n                </Typography>\n                <List dense>\n                  {recommendation.evidence.map((evidence: string) => (\n                    <ListItem key={evidence}>\n                      <ListItemText primary={evidence} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n            )}\n          </>\n        }\n      />\n    </ListItem>\n  );\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h6\" gutterBottom>\n          Resultados del Análisis\n        </Typography>\n        <Typography variant=\"body1\" sx={{ mb: 2 }}>\n          {response.answer}\n        </Typography>\n\n        {response.timeline && response.timeline.length > 0 && (\n          <>\n            <Typography variant=\"h6\" gutterBottom>\n              Línea de Tiempo\n            </Typography>\n            {response.timeline.map(renderTimeline)}\n            <Divider sx={{ my: 2 }} />\n          </>\n        )}\n\n        {response.insights && response.insights.length > 0 && (\n          <>\n            <Typography variant=\"h6\" gutterBottom>\n              Insights\n            </Typography>\n            <List>{response.insights.map(renderInsights)}</List>\n            <Divider sx={{ my: 2 }} />\n          </>\n        )}\n\n        {response.recommendations && response.recommendations.length > 0 && (\n          <>\n            <Typography variant=\"h6\" gutterBottom>\n              Recomendaciones\n            </Typography>\n            <List>{response.recommendations.map(renderRecommendations)}</List>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AnalysisResults;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/emr/NoteInput.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface NoteInputProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  onSubmit: (note: {\nimport React from \"react\"\n    content: string;\n    type:\n      | 'consultation'\n      | 'emergency'\n      | 'follow-up'\n      | 'lab-result'\n      | 'prescription'\n      | 'other';\n    timestamp: string;\n    author: string;\n  }) => void;\n}\n\nexport const NoteInput: React.FC<NoteInputProps> = ({ onSubmit }) => {\n\n  const [type, setType] = useState<\n    | 'consultation'\n    | 'emergency'\n    | 'follow-up'\n    | 'lab-result'\n    | 'prescription'\n    | 'other'\n  >('consultation');\n\n  const noteTypes = [\n    { value: 'consultation', label: 'Consulta' },\n    { value: 'emergency', label: 'Emergencia' },\n    { value: 'follow-up', label: 'Seguimiento' },\n    { value: 'lab-result', label: 'Resultado de Laboratorio' },\n    { value: 'prescription', label: 'Prescripción' },\n    { value: 'other', label: 'Otro' },\n  ];\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!content.trim()) return;\n\n    onSubmit({\n      content,\n      type,\n      timestamp: new Date().toISOString(),\n      author: 'Dr. Ejemplo', // Esto debería venir del contexto de autenticación\n    });\n\n    setContent('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <label\n          htmlFor=\"note-type\"\n          className=\"block text-sm font-medium text-gray-700\"\n        >\n          Tipo de Nota\n        </label>\n        <Select\n          id=\"note-type\"\n          value={type}\n          onChange={(e: ChangeEvent<HTMLSelectElement>) =>\n            setType(e.target.value as typeof type)\n          }\n          className=\"mt-1\"\n          options={noteTypes}\n        />\n      </div>\n\n      <div>\n        <label\n          htmlFor=\"note-content\"\n          className=\"block text-sm font-medium text-gray-700\"\n        >\n          Contenido de la Nota\n        </label>\n        <TextArea\n          id=\"note-content\"\n          rows={4}\n          value={content}\n          onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n            setContent(e.target.value)\n          }\n          placeholder=\"Escribe aquí la nota médica...\"\n          className=\"mt-1\"\n        />\n      </div>\n\n      <Button type=\"submit\" className=\"w-full\">\n        Procesar Nota\n      </Button>\n    </form>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/examples/EMRPatientSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":6,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":6,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":41}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\n // Definir la interfaz para la consulta de búsqueda\nimport { \n   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport React from 'react'\ninterface EMRSearchQuery {\n  name: string;\n  documentId: string;\n  email: string;\n  phone: string;\n}\n\n// Interfaz para los resultados de búsqueda conforme a EMRPatientSearchResult\ninterface SearchResult {\n  id: string;\n  fullName: string;\n  name: string;\n  birthDate: string;\n  gender: string;\n  mrn: string;\n  dateOfBirth?: Date;\n  documentId?: string;\n  contactInfo?: {\n    email?: string;\n    phone?: string;\n  };\n}\n\n/**\n * Componente de ejemplo para búsqueda de pacientes\n */\nconst EMRPatientSearch: React.FC = () => {\n  // Estado para el formulario de búsqueda\n  const [searchQuery, setSearchQuery] = useState<EMRSearchQuery>({\n    name: '',\n    documentId: '',\n    email: '',\n    phone: '',\n  });\n\n  // Estado para los resultados de búsqueda\n\n  // Estado de carga\n\n  // Estado para indicar si se ha realizado una búsqueda\n\n  // Actualizar campo de búsqueda\n  const handleSearchChange = (field: keyof EMRSearchQuery, value: string) => {\n    setSearchQuery((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  // Realizar búsqueda de pacientes\n  const handleSearch = async () => {\n    // Validar que al menos un campo tenga valor\n    if (\n      !searchQuery.name &&\n      !searchQuery.documentId &&\n      !searchQuery.email &&\n      !searchQuery.phone\n    ) {\n      console.error('Error: Introduce al menos un criterio de búsqueda');\n      return;\n    }\n\n    // Simulamos búsqueda para evitar dependencias externas\n    setIsSearching(true);\n\n    // Simulación de tiempo de carga\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    // Resultado de ejemplo\n    const mockResults: SearchResult[] = [\n      {\n        id: '1',\n        fullName: 'Juan García',\n        name: 'Juan García',\n        birthDate: '1980-05-15',\n        gender: 'M',\n        mrn: 'MRN12345',\n        dateOfBirth: new Date('1980-05-15'),\n        documentId: 'MRN12345',\n        contactInfo: {\n          email: 'juan@example.com',\n          phone: '123-456-7890',\n        },\n      },\n      {\n        id: '2',\n        fullName: 'María López',\n        name: 'María López',\n        birthDate: '1975-08-22',\n        gender: 'F',\n        mrn: 'MRN67890',\n        dateOfBirth: new Date('1975-08-22'),\n        documentId: 'MRN67890',\n        contactInfo: {\n          email: 'maria@example.com',\n          phone: '098-765-4321',\n        },\n      },\n    ];\n\n    // Aplicar filtros según los criterios de búsqueda\n    const filteredResults = mockResults.filter((patient) => {\n      const nameMatch = searchQuery.name\n        ? patient.name.toLowerCase().includes(searchQuery.name.toLowerCase())\n        : true;\n\n      const docMatch = searchQuery.documentId\n        ? patient.documentId?.includes(searchQuery.documentId)\n        : true;\n\n      const emailMatch = searchQuery.email\n        ? patient.contactInfo?.email\n            ?.toLowerCase()\n            .includes(searchQuery.email.toLowerCase())\n        : true;\n\n      const phoneMatch = searchQuery.phone\n        ? patient.contactInfo?.phone?.includes(searchQuery.phone)\n        : true;\n\n      return nameMatch && docMatch && emailMatch && phoneMatch;\n    });\n\n    setSearchResults(filteredResults);\n    setHasSearched(true);\n    setIsSearching(false);\n  };\n\n  // Limpiar formulario\n  const handleClear = () => {\n    setSearchQuery({\n      name: '',\n      documentId: '',\n      email: '',\n      phone: '',\n    });\n    setSearchResults([]);\n    setHasSearched(false);\n  };\n\n  return (\n    <Box p={6} borderWidth=\"1px\" borderRadius=\"lg\" bg=\"white\" shadow=\"md\">\n      <VStack align=\"stretch\">\n        <Heading size=\"md\">Búsqueda de Pacientes</Heading>\n        <Text fontSize=\"sm\" color=\"gray.600\">\n          Este componente simula la búsqueda de pacientes en un sistema EMR.\n        </Text>\n\n        <Box>\n          <Box mb={4}>\n            <Text fontWeight=\"bold\" mb={2}>\n              Nombre\n            </Text>\n            <Input\n              placeholder=\"Ej. Juan García\"\n              value={searchQuery.name}\n              onChange={(e) => handleSearchChange('name', e.target.value)}\n            />\n          </Box>\n\n          <Box mb={4}>\n            <Text fontWeight=\"bold\" mb={2}>\n              Documento de Identidad\n            </Text>\n            <Input\n              placeholder=\"Ej. 12345678X\"\n              value={searchQuery.documentId}\n              onChange={(e) => handleSearchChange('documentId', e.target.value)}\n            />\n          </Box>\n\n          <Box mb={4}>\n            <Text fontWeight=\"bold\" mb={2}>\n              Email\n            </Text>\n            <Input\n              placeholder=\"Ej. paciente@correo.com\"\n              value={searchQuery.email}\n              type=\"email\"\n              onChange={(e) => handleSearchChange('email', e.target.value)}\n            />\n          </Box>\n\n          <Box mb={4}>\n            <Text fontWeight=\"bold\" mb={2}>\n              Teléfono\n            </Text>\n            <Input\n              placeholder=\"Ej. 612345678\"\n              value={searchQuery.phone}\n              onChange={(e) => handleSearchChange('phone', e.target.value)}\n            />\n          </Box>\n        </Box>\n\n        <Box>\n          <Button variant=\"outline\" onClick={handleClear} mr={3}>\n            Limpiar\n          </Button>\n\n          <Button\n            colorScheme=\"blue\"\n            onClick={handleSearch}\n            disabled={isSearching}\n          >\n            {isSearching ? 'Buscando...' : 'Buscar Paciente'}\n          </Button>\n        </Box>\n\n        {hasSearched && (\n          <Box mt={4}>\n            <Heading size=\"sm\" mb={3}>\n              Resultados\n            </Heading>\n\n            {searchResults.length === 0 ? (\n              <Text color=\"gray.500\">\n                No se encontraron resultados con los criterios de búsqueda.\n              </Text>\n            ) : (\n              <Box overflowX=\"auto\">\n                {searchResults.map((patient) => (\n                  <Box\n                    key={patient.id}\n                    p={3}\n                    borderWidth=\"1px\"\n                    borderRadius=\"md\"\n                    mb={2}\n                  >\n                    <Text>\n                      <strong>Nombre:</strong> {patient.fullName}\n                    </Text>\n                    <Text>\n                      <strong>ID:</strong> {patient.id}\n                    </Text>\n                    <Text>\n                      <strong>Fecha Nacimiento:</strong> {patient.birthDate}\n                    </Text>\n                    <Text>\n                      <strong>Género:</strong> {patient.gender}\n                    </Text>\n                    <Text>\n                      <strong>MRN:</strong> {patient.mrn}\n                    </Text>\n                  </Box>\n                ))}\n              </Box>\n            )}\n          </Box>\n        )}\n      </VStack>\n    </Box>\n  );\n};\n\nexport default EMRPatientSearch;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/layout/Header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":7,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":7,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":7,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":41}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const Header: React.FC = () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n\n  return (\n    <header className=\"bg-white dark:bg-gray-800 shadow\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n              MapleAI Health\n            </h1>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-gray-700 dark:text-gray-300\">\n              {user?.name}\n            </span>\n            <Button variant=\"outline\" onClick={logout} className=\"text-sm\">\n              Cerrar sesión\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/layout/Layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":7,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":7,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":7,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":7,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const Layout: React.FC = () => {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <Header />\n      <div className=\"flex\">\n        <Sidebar />\n        <main className=\"flex-1 p-6\">\n          <Outlet />\n        </main>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/layout/MainLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":7,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":7,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":7,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":7,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":41}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport function MainLayout() {\n  import {\n   Button, Input, Select, Modal, Spinner \n} from '@chakra-ui/react';\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      {/* Header */}\n      <header className=\"bg-white shadow\">\n        <nav className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 justify-between\">\n            <div className=\"flex\">\n              <div className=\"flex flex-shrink-0 items-center\">\n                <span className=\"text-xl font-bold text-primary-600\">\n                  MapleAI Health\n                </span>\n              </div>\n              <div className=\"ml-6 flex space-x-8\">\n                <Link\n                  to=\"/\"\n                  className=\"inline-flex items-center border-b-2 border-transparent px-1 pt-1 text-sm font-medium text-gray-500 hover:border-primary-500 hover:text-gray-700\"\n                >\n                  Dashboard\n                </Link>\n                <Link\n                  to=\"/pacientes\"\n                  className=\"inline-flex items-center border-b-2 border-transparent px-1 pt-1 text-sm font-medium text-gray-500 hover:border-primary-500 hover:text-gray-700\"\n                >\n                  Pacientes\n                </Link>\n                <Link\n                  to=\"/configuracion\"\n                  className=\"inline-flex items-center border-b-2 border-transparent px-1 pt-1 text-sm font-medium text-gray-500 hover:border-primary-500 hover:text-gray-700\"\n                >\n                  Configuración\n                </Link>\n              </div>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* Main content */}\n      <main className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6\">\n        <Outlet />\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/layout/Sidebar.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression or comma expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\nconst navigation = [\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  { name: 'Dashboard', href: '/', icon: '📊' },\nimport React from \"react\"\n  { name: 'Pacientes', href: '/patients', icon: '👥' },\n  { name: 'Citas', href: '/appointments', icon: '📅' },\n  { name: 'Historial IA', href: '/ai-history', icon: '🤖' },\n];\n\nexport const Sidebar: React.FC = () => {\n\n\n\n  return (\n    <div className=\"flex flex-col h-full bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700\">\n      <div className=\"flex-1 flex flex-col pt-5 pb-4 overflow-y-auto\">\n        <div className=\"flex items-center flex-shrink-0 px-4\">\n          <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            MapleAIHealth\n          </h1>\n        </div>\n        <nav className=\"mt-5 flex-1 px-2 space-y-1\">\n          {navigation.map((item) => {\n\n            return (\n              <Link\n                key={item.name}\n                to={item.href}\n                className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md ${\n                  isActive\n                    ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white'\n                    : 'text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white'\n                }`}\n              >\n                <span className=\"mr-3\">{item.icon}</span>\n                {item.name}\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n      <div className=\"flex-shrink-0 flex border-t border-gray-200 dark:border-gray-700 p-4\">\n        <Button variant=\"secondary\" onClick={logout} className=\"w-full\">\n          Cerrar Sesión\n        </Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/patient/PatientForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":5,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport { \n   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport React from 'react'\ntype PatientFormData = Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>;\ninterface PatientFormProps {\n  patient?: Patient;\n  onSubmit: (data: PatientFormData) => Promise<void>;\n  isLoading?: boolean;\n}\n\nexport const PatientForm: React.FC<PatientFormProps> = ({\n  patient,\n  onSubmit,\n  isLoading,\n}) => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<PatientFormData>({\n    defaultValues: patient,\n  });\n\n  const handleFormSubmit = async (data: PatientFormData) => {\n    try {\n      await onSubmit(data);\n    } catch (error) {\n      console.error('Error submitting form:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <Input\n            label=\"Nombre\"\n            {...register('firstName', { required: 'El nombre es requerido' })}\n            error={errors.firstName?.message}\n          />\n        </div>\n        <div>\n          <Input\n            label=\"Apellido\"\n            {...register('lastName', { required: 'El apellido es requerido' })}\n            error={errors.lastName?.message}\n          />\n        </div>\n        <div>\n          <Input\n            label=\"Email\"\n            type=\"email\"\n            {...register('email', {\n              required: 'El email es requerido',\n              pattern: {\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n                message: 'Email inválido',\n              },\n            })}\n            error={errors.email?.message}\n          />\n        </div>\n        <div>\n          <Input\n            label=\"Teléfono\"\n            {...register('phone', { required: 'El teléfono es requerido' })}\n            error={errors.phone?.message}\n          />\n        </div>\n        <div>\n          <Input\n            label=\"Fecha de Nacimiento\"\n            type=\"date\"\n            {...register('dateOfBirth', {\n              required: 'La fecha de nacimiento es requerida',\n            })}\n            error={errors.dateOfBirth?.message}\n          />\n        </div>\n        <div>\n          <Select\n            label=\"Género\"\n            {...register('gender', { required: 'El género es requerido' })}\n            error={errors.gender?.message}\n            options={[\n              { value: 'male', label: 'Masculino' },\n              { value: 'female', label: 'Femenino' },\n              { value: 'other', label: 'Otro' },\n            ]}\n          />\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Dirección</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"md:col-span-2\">\n            <Input\n              label=\"Calle\"\n              {...register('address.street', {\n                required: 'La calle es requerida',\n              })}\n              error={errors.address?.street?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"Ciudad\"\n              {...register('address.city', {\n                required: 'La ciudad es requerida',\n              })}\n              error={errors.address?.city?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"Estado\"\n              {...register('address.state', {\n                required: 'El estado es requerido',\n              })}\n              error={errors.address?.state?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"Código Postal\"\n              {...register('address.zipCode', {\n                required: 'El código postal es requerido',\n              })}\n              error={errors.address?.zipCode?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"País\"\n              {...register('address.country', {\n                required: 'El país es requerido',\n              })}\n              error={errors.address?.country?.message}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Contacto de Emergencia</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <Input\n              label=\"Nombre\"\n              {...register('emergencyContact.name', {\n                required: 'El nombre es requerido',\n              })}\n              error={errors.emergencyContact?.name?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"Relación\"\n              {...register('emergencyContact.relationship', {\n                required: 'La relación es requerida',\n              })}\n              error={errors.emergencyContact?.relationship?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"Teléfono\"\n              {...register('emergencyContact.phone', {\n                required: 'El teléfono es requerido',\n              })}\n              error={errors.emergencyContact?.phone?.message}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium\">Historial Médico</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <Input\n              label=\"Alergias (separadas por coma)\"\n              {...register('medicalHistory.allergies')}\n              error={errors.medicalHistory?.allergies?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"Condiciones (separadas por coma)\"\n              {...register('medicalHistory.conditions')}\n              error={errors.medicalHistory?.conditions?.message}\n            />\n          </div>\n          <div>\n            <Input\n              label=\"Medicamentos (separados por coma)\"\n              {...register('medicalHistory.medications')}\n              error={errors.medicalHistory?.medications?.message}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? (\n            <div className=\"flex items-center\">\n              <Spinner className=\"w-4 h-4 mr-2\" />\n              Guardando...\n            </div>\n          ) : (\n            'Guardar Paciente'\n          )}\n        </Button>\n      </div>\n    </form>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/patient/PatientFormModal 2.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface PatientFormModalProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  isOpen: boolean\nimport React from \"react\"\n  onClose: () => void;\n  patient?: Patient;\n  onSuccess: () => void;\n}\n\nconst getSubmitButtonText = (loading: boolean, patient?: Patient): string => {\n  if (loading) return 'Guardando...';\n  return patient ? 'Actualizar' : 'Crear';\n};\n\nexport const PatientFormModal: React.FC<PatientFormModalProps> = ({\n  isOpen,\n  onClose,\n  patient,\n  onSuccess,\n}) => {\n  const [formData, setFormData] = useState<Partial<Patient>>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    dateOfBirth: '',\n    gender: 'other',\n    address: {\n      street: '',\n      city: '',\n      state: '',\n      zipCode: '',\n      country: '',\n    },\n    emergencyContact: {\n      name: '',\n      relationship: '',\n      phone: '',\n    },\n    medicalHistory: {\n      allergies: [],\n      conditions: [],\n      medications: [],\n    },\n  });\n\n\n\n  useEffect(() => {\n    if (patient) {\n      setFormData(patient);\n    } else {\n      setFormData({\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n        dateOfBirth: '',\n        gender: 'other',\n        address: {\n          street: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: '',\n        },\n        emergencyContact: {\n          name: '',\n          relationship: '',\n          phone: '',\n        },\n        medicalHistory: {\n          allergies: [],\n          conditions: [],\n          medications: [],\n        },\n      });\n    }\n  }, [patient]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (patient) {\n        await PatientService.updatePatient(patient.id, formData);\n      } else {\n        await PatientService.createPatient(\n          formData as Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>\n        );\n      }\n      onSuccess();\n      onClose();\n    } catch (err) {\n      setError(\n        patient\n          ? 'Error al actualizar el paciente'\n          : 'Error al crear el paciente'\n      );\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n\n    if (name.includes('.')) {\n\n      setFormData((prev) => ({\n        ...prev,\n        [parent]: {\n          ...(prev[parent as keyof Patient] as Record<\n            string,\n            string | string[]\n          >),\n          [child]: value,\n        },\n      }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={patient ? 'Editar Paciente' : 'Nuevo Paciente'}\n    >\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        <div>\n          <label\n            htmlFor=\"firstName\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Nombre\n          </label>\n          <Input\n            type=\"text\"\n            id=\"firstName\"\n            name=\"firstName\"\n            value={formData.firstName ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"lastName\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Apellido\n          </label>\n          <Input\n            type=\"text\"\n            id=\"lastName\"\n            name=\"lastName\"\n            value={formData.lastName ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"email\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Email\n          </label>\n          <Input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"phone\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Teléfono\n          </label>\n          <Input\n            type=\"tel\"\n            id=\"phone\"\n            name=\"phone\"\n            value={formData.phone ?? ''}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"dateOfBirth\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Fecha de Nacimiento\n          </label>\n          <Input\n            type=\"date\"\n            id=\"dateOfBirth\"\n            name=\"dateOfBirth\"\n            value={formData.dateOfBirth ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"gender\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Género\n          </label>\n          <select\n            id=\"gender\"\n            name=\"gender\"\n            value={formData.gender ?? 'other'}\n            onChange={handleChange}\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            required\n          >\n            <option value=\"male\">Masculino</option>\n            <option value=\"female\">Femenino</option>\n            <option value=\"other\">Otro</option>\n          </select>\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.street\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Dirección\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.street\"\n            name=\"address.street\"\n            value={formData.address?.street ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.city\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Ciudad\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.city\"\n            name=\"address.city\"\n            value={formData.address?.city ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.state\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Estado/Provincia\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.state\"\n            name=\"address.state\"\n            value={formData.address?.state ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.zipCode\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Código Postal\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.zipCode\"\n            name=\"address.zipCode\"\n            value={formData.address?.zipCode ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.country\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            País\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.country\"\n            name=\"address.country\"\n            value={formData.address?.country ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"emergencyContact.name\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Nombre del Contacto de Emergencia\n          </label>\n          <Input\n            type=\"text\"\n            id=\"emergencyContact.name\"\n            name=\"emergencyContact.name\"\n            value={formData.emergencyContact?.name ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"emergencyContact.relationship\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Relación\n          </label>\n          <Input\n            type=\"text\"\n            id=\"emergencyContact.relationship\"\n            name=\"emergencyContact.relationship\"\n            value={formData.emergencyContact?.relationship ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"emergencyContact.phone\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Teléfono de Emergencia\n          </label>\n          <Input\n            type=\"tel\"\n            id=\"emergencyContact.phone\"\n            name=\"emergencyContact.phone\"\n            value={formData.emergencyContact?.phone ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div className=\"flex justify-end space-x-3\">\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={onClose}\n            disabled={loading}\n          >\n            Cancelar\n          </Button>\n          <Button type=\"submit\" disabled={loading}>\n            {getSubmitButtonText(loading, patient)}\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/patient/PatientFormModal.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Property or signature expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\ninterface PatientFormModalProps {\nimport { \n   Button, Input, Select, Modal, Spinner \n } from \"@chakra-ui/react\"\n  isOpen: boolean\nimport React from \"react\"\n  onClose: () => void;\n  patient?: Patient;\n  onSuccess: () => void;\n}\n\nconst getSubmitButtonText = (loading: boolean, patient?: Patient): string => {\n  if (loading) return 'Guardando...';\n  return patient ? 'Actualizar' : 'Crear';\n};\n\nexport const PatientFormModal: React.FC<PatientFormModalProps> = ({\n  isOpen,\n  onClose,\n  patient,\n  onSuccess,\n}) => {\n  const [formData, setFormData] = useState<Partial<Patient>>({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    dateOfBirth: '',\n    gender: 'other',\n    address: {\n      street: '',\n      city: '',\n      state: '',\n      zipCode: '',\n      country: '',\n    },\n    emergencyContact: {\n      name: '',\n      relationship: '',\n      phone: '',\n    },\n    medicalHistory: {\n      allergies: [],\n      conditions: [],\n      medications: [],\n    },\n  });\n\n\n\n  useEffect(() => {\n    if (patient) {\n      setFormData(patient);\n    } else {\n      setFormData({\n        firstName: '',\n        lastName: '',\n        email: '',\n        phone: '',\n        dateOfBirth: '',\n        gender: 'other',\n        address: {\n          street: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: '',\n        },\n        emergencyContact: {\n          name: '',\n          relationship: '',\n          phone: '',\n        },\n        medicalHistory: {\n          allergies: [],\n          conditions: [],\n          medications: [],\n        },\n      });\n    }\n  }, [patient]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      if (patient) {\n        await PatientService.updatePatient(patient.id, formData);\n      } else {\n        await PatientService.createPatient(\n          formData as Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>\n        );\n      }\n      onSuccess();\n      onClose();\n    } catch (err) {\n      setError(\n        patient\n          ? 'Error al actualizar el paciente'\n          : 'Error al crear el paciente'\n      );\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n\n    if (name.includes('.')) {\n\n      setFormData((prev) => ({\n        ...prev,\n        [parent]: {\n          ...(prev[parent as keyof Patient] as Record<\n            string,\n            string | string[]\n          >),\n          [child]: value,\n        },\n      }));\n    } else {\n      setFormData((prev) => ({\n        ...prev,\n        [name]: value,\n      }));\n    }\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={patient ? 'Editar Paciente' : 'Nuevo Paciente'}\n    >\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        <div>\n          <label\n            htmlFor=\"firstName\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Nombre\n          </label>\n          <Input\n            type=\"text\"\n            id=\"firstName\"\n            name=\"firstName\"\n            value={formData.firstName ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"lastName\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Apellido\n          </label>\n          <Input\n            type=\"text\"\n            id=\"lastName\"\n            name=\"lastName\"\n            value={formData.lastName ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"email\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Email\n          </label>\n          <Input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={formData.email ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"phone\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Teléfono\n          </label>\n          <Input\n            type=\"tel\"\n            id=\"phone\"\n            name=\"phone\"\n            value={formData.phone ?? ''}\n            onChange={handleChange}\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"dateOfBirth\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Fecha de Nacimiento\n          </label>\n          <Input\n            type=\"date\"\n            id=\"dateOfBirth\"\n            name=\"dateOfBirth\"\n            value={formData.dateOfBirth ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"gender\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Género\n          </label>\n          <select\n            id=\"gender\"\n            name=\"gender\"\n            value={formData.gender ?? 'other'}\n            onChange={handleChange}\n            className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white\"\n            required\n          >\n            <option value=\"male\">Masculino</option>\n            <option value=\"female\">Femenino</option>\n            <option value=\"other\">Otro</option>\n          </select>\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.street\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Dirección\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.street\"\n            name=\"address.street\"\n            value={formData.address?.street ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.city\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Ciudad\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.city\"\n            name=\"address.city\"\n            value={formData.address?.city ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.state\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Estado/Provincia\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.state\"\n            name=\"address.state\"\n            value={formData.address?.state ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.zipCode\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Código Postal\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.zipCode\"\n            name=\"address.zipCode\"\n            value={formData.address?.zipCode ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"address.country\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            País\n          </label>\n          <Input\n            type=\"text\"\n            id=\"address.country\"\n            name=\"address.country\"\n            value={formData.address?.country ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"emergencyContact.name\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Nombre del Contacto de Emergencia\n          </label>\n          <Input\n            type=\"text\"\n            id=\"emergencyContact.name\"\n            name=\"emergencyContact.name\"\n            value={formData.emergencyContact?.name ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"emergencyContact.relationship\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Relación\n          </label>\n          <Input\n            type=\"text\"\n            id=\"emergencyContact.relationship\"\n            name=\"emergencyContact.relationship\"\n            value={formData.emergencyContact?.relationship ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div>\n          <label\n            htmlFor=\"emergencyContact.phone\"\n            className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n          >\n            Teléfono de Emergencia\n          </label>\n          <Input\n            type=\"tel\"\n            id=\"emergencyContact.phone\"\n            name=\"emergencyContact.phone\"\n            value={formData.emergencyContact?.phone ?? ''}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        <div className=\"flex justify-end space-x-3\">\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            onClick={onClose}\n            disabled={loading}\n          >\n            Cancelar\n          </Button>\n          <Button type=\"submit\" disabled={loading}>\n            {getSubmitButtonText(loading, patient)}\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/components/setup/EMRSetupForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":6,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":6,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Select' is defined but never used.","line":6,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Modal' is defined but never used.","line":6,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Spinner' is defined but never used.","line":6,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'initialConfig' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":16}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\n // Definir interfaz para la configuración de EMR\nimport { \n   Button, Input, Select, Modal, Spinner \n } from '@chakra-ui/react'\nimport React from 'react'\ninterface EMRAdapterConfig {\n  baseUrl?: string;\n  username?: string;\n  password?: string;\n  apiUrl?: string;\n  apiKey?: string;\n  clinicId?: string;\n  clientId?: string;\n  clientSecret?: string;\n  [key: string]: string | undefined;\n}\n\ninterface EMRSetupFormProps {\n  onSetupComplete: (adapterName: string, config: EMRAdapterConfig) => void;\n  initialAdapterName?: string;\n  initialConfig?: EMRAdapterConfig;\n}\n\n/**\n * Componente para configurar y probar adaptadores EMR\n */\nexport const EMRSetupForm: React.FC<EMRSetupFormProps> = ({\n  onSetupComplete,\n  initialAdapterName,\n  initialConfig,\n}) => {\n  // Estado para el adaptador seleccionado\n  const [selectedAdapter, setSelectedAdapter] = useState(\n    initialAdapterName ?? ''\n  );\n\n  // Estado para guardar los adaptadores disponibles\n  const [availableAdapters, setAvailableAdapters] = useState<\n    Array<{\n      id: string;\n      name: string;\n      description: string;\n    }>\n  >([]);\n\n  // Estado para guardar la configuración del adaptador\n\n  // Estado para indicar si estamos probando la conexión\n\n  // Estado para mensajes\n  const [message, setMessage] = useState<{\n    text: string;\n    type: 'success' | 'error' | 'warning' | 'info';\n  } | null>(null);\n\n  // Cargar los adaptadores disponibles al montar el componente\n  useEffect(() => {\n    setAvailableAdapters(adapters);\n\n    // Si no hay adaptador inicial seleccionado y tenemos adaptadores disponibles\n    if (!selectedAdapter && adapters.length > 0) {\n      setSelectedAdapter(adapters[0].id);\n    }\n  }, [selectedAdapter]);\n\n  // Actualizar un campo de configuración\n  const handleConfigChange = (field: string, value: string) => {\n    setConfig((prev) => ({\n      ...prev,\n      [field]: value,\n    }));\n  };\n\n  // Renderizar campos de configuración según el adaptador seleccionado\n  const renderConfigFields = () => {\n    switch (selectedAdapter) {\n      case 'OSCAR':\n        return (\n          <>\n            <div className=\"form-group\">\n              <label htmlFor=\"baseUrl\">\n                URL Base <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"baseUrl\"\n                type=\"text\"\n                placeholder=\"https://oscar-instance.hospital.ca\"\n                value={config.baseUrl ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('baseUrl', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"username\">\n                Usuario <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"usuario-oscar\"\n                value={config.username ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('username', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">\n                Contraseña <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={config.password ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('password', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"clinicId\">\n                ID de Clínica <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"clinicId\"\n                type=\"text\"\n                placeholder=\"12345\"\n                value={config.clinicId ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('clinicId', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n          </>\n        );\n\n      case 'CLINICCLOUD':\n        return (\n          <>\n            <div className=\"form-group\">\n              <label htmlFor=\"apiUrl\">\n                URL de la API <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"apiUrl\"\n                type=\"text\"\n                placeholder=\"https://api.cliniccloud.es\"\n                value={config.apiUrl ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('apiUrl', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"apiKey\">\n                API Key <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"apiKey\"\n                type=\"text\"\n                placeholder=\"tu-api-key\"\n                value={config.apiKey ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('apiKey', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"clinicId\">\n                ID de Clínica <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"clinicId\"\n                type=\"text\"\n                placeholder=\"id-de-tu-clinica\"\n                value={config.clinicId ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('clinicId', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"clientId\">Client ID (OAuth, opcional)</label>\n              <input\n                id=\"clientId\"\n                type=\"text\"\n                placeholder=\"oauth-client-id\"\n                value={config.clientId ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('clientId', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"clientSecret\">\n                Client Secret (OAuth, opcional)\n              </label>\n              <input\n                id=\"clientSecret\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={config.clientSecret ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('clientSecret', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n          </>\n        );\n\n      case 'EPIC':\n        return (\n          <>\n            <div className=\"form-group\">\n              <label htmlFor=\"baseUrl\">\n                URL Base <span className=\"required\">*</span>\n              </label>\n              <input\n                id=\"baseUrl\"\n                type=\"text\"\n                placeholder=\"https://epic-fhir-api.hospital.org\"\n                value={config.baseUrl ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('baseUrl', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"apiKey\">API Key</label>\n              <input\n                id=\"apiKey\"\n                type=\"text\"\n                placeholder=\"tu-api-key\"\n                value={config.apiKey ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('apiKey', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"clientId\">Client ID (OAuth2)</label>\n              <input\n                id=\"clientId\"\n                type=\"text\"\n                placeholder=\"tu-client-id\"\n                value={config.clientId ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('clientId', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"clientSecret\">Client Secret (OAuth2)</label>\n              <input\n                id=\"clientSecret\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={config.clientSecret ?? ''}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  handleConfigChange('clientSecret', e.target.value)\n                }\n                className=\"form-input\"\n              />\n            </div>\n          </>\n        );\n\n      case 'GENERIC':\n        return (\n          <div className=\"info-box\">\n            <p>\n              El adaptador genérico no requiere configuración. Es útil para\n              desarrollo y demostración.\n            </p>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"warning-box\">\n            <p>Selecciona un adaptador EMR para configurarlo.</p>\n          </div>\n        );\n    }\n  };\n\n  // Probar la conexión con el adaptador configurado\n  const testConnection = async () => {\n    try {\n      setIsTesting(true);\n\n      // Obtener una instancia del adaptador seleccionado con la configuración actual\n\n      // Probar la conexión\n\n      if (result) {\n        setMessage({\n          text: `La conexión con ${selectedAdapter} se ha establecido correctamente.`,\n          type: 'success',\n        });\n      } else {\n        setMessage({\n          text: 'No se pudo establecer conexión con el sistema EMR.',\n          type: 'error',\n        });\n      }\n    } catch (error) {\n      setMessage({\n        text: `Error: ${(error as Error).message}`,\n        type: 'error',\n      });\n    } finally {\n      setIsTesting(false);\n    }\n  };\n\n  // Guardar la configuración\n  const saveConfiguration = () => {\n    // Validar configuración según el adaptador seleccionado\n    if (selectedAdapter === 'OSCAR') {\n      if (\n        !config.baseUrl ||\n        !config.username ||\n        !config.password ||\n        !config.clinicId\n      ) {\n        setMessage({\n          text: 'Por favor completa todos los campos requeridos.',\n          type: 'warning',\n        });\n        return;\n      }\n    } else if (selectedAdapter === 'CLINICCLOUD') {\n      if (!config.apiUrl || !config.apiKey || !config.clinicId) {\n        setMessage({\n          text: 'Por favor completa todos los campos requeridos.',\n          type: 'warning',\n        });\n        return;\n      }\n    } else if (selectedAdapter === 'EPIC') {\n      if (!config.baseUrl) {\n        setMessage({\n          text: 'Por favor completa todos los campos requeridos.',\n          type: 'warning',\n        });\n        return;\n      }\n    }\n\n    // Notificar al componente padre\n    onSetupComplete(selectedAdapter, config);\n\n    setMessage({\n      text: `Configuración de ${selectedAdapter} guardada exitosamente.`,\n      type: 'success',\n    });\n  };\n\n  const selectedAdapterInfo = availableAdapters.find(\n    (a) => a.id === selectedAdapter\n  );\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <h2 className=\"card-title\">Configuración de Sistema EMR</h2>\n\n        {message && (\n          <div className={`message ${message.type}`}>\n            {message.text}\n            <button\n              className=\"close-message\"\n              onClick={() => setMessage(null)}\n              aria-label=\"Cerrar mensaje\"\n            >\n              ×\n            </button>\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label htmlFor=\"emr-select\">Sistema EMR</label>\n          <select\n            id=\"emr-select\"\n            value={selectedAdapter}\n            onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\n              setSelectedAdapter(e.target.value)\n            }\n            className=\"form-select\"\n            aria-label=\"Seleccionar sistema EMR\"\n          >\n            {availableAdapters.map((adapter) => (\n              <option key={adapter.id} value={adapter.id}>\n                {adapter.name}\n              </option>\n            ))}\n          </select>\n\n          {selectedAdapterInfo && (\n            <p className=\"helper-text\">{selectedAdapterInfo.description}</p>\n          )}\n        </div>\n\n        <div className=\"form-fields\">{renderConfigFields()}</div>\n\n        <div className=\"button-group\">\n          <button\n            className=\"button outline\"\n            onClick={testConnection}\n            disabled={!selectedAdapter || isTesting}\n          >\n            {isTesting ? 'Probando...' : 'Probar Conexión'}\n          </button>\n\n          <button\n            className=\"button primary\"\n            onClick={saveConfiguration}\n            disabled={!selectedAdapter}\n          >\n            Guardar Configuración\n          </button>\n        </div>\n      </div>\n\n      <style>{`\n        .card {\n          border: 1px solid #e2e8f0;\n          border-radius: 8px;\n          box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n          background: white;\n        }\n        .card-content {\n          padding: 1.5rem;\n        }\n        .card-title {\n          font-size: 1.25rem;\n          font-weight: 600;\n          margin-bottom: 1.5rem;\n        }\n        .form-group {\n          margin-bottom: 1rem;\n        }\n        label {\n          display: block;\n          font-size: 0.875rem;\n          font-weight: 500;\n          margin-bottom: 0.5rem;\n        }\n        .required {\n          color: #e53e3e;\n        }\n        .form-input, .form-select {\n          width: 100%;\n          padding: 0.5rem 0.75rem;\n          border: 1px solid #cbd5e0;\n          border-radius: 0.375rem;\n          font-size: 1rem;\n        }\n        .form-fields {\n          margin: 1rem 0;\n        }\n        .info-box, .warning-box {\n          padding: 1rem;\n          border-radius: 0.375rem;\n          margin-bottom: 1rem;\n        }\n        .info-box {\n          background: #ebf8ff;\n          border: 1px solid #4299e1;\n        }\n        .warning-box {\n          background: #fffaf0;\n          border: 1px solid #f6ad55;\n        }\n        .button-group {\n          display: flex;\n          justify-content: flex-end;\n          gap: 1rem;\n          margin-top: 1.5rem;\n        }\n        .button {\n          padding: 0.5rem 1rem;\n          font-size: 0.875rem;\n          font-weight: 500;\n          border-radius: 0.375rem;\n          cursor: pointer;\n        }\n        .button:disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n        }\n        .outline {\n          background: white;\n          color: #2c7a7b;\n          border: 1px solid #2c7a7b;\n        }\n        .primary {\n          background: #3182ce;\n          color: white;\n          border: none;\n        }\n        .helper-text {\n          font-size: 0.75rem;\n          color: #718096;\n          margin-top: 0.5rem;\n        }\n        .message {\n          padding: 0.75rem 1rem;\n          margin-bottom: 1rem;\n          border-radius: 0.375rem;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .success {\n          background: #c6f6d5;\n          border: 1px solid #38a169;\n          color: #276749;\n        }\n        .error {\n          background: #fed7d7;\n          border: 1px solid #e53e3e;\n          color: #c53030;\n        }\n        .warning {\n          background: #feebc8;\n          border: 1px solid #dd6b20;\n          color: #c05621;\n        }\n        .info {\n          background: #bee3f8;\n          border: 1px solid #3182ce;\n          color: #2c5282;\n        }\n        .close-message {\n          background: none;\n          border: none;\n          font-size: 1.25rem;\n          cursor: pointer;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default EMRSetupForm;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/hooks/useAIQuery.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/hooks/useApi.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ApiError' is defined but never used.","line":1,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface ApiError {\n  message: string;\n  status: number;\n}\n\ninterface ApiResponse<T> {\n  data: T;\n  status: number;\n  message: string;\n}\n\n// Función base para hacer peticiones HTTP\nasync function fetchApi<T>(\n  url: string,\n  options?: RequestInit\n): Promise<ApiResponse<T>> {\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      'Content-Type': 'application/json',\n      ...options?.headers,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(error.message);\n  }\n\n  return response.json();\n}\n\n// Hook para obtener datos\nexport function useApiQuery<T>(\n  key: string[],\n  url: string,\n  options?: UseQueryOptions<ApiResponse<T>, Error>\n) {\n  return useQuery<ApiResponse<T>, Error>({\n    queryKey: key,\n    queryFn: () => fetchApi<T>(url),\n    ...options,\n  });\n}\n\n// Hook para crear datos\nexport function useApiMutation<T, V>(url: string, queryKey?: string[]) {\n  return useMutation<ApiResponse<T>, Error, V>({\n    mutationFn: (variables: V) =>\n      fetchApi<T>(url, {\n        method: 'POST',\n        body: JSON.stringify(variables),\n      }),\n    onSuccess: () => {\n      if (queryKey) {\n        queryClient.invalidateQueries({ queryKey });\n      }\n    },\n  });\n}\n\n// Hook para actualizar datos\nexport function useApiUpdate<T, V>(url: string, queryKey?: string[]) {\n  return useMutation<ApiResponse<T>, Error, V>({\n    mutationFn: (variables: V) =>\n      fetchApi<T>(url, {\n        method: 'PUT',\n        body: JSON.stringify(variables),\n      }),\n    onSuccess: () => {\n      if (queryKey) {\n        queryClient.invalidateQueries({ queryKey });\n      }\n    },\n  });\n}\n\n// Hook para eliminar datos\nexport function useApiDelete<T>(url: string, queryKey?: string[]) {\n  return useMutation<ApiResponse<T>, Error, void>({\n    mutationFn: () =>\n      fetchApi<T>(url, {\n        method: 'DELETE',\n      }),\n    onSuccess: () => {\n      if (queryKey) {\n        queryClient.invalidateQueries({ queryKey });\n      }\n    },\n  });\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/hooks/useAuth.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'credentials' is defined but never used.","line":9,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const useAuth = () => {\n  useEffect(() => {\n    if (user) {\n      setUser(user);\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (credentials: LoginCredentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      setUser(response.user);\n      navigate('/dashboard');\n    } catch (err) {\n      setError('Credenciales inválidas');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    navigate('/login');\n  };\n\n  const isAuthenticated = () => {\n    return authService.isAuthenticated();\n  };\n\n  return {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    isAuthenticated,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/hooks/useDashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/lib/api.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":115,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL ?? 'http://localhost:3000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Interceptor para manejar errores\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error);\n    return Promise.reject(\n      new Error(error.message || 'Error en la respuesta de la API')\n    );\n  }\n);\n\nexport interface HttpService {\n  get<T>(url: string, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T>;\n\n  post<T>(url: string, data?: unknown, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T>;\n\n  put<T>(url: string, data?: unknown, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T>;\n\n  delete<T>(url: string, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T>;\n}\n\nclass HttpServiceImpl implements HttpService {\n  async get<T>(url: string, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T> {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: config?.headers\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  async post<T>(url: string, data?: unknown, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T> {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...config?.headers\n      },\n      body: data ? JSON.stringify(data) : undefined\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  async put<T>(url: string, data?: unknown, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T> {\n    const response = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        ...config?.headers\n      },\n      body: data ? JSON.stringify(data) : undefined\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  async delete<T>(url: string, config?: {\n    params?: Record<string, string>;\n    headers?: Record<string, string>;\n  }): Promise<T> {\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: config?.headers\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return response.json();\n  }\n}\n\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/lib/logger.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'level' is defined but never used.","line":78,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Niveles de registro disponibles\n */\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\n/**\n * Clase para manejar registros (logs) en la aplicación\n */\nexport class Logger {\n  private readonly moduleName: string;\n  private static logLevel: LogLevel = 'info';\n\n  /**\n   * Crea una nueva instancia de Logger\n   * @param moduleName Nombre del módulo que generará los logs\n   */\n  constructor(moduleName: string) {\n    this.moduleName = moduleName;\n  }\n\n  /**\n   * Establece el nivel de log global\n   * @param level Nivel de log a establecer\n   */\n  public static setLogLevel(level: LogLevel): void {\n    Logger.logLevel = level;\n  }\n\n  /**\n   * Registra un mensaje de nivel debug\n   * @param message Mensaje a registrar\n   * @param context Contexto adicional opcional\n   */\n  public debug(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('debug')) {\n      this.log('debug', message, context);\n    }\n  }\n\n  /**\n   * Registra un mensaje de nivel info\n   * @param message Mensaje a registrar\n   * @param context Contexto adicional opcional\n   */\n  public info(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('info')) {\n      this.log('info', message, context);\n    }\n  }\n\n  /**\n   * Registra un mensaje de nivel warn\n   * @param message Mensaje a registrar\n   * @param context Contexto adicional opcional\n   */\n  public warn(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('warn')) {\n      this.log('warn', message, context);\n    }\n  }\n\n  /**\n   * Registra un mensaje de nivel error\n   * @param message Mensaje a registrar\n   * @param context Contexto adicional opcional\n   */\n  public error(message: string, context?: Record<string, unknown>): void {\n    if (this.shouldLog('error')) {\n      this.log('error', message, context);\n    }\n  }\n\n  /**\n   * Verifica si un nivel de log debería ser registrado\n   * @param level Nivel a verificar\n   * @returns true si el nivel debe ser registrado\n   */\n  private shouldLog(level: LogLevel): boolean {\n    return targetLevelIndex >= currentLevelIndex;\n  }\n\n  /**\n   * Registra un mensaje con el nivel especificado\n   * @param level Nivel de log\n   * @param message Mensaje a registrar\n   * @param context Contexto adicional opcional\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    context?: Record<string, unknown>\n  ): void {\n    const logData = context\n      ? { message: formattedMessage, ...context }\n      : formattedMessage;\n\n    switch (level) {\n      case 'debug':\n        console.debug(logData);\n        break;\n      case 'info':\n        console.info(logData);\n        break;\n      case 'warn':\n        console.warn(logData);\n        break;\n      case 'error':\n        console.error(logData);\n        break;\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/lib/queryClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/main.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":3,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":3,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import './styles/globals.css'\nimport { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/AIHistoryPage.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  aiHistoryService,\nimport { \n  AIHistoryEntry,\n} from '../services/ai/aiHistoryService';\n\nexport const AIHistoryPage: React.FC = () => {\n\n\n\n\n\n  useEffect(() => {\n    const fetchHistory = async () => {\n      if (!user) return;\n\n      try {\n        setLoading(true);\n\n        setHistory(data);\n      } catch (err) {\n        setError('Error al cargar el historial');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchHistory();\n  }, [user]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-full\">\n        <Spinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"text-red-500 text-center p-4\">{error}</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Historial de Consultas IA</h1>\n\n      {history.length === 0 ? (\n        <Card className=\"p-4 text-center text-gray-500\">\n          No hay consultas en el historial\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {history.map((entry) => (\n            <Card key={entry.id} className=\"p-4\">\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"font-medium\">Consulta:</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {entry.query.query}\n                  </p>\n                </div>\n\n                <div>\n                  <h3 className=\"font-medium\">Respuesta:</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    {entry.response.response}\n                  </p>\n                  <div className=\"mt-2 text-xs text-gray-500\">\n                    Fuente: {entry.response.provider}\n                  </div>\n                </div>\n\n                <div className=\"text-xs text-gray-500\">\n                  {new Date(entry.timestamp).toLocaleString()}\n                </div>\n\n                {!entry.feedback && (\n                  <ResponseFeedback\n                    entryId={entry.id}\n                    onFeedbackSubmitted={() => {\n                      setHistory(\n                        history.map((h) =>\n                          h.id === entry.id\n                            ? { ...h, feedback: { helpful: true } }\n                            : h\n                        )\n                      );\n                    }}\n                  />\n                )}\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/AppointmentsPage.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  Appointment,\nimport { \n  AppointmentFilters,\n  AppointmentStatus,\n} from '../types/appointment';\n\nexport const AppointmentsPage: React.FC = () => {\n\n\n\n\n  const [selectedAppointment, setSelectedAppointment] = useState<\n    Appointment | undefined\n  >();\n  const [filters, setFilters] = useState<AppointmentFilters>({\n    status: 'scheduled',\n    page: 1,\n    limit: 10,\n  });\n\n  const fetchAppointments = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      setAppointments(response.appointments);\n    } catch (err) {\n      setError('Error al cargar las citas');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters]);\n\n  useEffect(() => {\n    fetchAppointments();\n  }, [fetchAppointments]);\n\n  const handleEdit = (appointment: Appointment) => {\n    setSelectedAppointment(appointment);\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = async (id: string) => {\n    if (!window.confirm('¿Está seguro de eliminar esta cita?')) return;\n\n    try {\n      await appointmentService.deleteAppointment(id);\n      fetchAppointments();\n    } catch (err) {\n      console.error('Error deleting appointment:', err);\n    }\n  };\n\n  const getStatusColor = (status: AppointmentStatus) => {\n    switch (status) {\n      case 'scheduled':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'confirmed':\n        return 'bg-blue-100 text-blue-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeLabel = (type: string) => {\n    switch (type) {\n      case 'consultation':\n        return 'Consulta';\n      case 'follow-up':\n        return 'Seguimiento';\n      case 'emergency':\n        return 'Emergencia';\n      case 'routine':\n        return 'Rutina';\n      default:\n        return type;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-full\">\n        <Spinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"text-red-500 text-center p-4\">{error}</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Citas Médicas</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Gestiona las citas médicas y su estado\n          </p>\n        </div>\n        <Button\n          onClick={() => {\n            setSelectedAppointment(undefined);\n            setIsModalOpen(true);\n          }}\n        >\n          Nueva Cita\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        {(\n          [\n            'scheduled',\n            'confirmed',\n            'completed',\n            'cancelled',\n          ] as AppointmentStatus[]\n        ).map((status) => {\n\n          return (\n            <Card key={status} className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n                    {status === 'scheduled' && 'Programadas'}\n                    {status === 'confirmed' && 'Confirmadas'}\n                    {status === 'completed' && 'Completadas'}\n                    {status === 'cancelled' && 'Canceladas'}\n                  </p>\n                  <p className=\"text-2xl font-bold\">{count}</p>\n                </div>\n                <Button\n                  variant={filters.status === status ? 'primary' : 'secondary'}\n                  size=\"sm\"\n                  onClick={() => setFilters({ ...filters, status })}\n                >\n                  Ver\n                </Button>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      <Card>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Fecha\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Hora\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Paciente\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Doctor\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Tipo\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Estado\n                </th>\n                <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                  Acciones\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n              {appointments.map((appointment) => (\n                <tr\n                  key={appointment.id}\n                  className=\"hover:bg-gray-50 dark:hover:bg-gray-700\"\n                >\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {new Date(appointment.date).toLocaleDateString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {appointment.time}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {appointment.patientId}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {appointment.doctorId}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                    {getTypeLabel(appointment.type)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span\n                      className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(appointment.status)}`}\n                    >\n                      {appointment.status === 'scheduled' && 'Programada'}\n                      {appointment.status === 'confirmed' && 'Confirmada'}\n                      {appointment.status === 'completed' && 'Completada'}\n                      {appointment.status === 'cancelled' && 'Cancelada'}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(appointment)}\n                      >\n                        Editar\n                      </Button>\n                      <Button\n                        variant=\"primary\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(appointment.id)}\n                      >\n                        Eliminar\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      <AppointmentFormModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(false);\n          setSelectedAppointment(undefined);\n        }}\n        appointment={selectedAppointment}\n        onSuccess={fetchAppointments}\n      />\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/DashboardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const DashboardPage: React.FC = () => {\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        setMetrics(data);\n      } catch (err) {\n        setError('Error al cargar las métricas');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMetrics();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-full\">\n        <Spinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"text-red-500 text-center p-4\">{error}</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <h1 className=\"text-2xl font-bold\">Dashboard</h1>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"p-4\">\n          <h3 className=\"text-sm text-gray-500\">Total Pacientes</h3>\n          <p className=\"text-2xl font-semibold\">\n            {metrics?.totalPatients ?? 0}\n          </p>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h3 className=\"text-sm text-gray-500\">Citas Hoy</h3>\n          <p className=\"text-2xl font-semibold\">\n            {metrics?.appointmentsToday ?? 0}\n          </p>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h3 className=\"text-sm text-gray-500\">Pendientes</h3>\n          <p className=\"text-2xl font-semibold\">{metrics?.pendingTasks ?? 0}</p>\n        </Card>\n\n        <Card className=\"p-4\">\n          <h3 className=\"text-sm text-gray-500\">Consultas IA</h3>\n          <p className=\"text-2xl font-semibold\">{metrics?.aiQueries ?? 0}</p>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"p-4\">\n          <h2 className=\"text-lg font-semibold mb-4\">Actividad Reciente</h2>\n          {/* Aquí irá el componente de actividad reciente */}\n        </Card>\n\n        <AIMedicalWidget />\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/EMRPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\ninterface PatientInfo {\n  id: string;\n  name: string;\n  age: number;\n  gender: 'male' | 'female' | 'other';\n  bloodType: string;\n  allergies: Array<{ id: string; name: string }>;\n  medications: Array<{ id: string; name: string }>;\n}\n\ninterface MedicalRecord {\n  id: string;\n  date: string;\n  diagnosis: string;\n  treatment: string;\n  doctor: string;\n  notes: string;\n}\n\ninterface LabResult {\n  id: string;\n  date: string;\n  test: string;\n  result: string;\n  reference: string;\n  status: 'normal' | 'abnormal';\n}\n\nexport const EMRPage: React.FC = () => {\n  const [activeTab, setActiveTab] = useState<\n    'info' | 'history' | 'labs' | 'ai'\n  >('info');\n  const [patientInfo] = useState<PatientInfo>({\n    id: 'P001',\n    name: 'Juan Pérez',\n    age: 45,\n    gender: 'male',\n    bloodType: 'O+',\n    allergies: [\n      { id: 'a1', name: 'Penicilina' },\n      { id: 'a2', name: 'Polen' },\n    ],\n    medications: [\n      { id: 'm1', name: 'Metformina' },\n      { id: 'm2', name: 'Lisinopril' },\n    ],\n  });\n\n  const [medicalHistory] = useState<MedicalRecord[]>([\n    {\n      id: 'h1',\n      date: '2024-03-15',\n      diagnosis: 'Diabetes Tipo 2',\n      treatment: 'Metformina 500mg',\n      doctor: 'Dr. García',\n      notes: 'Control mensual',\n    },\n    {\n      id: 'h2',\n      date: '2024-02-20',\n      diagnosis: 'Hipertensión',\n      treatment: 'Lisinopril 10mg',\n      doctor: 'Dr. García',\n      notes: 'Control quincenal',\n    },\n  ]);\n\n  const [labResults] = useState<LabResult[]>([\n    {\n      id: 'l1',\n      date: '2024-03-10',\n      test: 'Glucosa en Ayunas',\n      result: '95 mg/dL',\n      reference: '70-100 mg/dL',\n      status: 'normal',\n    },\n    {\n      id: 'l2',\n      date: '2024-03-10',\n      test: 'Hemoglobina A1c',\n      result: '6.2%',\n      reference: '4.0-5.6%',\n      status: 'abnormal',\n    },\n  ]);\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Historial Médico Electrónico</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Información completa del paciente\n          </p>\n        </div>\n        <Button>Exportar EMR</Button>\n      </div>\n\n      <div className=\"flex space-x-4 border-b border-gray-200 dark:border-gray-700\">\n        <Button\n          variant={activeTab === 'info' ? 'primary' : 'secondary'}\n          onClick={() => setActiveTab('info')}\n        >\n          Información Personal\n        </Button>\n        <Button\n          variant={activeTab === 'history' ? 'primary' : 'secondary'}\n          onClick={() => setActiveTab('history')}\n        >\n          Historial Médico\n        </Button>\n        <Button\n          variant={activeTab === 'labs' ? 'primary' : 'secondary'}\n          onClick={() => setActiveTab('labs')}\n        >\n          Resultados de Laboratorio\n        </Button>\n        <Button\n          variant={activeTab === 'ai' ? 'primary' : 'secondary'}\n          onClick={() => setActiveTab('ai')}\n        >\n          Asistente Virtual\n        </Button>\n      </div>\n\n      {activeTab === 'info' && (\n        <Card>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h2 className=\"text-lg font-semibold mb-4\">Datos Básicos</h2>\n              <div className=\"space-y-4\">\n                <Input\n                  label=\"ID del Paciente\"\n                  value={patientInfo.id}\n                  disabled\n                />\n                <Input label=\"Nombre\" value={patientInfo.name} disabled />\n                <Input\n                  label=\"Edad\"\n                  type=\"number\"\n                  value={patientInfo.age.toString()}\n                  disabled\n                />\n                <Select\n                  label=\"Género\"\n                  value={patientInfo.gender}\n                  options={[\n                    { value: 'male', label: 'Masculino' },\n                    { value: 'female', label: 'Femenino' },\n                    { value: 'other', label: 'Otro' },\n                  ]}\n                  disabled\n                />\n              </div>\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold mb-4\">Información Médica</h2>\n              <div className=\"space-y-4\">\n                <Input\n                  label=\"Tipo de Sangre\"\n                  value={patientInfo.bloodType}\n                  disabled\n                />\n                <div>\n                  <div\n                    id=\"allergies-label\"\n                    className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n                  >\n                    Alergias\n                  </div>\n                  <ul\n                    aria-labelledby=\"allergies-label\"\n                    className=\"mt-1 flex flex-wrap gap-2 list-none\"\n                  >\n                    {patientInfo.allergies.map((allergy) => (\n                      <li\n                        key={allergy.id}\n                        className=\"px-2 py-1 bg-red-100 text-red-800 rounded-full text-sm\"\n                      >\n                        {allergy.name}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n                <div>\n                  <div\n                    id=\"medications-label\"\n                    className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\"\n                  >\n                    Medicamentos Actuales\n                  </div>\n                  <ul\n                    aria-labelledby=\"medications-label\"\n                    className=\"mt-1 flex flex-wrap gap-2 list-none\"\n                  >\n                    {patientInfo.medications.map((medication) => (\n                      <li\n                        key={medication.id}\n                        className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm\"\n                      >\n                        {medication.name}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {activeTab === 'history' && (\n        <Card>\n          <div className=\"space-y-4\">\n            {medicalHistory.map((record) => (\n              <div\n                key={record.id}\n                className=\"border-b border-gray-200 dark:border-gray-700 pb-4 last:border-0\"\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold\">\n                      {record.diagnosis}\n                    </h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      {new Date(record.date).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <span className=\"text-sm text-gray-500\">{record.doctor}</span>\n                </div>\n                <div className=\"mt-2\">\n                  <p className=\"text-sm\">\n                    <span className=\"font-medium\">Tratamiento:</span>{' '}\n                    {record.treatment}\n                  </p>\n                  <p className=\"text-sm mt-1\">\n                    <span className=\"font-medium\">Notas:</span> {record.notes}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n      )}\n\n      {activeTab === 'labs' && (\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead>\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Fecha\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Prueba\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Resultado\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Referencia\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    Estado\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700\">\n                {labResults.map((result) => (\n                  <tr key={result.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      {new Date(result.date).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      {result.test}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      {result.result}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                      {result.reference}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                          result.status === 'normal'\n                            ? 'bg-green-100 text-green-800'\n                            : 'bg-red-100 text-red-800'\n                        }`}\n                      >\n                        {result.status === 'normal' ? 'Normal' : 'Anormal'}\n                      </span>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n      )}\n\n      {activeTab === 'ai' && patientId && <AIAssistant patientId={patientId} />}\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const LoginPage: React.FC = () => {\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      await login({ email, password });\n    } catch {\n      // El error ya está manejado en el hook useAuth\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white\">\n            Iniciar sesión\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600 dark:text-gray-400\">\n            Ingresa tus credenciales para acceder\n          </p>\n        </div>\n        <form className=\"mt-8 space-y-6\" onSubmit={handleSubmit}>\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <Input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Correo electrónico\"\n                required\n              />\n            </div>\n            <div>\n              <Input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Contraseña\"\n                required\n              />\n            </div>\n          </div>\n\n          {error && (\n            <div className=\"text-red-500 text-sm text-center\">{error}</div>\n          )}\n\n          <div>\n            <Button type=\"submit\" disabled={loading} className=\"w-full\">\n              {loading ? 'Iniciando sesión...' : 'Iniciar sesión'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/NotFoundPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const NotFoundPage: React.FC = () => {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n      <div className=\"text-center\">\n        <h1 className=\"text-6xl font-bold text-gray-900 dark:text-white mb-4\">\n          404\n        </h1>\n        <h2 className=\"text-2xl font-semibold text-gray-700 dark:text-gray-300 mb-4\">\n          Página no encontrada\n        </h2>\n        <p className=\"text-gray-500 dark:text-gray-400 mb-8\">\n          Lo sentimos, la página que estás buscando no existe.\n        </p>\n        <Button onClick={() => navigate('/')}>Volver al inicio</Button>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/PatientsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/TestAIPage.tsx","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":5,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from \"react\"\n  UnstructuredNote,\nimport { \n  AIResponse,\n  aiService,\n} from '../services/ai/aiService';\n\ninterface NoteWithId extends UnstructuredNote {\n  id: string;\n}\n\nexport const TestAIPage: React.FC = () => {\n\n\n\n\n\n  const handleNoteSubmit = async (note: UnstructuredNote) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Agregar la nueva nota al estado con un ID único\n      const noteWithId: NoteWithId = {\n        ...note,\n        id: `${Date.now()}-${Math.random().toString(36).substring(2, 11)}`,\n      };\n\n      setNotes(updatedNotes);\n\n      // Analizar todas las notas (enviando solo la parte UnstructuredNote)\n\n      const results = await aiService.analyzeUnstructuredNotes(\n        'test-patient',\n        notesForAnalysis\n      );\n      setAnalysis(results);\n    } catch (err) {\n      setError('Error al procesar la nota médica');\n      console.error('Error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-2xl font-bold mb-8\">\n        Prueba del Asistente Virtual Médico\n      </h1>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Panel de Entrada */}\n        <div className=\"bg-white shadow rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Ingresar Nota Médica</h2>\n          <NoteInput onSubmit={handleNoteSubmit} />\n        </div>\n\n        {/* Panel de Resultados */}\n        <div className=\"space-y-6\">\n          {loading && (\n            <div className=\"flex justify-center\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\n            </div>\n          )}\n\n          {error && (\n            <div className=\"bg-red-50 text-red-700 p-4 rounded-lg\">{error}</div>\n          )}\n\n          {analysis && <AnalysisResults results={analysis} />}\n\n          {/* Historial de Notas */}\n          {notes.length > 0 && (\n            <div className=\"bg-white shadow rounded-lg p-6\">\n              <h2 className=\"text-xl font-semibold mb-4\">Historial de Notas</h2>\n              <div className=\"space-y-4\">\n                {notes.map((note) => (\n                  <div\n                    key={note.id}\n                    className=\"border-l-4 border-blue-500 pl-4\"\n                  >\n                    <div className=\"text-sm text-gray-500\">\n                      {new Date(note.timestamp).toLocaleString()}\n                    </div>\n                    <div className=\"font-medium\">{note.type}</div>\n                    <div className=\"text-sm\">{note.content}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/dashboard/DashboardPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const DashboardPage = () => {\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-red-600\">{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Dashboard</h2>\n        <Link to=\"/patients/new\">\n          <Button>Nuevo Paciente</Button>\n        </Link>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3\">\n        <MetricCard\n          title=\"Total de Pacientes\"\n          value={metrics?.totalPatients ?? 0}\n          icon={\n            <svg\n              className=\"h-6 w-6 text-gray-400\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"\n              />\n            </svg>\n          }\n          description=\"Pacientes registrados en el sistema\"\n        />\n        <MetricCard\n          title=\"Pacientes Activos\"\n          value={metrics?.activePatients ?? 0}\n          icon={\n            <svg\n              className=\"h-6 w-6 text-gray-400\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n              />\n            </svg>\n          }\n          description=\"Pacientes con tratamientos en curso\"\n        />\n        <MetricCard\n          title=\"Citas Pendientes\"\n          value={metrics?.pendingAppointments ?? 0}\n          icon={\n            <svg\n              className=\"h-6 w-6 text-gray-400\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth={2}\n                d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\n              />\n            </svg>\n          }\n          description=\"Próximas citas programadas\"\n        />\n      </div>\n\n      <div className=\"mt-8\">\n        <RecentActivities activities={metrics?.recentActivities ?? []} />\n      </div>\n    </div>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/pages/setup.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has an unnecessary dependency: 'toast'. Either exclude it or remove the dependency array. Outer scope values like 'toast' aren't valid dependencies because mutating them doesn't re-render the component.","line":36,"column":6,"nodeType":"ArrayExpression","endLine":36,"endColumn":13,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[953,960],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\n /**\nimport React from 'react'\n * Página de configuración inicial de la aplicación\n */\nconst SetupPage: React.FC = () => {\n  const [savedConfig, setSavedConfig] = useState<{\n    adapterName: string;\n    config: EMRAdapterConfig;\n  } | null>(null);\n\n  // Cargar configuración guardada al iniciar\n  useEffect(() => {\n    // En una aplicación real, cargaríamos desde localStorage o una API\n\n    if (savedAdapterName && savedAdapterConfig) {\n      try {\n        setSavedConfig({\n          adapterName: savedAdapterName,\n          config,\n        });\n\n        toast({\n          title: 'Configuración cargada',\n          description: `Configuración de ${savedAdapterName} cargada desde almacenamiento local.`,\n          status: 'info',\n          duration: 3000,\n          isClosable: true,\n        });\n      } catch (error) {\n        console.error('Error al cargar configuración:', error);\n      }\n    }\n  }, [toast]);\n\n  // Manejar la finalización de la configuración\n  const handleSetupComplete = (\n    adapterName: string,\n    config: EMRAdapterConfig\n  ) => {\n    // Guardar configuración\n    localStorage.setItem('emrAdapterName', adapterName);\n    localStorage.setItem('emrAdapterConfig', JSON.stringify(config));\n\n    // Actualizar estado\n    setSavedConfig({\n      adapterName,\n      config,\n    });\n  };\n\n  return (\n    <Container maxW=\"container.md\" py={10}>\n      <VStack spacing={8} align=\"stretch\">\n        <VStack align=\"start\" spacing={2}>\n          <Heading as=\"h1\">Configuración de MapleHealth AI</Heading>\n          <Text color=\"gray.600\">\n            Configura tu conexión con el sistema de Registro Médico Electrónico\n            (EMR) para empezar a utilizar MapleHealth AI.\n          </Text>\n        </VStack>\n\n        <EMRSetupForm\n          onSetupComplete={handleSetupComplete}\n          initialAdapterName={savedConfig?.adapterName}\n          initialConfig={savedConfig?.config}\n        />\n\n        {savedConfig && (\n          <Text color=\"green.600\" fontWeight=\"medium\">\n            Estás utilizando el adaptador {savedConfig.adapterName} con\n            configuración personalizada.\n          </Text>\n        )}\n      </VStack>\n    </Container>\n  );\n};\n\nexport default SetupPage;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/routes/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":2,"column":4,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":2,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":23}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { \n   useState, useEffect \n } from 'react'\nimport React from 'react'\nexport const AppRoutes: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        {/* Rutas públicas */}\n        <Route path=\"/login\" element={<LoginPage />} />\n\n        {/* Rutas protegidas */}\n        <Route\n          path=\"/\"\n          element={\n            <ProtectedRoute>\n              <Layout />\n            </ProtectedRoute>\n          }\n        >\n          <Route index element={<Navigate to=\"/dashboard\" replace />} />\n          <Route path=\"dashboard\" element={<DashboardPage />} />\n          <Route path=\"patients\" element={<PatientsPage />} />\n          <Route path=\"appointments\" element={<AppointmentsPage />} />\n          <Route path=\"ai-history\" element={<AIHistoryPage />} />\n          <Route path=\"emr/:patientId\" element={<EMRPage />} />\n          <Route path=\"test-ai\" element={<TestAIPage />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n    </BrowserRouter>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/ClinicalCopilotService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  ConsultationContext,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  ConsultationStage,\nimport { \n  EnhancedAIQuery,\n  EnhancedAIResponse,\n  EvidenceLevel,\n  SuggestedQuestion,\n  TreatmentSuggestion,\n} from './types';\n\n/**\n * Respuesta de sugerencias de consulta\n */\nexport interface ConsultationSuggestion {\n  questions: SuggestedQuestion[];\n  treatments: TreatmentSuggestion[];\n  nextSteps: string[];\n  educationalContent?: {\n    forPatient?: string;\n    forProvider?: string;\n    resources?: Array<{ title: string; url: string }>;\n  };\n  followUpRecommendation?: string;\n}\n\n/**\n * ClinicalCopilotService\n *\n * Servicio especializado que actúa como copiloto clínico para profesionales de la salud,\n * proporcionando asistencia contextual durante las consultas médicas.\n */\nexport class ClinicalCopilotService {\n  private static instance: ClinicalCopilotService;\n  private readonly aiService: AIService;\n  private readonly logger: Logger;\n  private readonly activeConsultations: Map<string, ConsultationContext>;\n\n  private constructor() {\n    this.aiService = AIService.getInstance();\n    this.logger = new Logger('ClinicalCopilotService');\n    this.activeConsultations = new Map();\n  }\n\n  /**\n   * Obtiene la instancia singleton del servicio\n   */\n  public static getInstance(): ClinicalCopilotService {\n    if (!ClinicalCopilotService.instance) {\n      ClinicalCopilotService.instance = new ClinicalCopilotService();\n    }\n    return ClinicalCopilotService.instance;\n  }\n\n  /**\n   * Inicia una nueva consulta\n   */\n  public startConsultation(\n    patientId: string,\n    providerId: string,\n    specialtyArea: string,\n    reasonForVisit: string,\n    isFirstVisit: boolean\n  ): string {\n\n\n    const context: ConsultationContext = {\n      patientId,\n      providerId,\n      specialtyArea,\n      reasonForVisit,\n      isFirstVisit,\n      stage: 'anamnesis',\n      timeElapsed: 0,\n    };\n\n    this.activeConsultations.set(consultationId, context);\n    this.logger.info('Consulta iniciada', { consultationId, patientId });\n\n    return consultationId;\n  }\n\n  /**\n   * Obtiene sugerencias basadas en el input del médico y el contexto actual\n   */\n  public async getSuggestions(\n    consultationId: string,\n    currentInput: string,\n    evidenceLevel: EvidenceLevel = 'alto'\n  ): Promise<ConsultationSuggestion> {\n\n\n    if (!context) {\n      throw new Error(`Consulta no encontrada: ${consultationId}`);\n    }\n\n    try {\n      // Construir query para el servicio AI\n      const query: EnhancedAIQuery = {\n        query: currentInput,\n        patientId: context.patientId,\n        consultationContext: {\n          patientId: context.patientId,\n          providerId: context.providerId,\n          specialtyArea: context.specialtyArea,\n          reasonForVisit: context.reasonForVisit,\n          isFirstVisit: context.isFirstVisit,\n          stage: context.stage,\n          timeElapsed: context.timeElapsed,\n        },\n        requiresQuestionSuggestions: true,\n        requiresTreatmentSuggestions: context.stage === 'plan-tratamiento',\n        requiresEducationalContent:\n          context.stage === 'educacion-paciente' ||\n          context.stage === 'plan-tratamiento',\n        evidenceLevelThreshold: evidenceLevel,\n      };\n\n      // Obtener cache primero\n\n\n\n      if (cachedResponse) {\n        this.logger.debug('Respuesta encontrada en caché', { consultationId });\n        return this.formatResponse(cachedResponse as EnhancedAIResponse);\n      }\n\n      // Obtener respuesta de IA\n      const response = (await this.aiService.query(\n        query\n      )) as EnhancedAIResponse;\n\n      // Guardar en caché\n      await cacheService.set(cacheKey, response, {\n        provider: 'clinical-copilot',\n        cost: this.aiService.estimateCost('gpt-4-medical', 1),\n        processingTime: 0,\n      });\n\n      return this.formatResponse(response);\n    } catch (error) {\n      this.logger.error('Error obteniendo sugerencias', {\n        error,\n        consultationId,\n      });\n      throw new AIServiceError(\n        'Error al generar sugerencias para la consulta',\n        error as Error\n      );\n    }\n  }\n\n  /**\n   * Actualiza la etapa actual de la consulta\n   */\n  public updateConsultationStage(\n    consultationId: string,\n    newStage: ConsultationStage\n  ): boolean {\n\n\n    if (!context) {\n      throw new Error(`Consulta no encontrada: ${consultationId}`);\n    }\n\n    context.stage = newStage;\n    this.activeConsultations.set(consultationId, context);\n\n    this.logger.info('Etapa de consulta actualizada', {\n      consultationId,\n      previousStage: context.stage,\n      newStage,\n    });\n\n    return true;\n  }\n\n  /**\n   * Finaliza la consulta actual\n   */\n  public endConsultation(consultationId: string, summary?: string): boolean {\n\n\n    if (!context) {\n      return false;\n    }\n\n    this.activeConsultations.delete(consultationId);\n\n    this.logger.info('Consulta finalizada', {\n      consultationId,\n      patientId: context.patientId,\n      duration: context.timeElapsed,\n      summary: summary ?? 'No summary provided',\n    });\n\n    return true;\n  }\n\n  /**\n   * Formatea la respuesta de la IA en formato de sugerencias\n   */\n  private formatResponse(response: EnhancedAIResponse): ConsultationSuggestion {\n    return {\n      questions: response.suggestedQuestions || [],\n      treatments: response.treatmentSuggestions || [],\n      nextSteps: response.nextSteps || [],\n      educationalContent: response.educationalContent,\n      followUpRecommendation: response.insights?.find(\n        (i) => i.type === 'missing-follow-up'\n      )?.recommendation,\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/__tests__/aiService.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   render, screen \n } from '@testing-library/react'\n // Mock del cacheService\nimport { \n   HttpService \n } from '../../../lib/api'\nimport { \nvi.mock('../cacheService', () => ({\n  cacheService: {\n    get: vi.fn(),\n    set: vi.fn(),\n    clear: vi.fn(),\n    getStats: vi.fn(),\n  },\n}));\n\n// Mock de la API\nvi.mock('../../../lib/api', () => ({\n  api: {\n    get: vi.fn(),\n  },\n}));\n\ndescribe('AIService', () => {\n  let aiService: AIService;\n\n  beforeEach(() => {\n    aiService = AIService.getInstance();\n    aiService.clearLogs();\n    vi.clearAllMocks();\n  });\n\n  it('should be a singleton', () => {\n    expect(instance1).toBe(instance2);\n  });\n\n  it('should have providers configured', () => {\n    expect(providers).toBeDefined();\n    expect(providers.length).toBeGreaterThan(0);\n  });\n\n  it('should estimate cost correctly', () => {\n    expect(cost).toBe(0.06); // 0.03 * 2\n  });\n\n  it('should log operations', async () => {\n    // Configurar mocks\n    vi.mocked(cacheService.get).mockResolvedValue(null);\n    vi.mocked(cacheService.set).mockResolvedValue(undefined);\n\n    // Realizar operación que genere logs\n    await aiService.query({\n      query: 'test query',\n    });\n\n    // Verificar logs\n\n    expect(logs.length).toBeGreaterThan(0);\n\n    // Verificar logs de info\n\n    expect(infoLogs.length).toBeGreaterThan(0);\n    expect(infoLogs[0].level).toBe('info');\n  });\n\n  it('should detect contradictions in medical data', async () => {\n    // Datos de prueba\n    const emrData: EMRData = {\n      patientId: 'test123',\n      medicalHistory: [\n        {\n          date: '2023-01-01',\n          type: 'note',\n          description: 'Initial consultation',\n        },\n      ],\n      medications: [\n        { name: 'Medication A', dosage: '10mg', frequency: 'daily' },\n      ],\n      vitalSigns: [],\n    };\n\n    const notes: UnstructuredNote[] = [\n      {\n        content: 'Patient reports taking Medication B',\n        timestamp: '2023-01-02',\n        author: 'Dr. Smith',\n        type: 'consultation',\n        medications: ['Medication B'],\n      },\n    ];\n\n    // Configurar mocks\n    vi.mocked(cacheService.get).mockResolvedValue(null);\n    vi.mocked(cacheService.set).mockResolvedValue(undefined);\n    vi.spyOn(\n      aiService as unknown as AIServiceInternals,\n      'getEMRData'\n    ).mockResolvedValue(emrData);\n    vi.spyOn(\n      aiService as unknown as AIServiceInternals,\n      'generateSimulatedResponse'\n    ).mockResolvedValue({\n      answer: 'Test response',\n      confidence: 0.9,\n    });\n\n    // Ejecutar\n\n    // Verificar\n    expect(result).toBeDefined();\n    expect(result.insights).toBeDefined();\n    // Debería haber detectado la contradicción del medicamento\n    expect(\n      result.insights?.some((insight) => insight.type === 'contradiction')\n    ).toBe(true);\n  });\n\n  it('should retry operations on failure', async () => {\n    // Mock de una operación que falla y luego tiene éxito\n    const mockOperation = vi\n      .fn()\n      .mockRejectedValueOnce(new Error('Network error'))\n      .mockResolvedValueOnce({ data: { test: 'success' } });\n\n    // Ejecutar método con reintentos\n    const result = await (\n      aiService as unknown as AIServiceInternals\n    ).executeWithRetry(mockOperation);\n\n    // Verificar\n    expect(mockOperation).toHaveBeenCalledTimes(2);\n    expect(result).toEqual({ data: { test: 'success' } });\n  });\n\n  it('should throw AIServiceError on unrecoverable errors', async () => {\n    // Mockear el método generateSimulatedResponse para que lance un error\n    vi.spyOn(\n      aiService as unknown as AIServiceInternals,\n      'generateSimulatedResponse'\n    ).mockRejectedValue(new Error('Simulated API error'));\n\n    // Verificar que se lanza AIServiceError\n    await expect(\n      aiService.analyzeEMRData({\n        patientId: 'test123',\n        medicalHistory: [],\n        medications: [],\n        vitalSigns: [],\n      })\n    ).rejects.toBeInstanceOf(AIServiceError);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/__tests__/cacheService.test.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   render, screen \n } from '@testing-library/react'\nimport { \ndescribe('CacheService', () => {\n  import {\n   HttpService \n} from '../../../lib/api';\n  let cacheService: CacheService;\n\n  beforeEach(() => {\n    cacheService = CacheService.getInstance({\n      maxSize: 100,\n      ttl: 3600,\n      cleanupInterval: 600,\n    });\n  });\n\n  it('should store and retrieve data', async () => {\n    const testData: AIResponse = {\n      answer: 'Test answer',\n      confidence: 0.9,\n      timeline: [],\n      insights: [],\n      recommendations: [],\n    };\n\n    await cacheService.set('test-key', testData);\n\n    expect(result).toEqual(testData);\n  });\n\n  it('should return null for non-existent keys', async () => {\n    expect(result).toBeNull();\n  });\n\n  it('should clear the cache', async () => {\n    const testData: AIResponse = {\n      answer: 'Test answer',\n      confidence: 0.9,\n      timeline: [],\n      insights: [],\n      recommendations: [],\n    };\n\n    await cacheService.set('test-key', testData);\n    await cacheService.clear();\n\n    expect(result).toBeNull();\n  });\n\n  it('should track statistics', async () => {\n    const testData: AIResponse = {\n      answer: 'Test answer',\n      confidence: 0.9,\n      timeline: [],\n      insights: [],\n      recommendations: [],\n    };\n\n    await cacheService.set('test-key', testData);\n    await cacheService.get('test-key'); // Hit\n    await cacheService.get('non-existent'); // Miss\n\n    expect(stats.totalQueries).toBe(3);\n\n    // Verificamos que las tasas sean valores válidos\n    expect(stats.hitRate).toBeGreaterThanOrEqual(0);\n    expect(stats.hitRate).toBeLessThanOrEqual(1);\n    expect(stats.missRate).toBeGreaterThanOrEqual(0);\n    expect(stats.missRate).toBeLessThanOrEqual(1);\n\n    // La suma de las tasas debería ser 1\n    expect(stats.hitRate + stats.missRate).toBeCloseTo(1);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/aiHistoryService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  id: string\nimport { \nexport interface AIHistoryEntry {\n  query: AIQuery;\n  response: AIResponse;\n  timestamp: string;\n  userId: string;\n  feedback?: {\n    helpful: boolean;\n    comment?: string;\n  };\n}\n\nclass AIHistoryService {\n  async getHistory(userId: string): Promise<AIHistoryEntry[]> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching AI history:', error);\n      return [];\n    }\n  }\n\n  async addEntry(entry: Omit<AIHistoryEntry, 'id'>): Promise<AIHistoryEntry> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error adding AI history entry:', error);\n      throw error;\n    }\n  }\n\n  async addFeedback(\n    entryId: string,\n    feedback: AIHistoryEntry['feedback']\n  ): Promise<void> {\n    try {\n      await api.post(`/ai/history/${entryId}/feedback`, feedback);\n    } catch (error) {\n      console.error('Error adding feedback:', error);\n      throw error;\n    }\n  }\n}\n\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/aiService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  AIProvider,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  EMRData,\nimport { \n  UnstructuredNote,\n  AIQuery,\n  AIResponse,\n  Insight,\n  Recommendation,\n  RecommendationType,\n  TimelineEvent,\n  InsightType,\n} from './types';\n\n/**\n * Interfaz para el servicio de caché\n */\nexport interface ICacheService {\n  get: (query: string) => Promise<AIResponse | null>;\n  set: (\n    query: string,\n    response: AIResponse,\n    metadata?: { provider: string; cost: number; processingTime: number }\n  ) => Promise<void>;\n}\n\n/**\n * Configuración del servicio de IA\n */\nexport interface AIServiceConfig {\n  apiKey?: string;\n  baseUrl?: string;\n  timeout?: number;\n  defaultProvider?: string;\n  googleProjectId?: string;\n  [key: string]: unknown;\n}\n\n// Definir alias de tipos para uniones\ntype LogLevel = 'info' | 'warn' | 'error' | 'debug';\ntype ContextType = 'emr' | 'appointment' | 'general';\ntype CapabilityType =\n  | 'emr-analysis'\n  | 'timeline-organization'\n  | 'insight-detection'\n  | 'clinical-evidence'\n  | 'treatment-patterns';\n\n// Logger para un seguimiento detallado de las operaciones\ninterface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  service: string;\n  message: string;\n  data?: Record<string, unknown>;\n}\n\nexport type { UnstructuredNote, AIResponse };\nexport class AIService {\n  private static instance: AIService;\n  private readonly providers: AIProvider[] = [\n    {\n      id: 'gpt-4-medical',\n      name: 'GPT-4 Medical',\n      costPerQuery: 0.03,\n      capabilities: [\n        'emr-analysis',\n        'timeline-organization',\n        'insight-detection',\n      ] as CapabilityType[],\n    },\n    {\n      id: 'med-palm-2',\n      name: 'Med-PaLM 2',\n      costPerQuery: 0.05,\n      capabilities: [\n        'emr-analysis',\n        'clinical-evidence',\n        'treatment-patterns',\n      ] as CapabilityType[],\n    },\n  ];\n\n  private readonly logger = new Logger('AIService');\n  private readonly MAX_RETRIES = 3;\n  private readonly RETRY_DELAY = 1000;\n  private readonly cacheService: ICacheService;\n  private readonly config: AIServiceConfig;\n  private readonly aiProviders: AIProviderClient[] = [];\n  private simulationMode = false;\n\n  private constructor() {\n    this.logger.info('AIService initialized');\n    this.cacheService = cacheService;\n    this.config = {\n      defaultProvider: 'gpt-4-medical',\n      timeout: 30000,\n    };\n\n    this.setupProviders();\n  }\n\n  private setupProviders(): void {\n    // Verificar si tenemos claves de API configuradas\n\n\n\n    // Limpiar proveedores anteriores\n    this.aiProviders.length = 0;\n\n    // Si no hay claves, usar modo simulación\n    if (!openaiApiKey && !googleProjectId) {\n      this.logger.warn('No API keys configured, using simulation mode');\n      this.simulationMode = true;\n      return;\n    }\n\n    // Configurar el proveedor de OpenAI si hay clave\n    if (openaiApiKey) {\n      try {\n        const openaiProvider = new OpenAIProvider({\n          apiKey: openaiApiKey,\n          baseUrl: this.config.baseUrl as string,\n          modelName: 'gpt-4-turbo',\n        });\n        this.aiProviders.push(openaiProvider);\n        this.logger.info('OpenAI provider configured');\n      } catch (error) {\n        this.logger.error('Failed to configure OpenAI provider', { error });\n      }\n    }\n\n    // Configurar el proveedor de Google MedPaLM si hay clave\n    if (googleProjectId) {\n      try {\n        const medpalmProvider = new MedPaLMProvider({\n          apiKey: this.config.apiKey as string,\n          projectId: googleProjectId,\n        });\n        this.aiProviders.push(medpalmProvider);\n        this.logger.info('Google MedPaLM provider configured');\n      } catch (error) {\n        this.logger.error('Failed to configure Google MedPaLM provider', {\n          error,\n        });\n      }\n    }\n  }\n\n  static getInstance(): AIService {\n    if (!AIService.instance) {\n      AIService.instance = new AIService();\n    }\n    return AIService.instance;\n  }\n\n  async analyzeUnstructuredNotes(\n    patientId: string,\n    notes: UnstructuredNote[]\n  ): Promise<AIResponse> {\n    this.logger.info('Analyzing unstructured notes', {\n      patientId,\n      noteCount: notes.length,\n    });\n\n    try {\n      // Obtener datos del EMR existente\n\n      this.logger.debug('Retrieved EMR data', { patientId });\n\n      // Preparar contexto para la IA\n      const context = {\n        type: 'emr' as ContextType,\n        data: emrData,\n      };\n\n      // Realizar consulta a la IA\n\n      const aiResponse = await this.query({\n        query:\n          'Analiza y organiza las siguientes notas médicas, identifica puntos ciegos y genera recomendaciones',\n        patientId,\n        context,\n        unstructuredNotes: notes,\n      });\n\n      this.logger.debug('AI query processed', { processingTime });\n\n      // Analizar la respuesta para generar insights y recomendaciones\n\n\n\n      // Detectar contradicciones\n\n      if (contradictions.length > 0) {\n        this.logger.warn('Contradictions detected', {\n          count: contradictions.length,\n        });\n        insights.push(...contradictions);\n      }\n\n      const response = {\n        ...aiResponse,\n        insights,\n        recommendations,\n      };\n\n      // Cachear la respuesta con metadata\n      const metadata = {\n        provider: this.config.defaultProvider ?? 'gpt-4-medical',\n        cost: this.estimateCost(\n          this.config.defaultProvider ?? 'gpt-4-medical',\n          1\n        ),\n        processingTime,\n      };\n      await this.cacheService.set(\n        JSON.stringify({ patientId, notes }),\n        response,\n        metadata\n      );\n      this.logger.info('Response cached successfully', { patientId });\n\n      return response;\n    } catch (error) {\n      this.logger.error('Error analyzing unstructured notes', {\n        error,\n        patientId,\n      });\n      throw new AIServiceError(\n        'Error al analizar las notas médicas',\n        error as Error\n      );\n    }\n  }\n\n  private async getEMRData(patientId: string): Promise<EMRData> {\n    try {\n      this.logger.debug('Fetching EMR data', { patientId });\n      const emrResponse = await this.executeWithRetry(() =>\n        api.get<EMRData>(`/emr/${patientId}`)\n      );\n      return emrResponse.data;\n    } catch (error) {\n      this.logger.error('Error fetching EMR data', { error, patientId });\n      throw new AIServiceError(\n        'Error al obtener datos del historial médico',\n        error as Error\n      );\n    }\n  }\n\n  /**\n   * Ejecuta una operación con reintentos automáticos en caso de fallo\n   */\n  private async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    retries = this.MAX_RETRIES\n  ): Promise<T> {\n    try {\n      return await operation();\n    } catch (error) {\n      if (retries > 0) {\n        this.logger.warn(\n          `Operation failed, retrying... (${this.MAX_RETRIES - retries + 1}/${this.MAX_RETRIES})`,\n          { error }\n        );\n        await new Promise((resolve) => setTimeout(resolve, this.RETRY_DELAY));\n        return this.executeWithRetry(operation, retries - 1);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Detecta contradicciones entre diferentes fuentes de información médica\n   */\n  private detectContradictions(\n    emrData: EMRData,\n    notes: UnstructuredNote[]\n  ): Insight[] {\n    this.logger.debug('Detecting contradictions', {\n      emrDataAvailable: !!emrData,\n      notesCount: notes.length,\n    });\n\n\n    // Contradicciones en medicamentos\n    const emrMedications = new Set(\n      emrData.medications.map((med) => med.name.toLowerCase())\n    );\n\n    // Medicamentos mencionados en las notas\n\n    notes.forEach((note) => {\n      note.medications?.forEach((med) =>\n        noteMedications.add(med.toLowerCase())\n      );\n    });\n\n    // Contradicciones en medicamentos\n    if (noteMedications.size > 0) {\n      const noteMedsNotInEMR = Array.from(noteMedications).filter(\n        (med) => !emrMedications.has(med)\n      );\n\n      if (noteMedsNotInEMR.length > 0) {\n        contradictions.push({\n          type: 'contradiction' as InsightType,\n          description:\n            'Medicamentos mencionados en notas que no aparecen en el historial médico',\n          severity: 'medium',\n          evidence: noteMedsNotInEMR.map((med) => `Medicamento: ${med}`),\n        });\n        this.logger.debug('Medication contradiction detected', {\n          medications: noteMedsNotInEMR,\n        });\n      }\n    }\n\n    // Contradicciones en diagnósticos\n\n\n\n    notes.forEach((note) => {\n      if (note.diagnosis) {\n\n        if (diagnosisSet.has(diagnosis)) {\n          contradictoryDiagnosis.add(diagnosis);\n        } else {\n          diagnosisSet.add(diagnosis);\n        }\n      }\n    });\n\n    if (contradictoryDiagnosis.size > 0) {\n      contradictions.push({\n        type: 'contradiction' as InsightType,\n        description:\n          'Posibles diagnósticos contradictorios encontrados en diferentes notas',\n        severity: 'high',\n        evidence: Array.from(contradictoryDiagnosis).map(\n          (d) => `Diagnóstico: ${d}`\n        ),\n      });\n      this.logger.debug('Diagnosis contradiction detected', {\n        diagnoses: Array.from(contradictoryDiagnosis),\n      });\n    }\n\n    return contradictions;\n  }\n\n  private generateInsights(response: AIResponse, emrData: EMRData): Insight[] {\n    this.logger.debug('Generating insights');\n\n\n    // Analizar gaps en la línea de tiempo\n    if (response.timeline) {\n\n      if (timelineGaps.length > 0) {\n        insights.push(...timelineGaps);\n        this.logger.debug('Timeline gaps detected', {\n          count: timelineGaps.length,\n        });\n      }\n    }\n\n    // Analizar factores de riesgo\n\n    if (riskFactors.length > 0) {\n      insights.push(...riskFactors);\n      this.logger.debug('Risk factors detected', { count: riskFactors.length });\n    }\n\n    return insights;\n  }\n\n  private analyzeTimelineGaps(\n    timeline: { date: string; events: TimelineEvent[] }[]\n  ): Insight[] {\n\n    const sortedTimeline = [...timeline].sort(\n      (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()\n    );\n\n    for (let i = 1; i < sortedTimeline.length; i++) {\n      const gap =\n        new Date(sortedTimeline[i].date).getTime() -\n        new Date(sortedTimeline[i - 1].date).getTime();\n\n      if (gap > 30 * 24 * 60 * 60 * 1000) {\n        // Más de 30 días\n        insights.push({\n          type: 'timeline-gap' as InsightType,\n          description: `Se detectó una brecha significativa en el seguimiento del paciente`,\n          severity: 'medium',\n          evidence: [\n            `Última consulta: ${new Date(sortedTimeline[i - 1].date).toLocaleDateString()}`,\n            `Siguiente consulta: ${new Date(sortedTimeline[i].date).toLocaleDateString()}`,\n          ],\n        });\n      }\n    }\n\n    return insights;\n  }\n\n  private analyzeRiskFactors(emrData: EMRData): Insight[] {\n\n\n    // Analizar factores de riesgo en notas y EMR\n    const riskKeywords = [\n      'riesgo',\n      'complicación',\n      'adverso',\n      'efecto secundario',\n      'contraindicación',\n    ];\n    const riskNotes = emrData.medicalHistory\n      .filter((record) => record.type === 'note')\n      .filter((note) =>\n        riskKeywords.some((keyword) =>\n          note.description.toLowerCase().includes(keyword)\n        )\n      );\n\n    // Analizar medicamentos en EMR para contraindicaciones\n    const medicationsWithRisks = emrData.medications.filter((med) =>\n      riskKeywords.some((keyword) => med.name.toLowerCase().includes(keyword))\n    );\n\n    if (riskNotes.length > 0 || medicationsWithRisks.length > 0) {\n      insights.push({\n        type: 'risk-factor' as InsightType,\n        description:\n          'Se detectaron factores de riesgo en las notas médicas y medicamentos',\n        severity: 'high',\n        evidence: [\n          ...riskNotes.map((note) => note.description),\n          ...medicationsWithRisks.map(\n            (med) => `Medicamento con riesgo: ${med.name}`\n          ),\n        ],\n      });\n    }\n\n    return insights;\n  }\n\n  private generateRecommendations(response: AIResponse): Recommendation[] {\n    this.logger.debug('Generating recommendations');\n\n\n    if (response.insights) {\n      for (const insight of response.insights) {\n        if (insight.recommendation) {\n          recommendations.push({\n            type: this.determineRecommendationType(insight),\n            description: insight.recommendation,\n            priority: insight.severity,\n            evidence: insight.evidence,\n          });\n        }\n      }\n    }\n\n    return recommendations;\n  }\n\n  private determineRecommendationType(insight: Insight): RecommendationType {\n    switch (insight.type) {\n      case 'missing-follow-up':\n        return 'follow-up' as RecommendationType;\n      case 'risk-factor':\n        return 'alert' as RecommendationType;\n      case 'vital-signs-trend':\n        return 'test' as RecommendationType;\n      case 'contradiction':\n        return 'alert' as RecommendationType;\n      default:\n        return 'follow-up' as RecommendationType;\n    }\n  }\n\n  async query(query: AIQuery): Promise<AIResponse> {\n    this.logger.info('Processing AI query', {\n      queryType: query.context?.type,\n      patientId: query.patientId,\n      notesCount: query.unstructuredNotes?.length,\n    });\n\n    try {\n      // Intentar obtener del caché\n\n\n\n      if (cachedResponse) {\n        this.logger.info('Cache hit', { cacheKey });\n        return cachedResponse;\n      }\n      this.logger.debug('Cache miss', { cacheKey });\n\n      // Determinar el proveedor a usar\n      const providerId =\n        query.providerId ?? this.config.defaultProvider ?? 'gpt-4-medical';\n\n\n      // Procesar la consulta con el proveedor adecuado\n      const response = await this.executeWithRetry(() =>\n        this.processWithProvider(providerId, query)\n      );\n\n\n      this.logger.debug('AI processing complete', {\n        processingTime,\n        providerId,\n      });\n\n      // Guardar en caché\n      const metadata = {\n        provider: providerId,\n        cost: this.estimateCost(providerId, 1),\n        processingTime,\n      };\n      await this.cacheService.set(cacheKey, response, metadata);\n      this.logger.debug('Response cached');\n\n      return response;\n    } catch (error) {\n      this.logger.error('Error in AI query', { error, query: query.query });\n      throw new AIServiceError(\n        'Error al procesar la consulta de IA',\n        error as Error\n      );\n    }\n  }\n\n  private async processWithProvider(\n    providerId: string,\n    query: AIQuery\n  ): Promise<AIResponse> {\n    // Verificar si estamos en modo simulación\n    if (this.simulationMode) {\n      return this.generateSimulatedResponse(query);\n    }\n\n    // Obtener el proveedor solicitado\n\n\n    // Si no se encuentra, intentar con el proveedor por defecto\n    if (!provider) {\n      this.logger.warn(\n        `Provider ${providerId} not found, trying default provider`,\n        {\n          requestedProvider: providerId,\n          availableProviders: this.aiProviders.map((p) => p.id),\n        }\n      );\n\n      // Intentar con otro proveedor disponible\n      const firstAvailableProvider = this.aiProviders.find(\n        (provider: AIProviderClient) => provider.isReady()\n      );\n\n      if (firstAvailableProvider) {\n        return firstAvailableProvider.processQuery(query);\n      } else {\n        // Caer en simulación si no hay proveedores disponibles\n        this.logger.warn('No AI providers available, using simulation mode');\n        return this.generateSimulatedResponse(query);\n      }\n    }\n\n    // Usar el proveedor encontrado\n    return provider.processQuery(query);\n  }\n\n  private generateCacheKey(query: AIQuery): string {\n    return JSON.stringify(query);\n  }\n\n  getAvailableProviders(): AIProvider[] {\n    return this.providers;\n  }\n\n  estimateCost(providerId: string, queryCount: number): number {\n    // Si tenemos un proveedor real, usar su estimación\n\n    if (provider) {\n      // Crear una consulta de ejemplo para estimar\n      const exampleQuery: AIQuery = {\n        query: 'Consulta de ejemplo para estimación de costo',\n      };\n      return provider.estimateQueryCost(exampleQuery) * queryCount;\n    }\n\n    // Si no hay proveedor real, usar la estimación básica\n\n    return providerInfo ? providerInfo.costPerQuery * queryCount : 0;\n  }\n\n  async analyzeEMRData(emrData: EMRData): Promise<AIResponse> {\n    this.logger.info('Analyzing EMR data', { patientId: emrData.patientId });\n    try {\n      const context = {\n        type: 'emr' as ContextType,\n        data: emrData,\n      };\n\n      return await this.query({\n        query: 'Analiza el historial médico y genera insights relevantes',\n        patientId: emrData.patientId,\n        context,\n      });\n    } catch (error) {\n      this.logger.error('Error analyzing EMR data', {\n        error,\n        patientId: emrData.patientId,\n      });\n      throw new AIServiceError(\n        'Error al analizar los datos del EMR',\n        error as Error\n      );\n    }\n  }\n\n  async analyzeUnstructuredNote(note: UnstructuredNote): Promise<AIResponse> {\n    this.logger.info('Analyzing single unstructured note', {\n      type: note.type,\n      timestamp: note.timestamp,\n    });\n    try {\n      return await this.query({\n        query:\n          'Analiza la siguiente nota médica y extrae información relevante',\n        unstructuredNotes: [note],\n      });\n    } catch (error) {\n      this.logger.error('Error analyzing unstructured note', {\n        error,\n        noteType: note.type,\n      });\n      throw new AIServiceError(\n        'Error al analizar la nota médica',\n        error as Error\n      );\n    }\n  }\n\n  /**\n   * Genera una respuesta simulada para propósitos de desarrollo\n   */\n  private generateSimulatedResponse(query: AIQuery): Promise<AIResponse> {\n    this.logger.debug('Generating simulated response for query');\n\n    // Simular un pequeño retraso para emular el procesamiento\n    return new Promise<AIResponse>((resolve) => {\n      setTimeout(() => {\n        if (query.context?.type === 'emr' && query.unstructuredNotes) {\n          resolve({\n            answer: `Basado en el análisis de ${query.unstructuredNotes.length} notas médicas,\n                        he organizado la información y detectado varios puntos importantes...`,\n            confidence: 0.89,\n            timeline: [\n              {\n                date: '2023-01-15',\n                events: [\n                  {\n                    type: 'consultation',\n                    description: 'Consulta inicial por dolor de rodilla',\n                    source: 'Nota clínica',\n                    confidence: 0.95,\n                  },\n                ],\n              },\n              {\n                date: '2023-03-10',\n                events: [\n                  {\n                    type: 'lab-result',\n                    description:\n                      'Resultados de resonancia magnética: desgarro de menisco',\n                    source: 'Informe de radiología',\n                    confidence: 0.98,\n                  },\n                ],\n              },\n            ],\n            insights: [\n              {\n                type: 'missing-follow-up' as InsightType,\n                description:\n                  'El paciente no ha tenido seguimiento después del diagnóstico de desgarro de menisco',\n                severity: 'medium',\n                evidence: [\n                  'Última visita: 10/03/2023',\n                  'No hay registros de seguimiento para el plan de tratamiento',\n                ],\n                recommendation:\n                  'Programar consulta de seguimiento con ortopedia',\n              },\n            ],\n          });\n        } else {\n          resolve({\n            answer:\n              'He analizado la consulta pero necesito más contexto para proporcionar insights detallados.',\n            confidence: 0.75,\n          });\n        }\n      }, 500); // Simular 500ms de procesamiento\n    });\n  }\n\n  /**\n   * Configura el servicio con nuevas opciones\n   */\n  configure(config: Partial<AIServiceConfig>): void {\n    Object.assign(this.config, config);\n    this.setupProviders();\n    this.logger.info('AIService reconfigured', {\n      defaultProvider: this.config.defaultProvider,\n      providersConfigured: this.aiProviders.map((p) => p.id),\n    });\n  }\n\n  /**\n   * Verifica si el servicio está configurado correctamente\n   */\n  isConfigured(): boolean {\n    return this.aiProviders.length > 0 || this.simulationMode;\n  }\n\n  /**\n   * Verifica si el servicio está en modo simulación\n   */\n  isInSimulationMode(): boolean {\n    return this.simulationMode;\n  }\n\n  /**\n   * Activa o desactiva el modo simulación\n   */\n  setSimulationMode(enabled: boolean): void {\n    this.simulationMode = enabled;\n    this.logger.info(`Simulation mode ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Obtiene los registros de log del servicio\n   */\n  getLogs(): LogEntry[] {\n    return this.logger.getLogs();\n  }\n\n  /**\n   * Limpia los registros de log (útil para pruebas)\n   */\n  clearLogs(): void {\n    this.logger.clearLogs();\n  }\n}\n\n/**\n * Clase personalizada de error para el servicio de IA\n */\nexport class AIServiceError extends Error {\n  originalError?: Error;\n  timestamp: string;\n\n  constructor(message: string, originalError?: Error) {\n    super(message);\n    this.name = 'AIServiceError';\n    this.originalError = originalError;\n    this.timestamp = new Date().toISOString();\n  }\n}\n\n// Exportar una instancia por defecto\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/cacheService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  maxSize: number\nimport { \nexport interface CacheConfig {\n  ttl: number;\n  cleanupInterval: number;\n}\n\nexport interface CacheStats {\n  size: number;\n  maxSize: number;\n  hitRate: number;\n  missRate: number;\n  totalQueries: number;\n  averageAccessCount: number;\n  oldestEntry: Date | null;\n  newestEntry: Date | null;\n}\n\nexport class CacheService {\n  private static instance: CacheService;\n  private readonly cache: Map<string, CachedResponse> = new Map();\n  private readonly config: CacheConfig;\n  private stats: {\n    hits: number;\n    misses: number;\n    totalQueries: number;\n  };\n\n  private constructor(config?: Partial<CacheConfig>) {\n    this.config = {\n      maxSize: config?.maxSize ?? 1000,\n      ttl: config?.ttl ?? 24 * 60 * 60 * 1000, // 24 horas por defecto\n      cleanupInterval: config?.cleanupInterval ?? 60 * 60 * 1000, // 1 hora por defecto\n    };\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      totalQueries: 0,\n    };\n    this.startCleanupInterval();\n  }\n\n  public static getInstance(config?: Partial<CacheConfig>): CacheService {\n    if (!CacheService.instance) {\n      CacheService.instance = new CacheService(config);\n    }\n    return CacheService.instance;\n  }\n\n  private generateQueryHash(query: string): string {\n    return createHash('sha256').update(query).digest('hex');\n  }\n\n  public async get(query: string): Promise<AIResponse | null> {\n\n\n\n    if (!cached) {\n      this.stats.misses++;\n      this.stats.totalQueries++;\n      return null;\n    }\n\n    // Verificar TTL\n\n\n    if (now - cachedTime > this.config.ttl) {\n      this.cache.delete(queryHash);\n      this.stats.misses++;\n      this.stats.totalQueries++;\n      return null;\n    }\n\n    // Actualizar estadísticas\n    this.stats.hits++;\n    this.stats.totalQueries++;\n    cached.lastAccessed = new Date().toISOString();\n    cached.accessCount++;\n\n    return cached.response;\n  }\n\n  public async set(\n    query: string,\n    response: AIResponse,\n    metadata?: CachedResponse['metadata']\n  ): Promise<void> {\n\n\n    // Limpiar caché si está lleno\n    if (this.cache.size >= this.config.maxSize) {\n      this.cleanup();\n    }\n\n    const cachedResponse: CachedResponse = {\n      query,\n      response,\n      timestamp: new Date().getTime(),\n      id: queryHash,\n      queryHash,\n      lastAccessed: new Date().toISOString(),\n      accessCount: 0,\n      metadata,\n    };\n\n    this.cache.set(queryHash, cachedResponse);\n  }\n\n  private cleanup(): void {\n    // Eliminar entradas expiradas\n\n    for (const [key, value] of this.cache.entries()) {\n\n      if (now - cachedTime > this.config.ttl) {\n        this.cache.delete(key);\n      }\n    }\n\n    // Si aún está lleno, eliminar las entradas menos accedidas\n    if (this.cache.size >= this.config.maxSize) {\n\n      entries.sort((a, b) => {\n        // Priorizar por frecuencia de acceso y tiempo desde último acceso\n\n        if (accessScore !== 0) return accessScore;\n\n\n\n        return lastAccessB - lastAccessA;\n      });\n\n\n      toRemove.forEach(([key]) => this.cache.delete(key));\n    }\n  }\n\n  private startCleanupInterval(): void {\n    setInterval(() => {\n      this.cleanup();\n    }, this.config.cleanupInterval);\n  }\n\n  public async clear(): Promise<void> {\n    this.cache.clear();\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      totalQueries: 0,\n    };\n  }\n\n  public getStats(): CacheStats {\n\n\n\n\n    let oldestEntry: Date | null = null;\n    let newestEntry: Date | null = null;\n    let totalAccessCount = 0;\n\n    for (const entry of this.cache.values()) {\n\n      if (!oldestEntry || entryDate < oldestEntry) {\n        oldestEntry = entryDate;\n      }\n      if (!newestEntry || entryDate > newestEntry) {\n        newestEntry = entryDate;\n      }\n      totalAccessCount += entry.accessCount;\n    }\n\n    return {\n      size: this.cache.size,\n      maxSize: this.config.maxSize,\n      hitRate,\n      missRate,\n      totalQueries,\n      averageAccessCount:\n        this.cache.size > 0 ? totalAccessCount / this.cache.size : 0,\n      oldestEntry,\n      newestEntry,\n    };\n  }\n\n  public updateConfig(config: Partial<CacheConfig>): void {\n    Object.assign(this.config, config);\n  }\n}\n\n// Exportar una instancia por defecto\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  ErrorMonitorService,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  ErrorSeverity,\nimport lintingErrorService, {\n  LintingErrorService,\n  LintingErrorType,\n  LintingErrorPriority,\n  LintingError,\n } from './lintingErrorService'\nimport monitorService, {\n  ErrorCategory,\n  MonitoredError,\n  captureException,\n} from './monitorService';\n\n\n// Exportar funciones y clases\nexport {\n  // Monitor de errores general\n  monitorService,\n  ErrorMonitorService,\n  captureException,\n\n  // Servicio de errores de linting\n  lintingErrorService,\n  LintingErrorService,\n};\n\n// Exportar tipos e interfaces\nexport type {\n  ErrorSeverity,\n  ErrorCategory,\n  MonitoredError,\n  LintingErrorType,\n  LintingErrorPriority,\n  LintingError,\n};\n\n// Exportar instancias por defecto\nexport default {\n  errorMonitor: monitorService,\n  lintingErrors: lintingErrorService,\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/lintingErrorService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Tipo de error de linting\nimport { \n/**\n */\nexport enum LintingErrorType {\n  /** Errores de TypeScript */\n  TYPESCRIPT = 'typescript',\n  /** Errores de ESLint */\n  ESLINT = 'eslint',\n  /** Errores de SonarQube */\n  SONAR = 'sonar',\n  /** Errores de Prettier */\n  PRETTIER = 'prettier',\n  /** Errores de compilación */\n  COMPILATION = 'compilation',\n  /** Otros errores de linting */\n  OTHER = 'other',\n}\n\n/**\n * Prioridad para atender errores de linting\n */\nexport enum LintingErrorPriority {\n  /** Atender inmediatamente, bloquea el desarrollo */\n  BLOCKER = 'blocker',\n  /** Atender lo antes posible, afecta la calidad */\n  CRITICAL = 'critical',\n  /** Atender durante el sprint actual */\n  MAJOR = 'major',\n  /** Atender cuando sea conveniente */\n  MINOR = 'minor',\n  /** Informativo, no requiere acción inmediata */\n  INFO = 'info',\n}\n\n/**\n * Estructura para representar un error de linting\n */\nexport interface LintingError {\n  /** ID único del error de linting */\n  id: string;\n  /** Mensaje descriptivo del error */\n  message: string;\n  /** Código de regla que generó el error */\n  rule: string;\n  /** Tipo de error de linting */\n  type: LintingErrorType;\n  /** Prioridad para atender el error */\n  priority: LintingErrorPriority;\n  /** Archivo donde se encontró el error */\n  file: string;\n  /** Línea donde se encontró el error */\n  line?: number;\n  /** Columna donde se encontró el error */\n  column?: number;\n  /** Línea final del rango donde se encontró el error */\n  endLine?: number;\n  /** Columna final del rango donde se encontró el error */\n  endColumn?: number;\n  /** Fecha de detección del error */\n  detectedAt: Date;\n  /** Si el error bloquea la compilación */\n  blocksCompilation: boolean;\n  /** Si el error es solo estético */\n  isStyleOnly: boolean;\n  /** Sugerencia de cómo corregir el error */\n  suggestion?: string;\n  /** Si el error ha sido resuelto */\n  resolved: boolean;\n  /** Fecha en que se resolvió el error */\n  resolvedAt?: Date;\n  /** Usuario que resolvió el error */\n  resolvedBy?: string;\n  /** ID del monitor de error relacionado */\n  monitorErrorId?: string;\n}\n\n/**\n * Mapeo de reglas de linting a prioridades y características\n */\nconst rulesPriorityMap: Record<\n  string,\n  {\n    priority: LintingErrorPriority;\n    blocksCompilation: boolean;\n    isStyleOnly: boolean;\n  }\n> = {\n  // TypeScript\n  'typescript:S1854': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: false,\n  }, // Dead store\n  'typescript:S1172': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: false,\n  }, // Unused parameter\n  'typescript:S3358': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: true,\n  }, // Nested ternary\n\n  // ESLint\n  'no-unused-vars': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: false,\n  },\n  'no-console': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: true,\n  },\n  'prefer-const': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: true,\n  },\n\n  // SonarQube\n  'typescript:S6582': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: true,\n  }, // Optional chaining\n  'typescript:S6606': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: false,\n  }, // Nullish coalescing\n  'typescript:S6747': {\n    priority: LintingErrorPriority.MINOR,\n    blocksCompilation: false,\n    isStyleOnly: true,\n  }, // Unknown property\n\n  // Errores de TypeScript que bloquean compilación\n  TS2322: {\n    priority: LintingErrorPriority.BLOCKER,\n    blocksCompilation: true,\n    isStyleOnly: false,\n  }, // Type error\n  TS2531: {\n    priority: LintingErrorPriority.BLOCKER,\n    blocksCompilation: true,\n    isStyleOnly: false,\n  }, // Object is possibly null\n  TS2532: {\n    priority: LintingErrorPriority.BLOCKER,\n    blocksCompilation: true,\n    isStyleOnly: false,\n  }, // Object is possibly undefined\n  TS2339: {\n    priority: LintingErrorPriority.BLOCKER,\n    blocksCompilation: true,\n    isStyleOnly: false,\n  }, // Property does not exist on type\n};\n\n/**\n * Servicio para gestionar y clasificar errores de linting\n */\nexport class LintingErrorService {\n  private readonly logger: Logger;\n  private lintingErrors: LintingError[] = [];\n  private static instance: LintingErrorService;\n\n  /**\n   * Constructor privado para implementar patrón Singleton\n   */\n  private constructor() {\n    this.logger = new Logger('LintingErrorService');\n    this.logger.info('Servicio de gestión de errores de linting inicializado');\n  }\n\n  /**\n   * Obtiene la instancia única del servicio (patrón Singleton)\n   */\n  public static getInstance(): LintingErrorService {\n    if (!LintingErrorService.instance) {\n      LintingErrorService.instance = new LintingErrorService();\n    }\n    return LintingErrorService.instance;\n  }\n\n  /**\n   * Determina la prioridad de un error de linting basado en su código y tipo\n   */\n  private determinePriority(\n    rule: string,\n    type: LintingErrorType\n  ): {\n    priority: LintingErrorPriority;\n    blocksCompilation: boolean;\n    isStyleOnly: boolean;\n  } {\n    // Buscar configuración específica para esta regla\n\n    if (ruleConfig) {\n      return ruleConfig;\n    }\n\n    // Configuración por defecto basada en el tipo de error\n    switch (type) {\n      case LintingErrorType.TYPESCRIPT:\n        return {\n          priority: LintingErrorPriority.MAJOR,\n          blocksCompilation: true,\n          isStyleOnly: false,\n        };\n      case LintingErrorType.ESLINT:\n        return {\n          priority: LintingErrorPriority.MINOR,\n          blocksCompilation: false,\n          isStyleOnly: true,\n        };\n      case LintingErrorType.SONAR:\n        return {\n          priority: LintingErrorPriority.MINOR,\n          blocksCompilation: false,\n          isStyleOnly: true,\n        };\n      case LintingErrorType.PRETTIER:\n        return {\n          priority: LintingErrorPriority.INFO,\n          blocksCompilation: false,\n          isStyleOnly: true,\n        };\n      case LintingErrorType.COMPILATION:\n        return {\n          priority: LintingErrorPriority.BLOCKER,\n          blocksCompilation: true,\n          isStyleOnly: false,\n        };\n      default:\n        return {\n          priority: LintingErrorPriority.MINOR,\n          blocksCompilation: false,\n          isStyleOnly: false,\n        };\n    }\n  }\n\n  /**\n   * Determina el equivalente de severidad para el monitor general\n   */\n  private mapPriorityToSeverity(priority: LintingErrorPriority): ErrorSeverity {\n    switch (priority) {\n      case LintingErrorPriority.BLOCKER:\n        return ErrorSeverity.CRITICAL;\n      case LintingErrorPriority.CRITICAL:\n        return ErrorSeverity.HIGH;\n      case LintingErrorPriority.MAJOR:\n        return ErrorSeverity.MEDIUM;\n      case LintingErrorPriority.MINOR:\n        return ErrorSeverity.LOW;\n      case LintingErrorPriority.INFO:\n        return ErrorSeverity.INFO;\n      default:\n        return ErrorSeverity.LOW;\n    }\n  }\n\n  /**\n   * Registra un nuevo error de linting\n   * @returns ID del error registrado\n   */\n  public captureError(error: {\n    message: string;\n    rule: string;\n    type: LintingErrorType;\n    file: string;\n    line?: number;\n    column?: number;\n    endLine?: number;\n    endColumn?: number;\n    suggestion?: string;\n  }): string {\n    // Generar ID único para el error\n\n    // Determinar prioridad y características\n    const { priority, blocksCompilation, isStyleOnly } = this.determinePriority(\n      error.rule,\n      error.type\n    );\n\n    // Crear objeto de error\n    const lintingError: LintingError = {\n      id: errorId,\n      message: error.message,\n      rule: error.rule,\n      type: error.type,\n      priority,\n      file: error.file,\n      line: error.line,\n      column: error.column,\n      endLine: error.endLine,\n      endColumn: error.endColumn,\n      detectedAt: new Date(),\n      blocksCompilation,\n      isStyleOnly,\n      suggestion: error.suggestion,\n      resolved: false,\n    };\n\n    // Registrar el error\n    this.lintingErrors.push(lintingError);\n\n    // Registrar también en el monitor general para errores prioritarios\n    if (\n      priority === LintingErrorPriority.BLOCKER ||\n      priority === LintingErrorPriority.CRITICAL ||\n      blocksCompilation\n    ) {\n      const monitorErrorId = monitorService.captureError({\n        message: `Error de linting: ${error.message}`,\n        details: `Archivo: ${error.file}${error.line ? `, Línea: ${error.line}` : ''}\nRegla: ${error.rule}\n${error.suggestion ? `Sugerencia: ${error.suggestion}` : ''}`,\n        category: ErrorCategory.VALIDATION,\n        severity,\n        component: 'Linting',\n        path: error.file,\n        code: error.rule,\n      });\n\n      // Guardar referencia al error en el monitor\n      lintingError.monitorErrorId = monitorErrorId;\n    }\n\n    this.logger.info('Error de linting registrado', {\n      errorId,\n      rule: error.rule,\n      file: error.file,\n      priority,\n      blocksCompilation,\n    });\n\n    return errorId;\n  }\n\n  /**\n   * Marca un error de linting como resuelto\n   */\n  public resolveError(errorId: string, userId: string): boolean {\n    if (!error) return false;\n\n    error.resolved = true;\n    error.resolvedAt = new Date();\n    error.resolvedBy = userId;\n\n    // Si el error está registrado en el monitor general, marcarlo como resuelto ahí también\n    if (error.monitorErrorId) {\n      monitorService.resolveError(error.monitorErrorId, userId, {\n        notes: `Error de linting resuelto: ${error.rule}`,\n      });\n    }\n\n    this.logger.info('Error de linting resuelto', { errorId, userId });\n    return true;\n  }\n\n  /**\n   * Obtiene todos los errores activos de linting\n   */\n  public getActiveErrors(): LintingError[] {\n    return this.lintingErrors.filter((error) => !error.resolved);\n  }\n\n  /**\n   * Obtiene errores filtrados por criterios\n   */\n  public getErrors(filters?: {\n    type?: LintingErrorType;\n    priority?: LintingErrorPriority;\n    file?: string;\n    rule?: string;\n    blocksCompilation?: boolean;\n    isStyleOnly?: boolean;\n    resolved?: boolean;\n    startDate?: Date;\n    endDate?: Date;\n  }): LintingError[] {\n    let filteredErrors = [...this.lintingErrors];\n\n    if (!filters) return filteredErrors;\n\n    if (filters.type) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.type === filters.type\n      );\n    }\n\n    if (filters.priority) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.priority === filters.priority\n      );\n    }\n\n    if (filters.file) {\n      filteredErrors = filteredErrors.filter((error) =>\n        error.file.includes(filters.file!)\n      );\n    }\n\n    if (filters.rule) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.rule === filters.rule\n      );\n    }\n\n    if (filters.blocksCompilation !== undefined) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.blocksCompilation === filters.blocksCompilation\n      );\n    }\n\n    if (filters.isStyleOnly !== undefined) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.isStyleOnly === filters.isStyleOnly\n      );\n    }\n\n    if (filters.resolved !== undefined) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.resolved === filters.resolved\n      );\n    }\n\n    if (filters.startDate) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.detectedAt >= filters.startDate!\n      );\n    }\n\n    if (filters.endDate) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.detectedAt <= filters.endDate!\n      );\n    }\n\n    return filteredErrors;\n  }\n\n  /**\n   * Obtiene estadísticas de errores de linting\n   */\n  public getErrorStats(): {\n    total: number;\n    active: number;\n    byPriority: Record<LintingErrorPriority, number>;\n    byType: Record<LintingErrorType, number>;\n    blocksCompilation: number;\n    styleOnly: number;\n  } {\n    const stats = {\n      total: this.lintingErrors.length,\n      active: activeErrors.length,\n      byPriority: Object.values(LintingErrorPriority).reduce(\n        (acc, priority) => {\n          acc[priority] = activeErrors.filter(\n            (e) => e.priority === priority\n          ).length;\n          return acc;\n        },\n        {} as Record<LintingErrorPriority, number>\n      ),\n      byType: Object.values(LintingErrorType).reduce(\n        (acc, type) => {\n          acc[type] = activeErrors.filter((e) => e.type === type).length;\n          return acc;\n        },\n        {} as Record<LintingErrorType, number>\n      ),\n      blocksCompilation: activeErrors.filter((e) => e.blocksCompilation).length,\n      styleOnly: activeErrors.filter((e) => e.isStyleOnly).length,\n    };\n\n    return stats;\n  }\n\n  /**\n   * Importa errores de SonarQube desde un JSON\n   */\n  public importSonarQubeErrors(\n    issues: Array<{\n      resource: string;\n      code: string;\n      severity: number;\n      message: string;\n      startLineNumber: number;\n      startColumn: number;\n      endLineNumber: number;\n      endColumn: number;\n    }>\n  ): number {\n    let importedCount = 0;\n\n    for (const issue of issues) {\n      // Extraer el nombre de archivo de la ruta completa\n\n      // Capturar el error\n      this.captureError({\n        message: issue.message,\n        rule: issue.code,\n        type: LintingErrorType.SONAR,\n        file,\n        line: issue.startLineNumber,\n        column: issue.startColumn,\n        endLine: issue.endLineNumber,\n        endColumn: issue.endColumn,\n      });\n\n      importedCount++;\n    }\n\n    this.logger.info(`Importados ${importedCount} errores de SonarQube`);\n    return importedCount;\n  }\n\n  /**\n   * Genera recomendaciones de cuáles errores abordar primero\n   */\n  public generateActionPlan(): {\n    immediateAttention: LintingError[];\n    highPriority: LintingError[];\n    normalPriority: LintingError[];\n    lowPriority: LintingError[];\n  } {\n    return {\n      // Errores que bloquean la compilación o son BLOCKER\n      immediateAttention: activeErrors.filter(\n        (e) =>\n          e.blocksCompilation || e.priority === LintingErrorPriority.BLOCKER\n      ),\n\n      // Errores CRITICAL que no bloquean compilación\n      highPriority: activeErrors.filter(\n        (e) =>\n          !e.blocksCompilation && e.priority === LintingErrorPriority.CRITICAL\n      ),\n\n      // Errores MAJOR\n      normalPriority: activeErrors.filter(\n        (e) => e.priority === LintingErrorPriority.MAJOR\n      ),\n\n      // Errores MINOR o INFO que no son puramente estéticos\n      lowPriority: activeErrors.filter(\n        (e) =>\n          (e.priority === LintingErrorPriority.MINOR ||\n            e.priority === LintingErrorPriority.INFO) &&\n          !e.isStyleOnly\n      ),\n    };\n  }\n\n  /**\n   * Purga errores resueltos antiguos\n   */\n  public purgeOldResolvedErrors(olderThan: Date): number {\n    this.lintingErrors = this.lintingErrors.filter(\n      (error) =>\n        !error.resolved || (error.resolvedAt && error.resolvedAt > olderThan)\n    );\n\n    if (purgedCount > 0) {\n      this.logger.info(\n        `Purgados ${purgedCount} errores de linting resueltos antiguos`\n      );\n    }\n\n    return purgedCount;\n  }\n}\n\nexport default LintingErrorService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/monitorService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Tipos de severidad para los errores monitoreados\nimport { \n/**\n */\nexport enum ErrorSeverity {\n  /** Error crítico que bloquea funcionalidad principal y debe ser atendido inmediatamente */\n  CRITICAL = 'critical',\n  /** Error grave que afecta funcionalidad importante pero permite operación limitada */\n  HIGH = 'high',\n  /** Error moderado que afecta funcionalidad secundaria */\n  MEDIUM = 'medium',\n  /** Error menor que no afecta funcionalidad principal */\n  LOW = 'low',\n  /** Advertencia que no afecta funcionalidad pero podría indicar problemas futuros */\n  WARNING = 'warning',\n  /** Información para seguimiento y análisis */\n  INFO = 'info',\n}\n\n/**\n * Categorías de errores para facilitar su agrupación y análisis\n */\nexport enum ErrorCategory {\n  /** Errores relacionados con la autenticación y autorización */\n  AUTH = 'auth',\n  /** Errores relacionados con la API o comunicación con servicios externos */\n  API = 'api',\n  /** Errores relacionados con la base de datos */\n  DATABASE = 'database',\n  /** Errores relacionados con la UI */\n  UI = 'ui',\n  /** Errores relacionados con la integración de EMR */\n  EMR = 'emr',\n  /** Errores relacionados con la integración de IA */\n  AI = 'ai',\n  /** Errores relacionados con la validación de datos */\n  VALIDATION = 'validation',\n  /** Errores relacionados con la red */\n  NETWORK = 'network',\n  /** Otros errores no categorizados */\n  OTHER = 'other',\n}\n\n/**\n * Interface para representar un error monitorizado\n */\nexport interface MonitoredError {\n  /** ID único del error */\n  id: string;\n  /** Mensaje descriptivo del error */\n  message: string;\n  /** Detalles técnicos del error */\n  details?: string;\n  /** Categoría del error */\n  category: ErrorCategory;\n  /** Severidad del error */\n  severity: ErrorSeverity;\n  /** Código de error (opcional, para errores específicos) */\n  code?: string;\n  /** Componente o módulo donde ocurrió el error */\n  component?: string;\n  /** Ruta o ubicación donde ocurrió el error */\n  path?: string;\n  /** Fecha y hora cuando ocurrió el error */\n  timestamp: Date;\n  /** Usuario afectado por el error (si aplica) */\n  userId?: string;\n  /** Si el error ya fue visto/reconocido */\n  acknowledged: boolean;\n  /** Si el error ha sido resuelto */\n  resolved: boolean;\n  /** Datos adicionales relacionados con el error */\n  metadata?: Record<string, unknown>;\n  /** Acciones tomadas para resolver el error */\n  resolutionSteps?: string[];\n  /** Usuario que resolvió el error (si aplica) */\n  resolvedBy?: string;\n  /** Fecha en que se resolvió el error (si aplica) */\n  resolvedAt?: Date;\n}\n\n/**\n * Servicio para monitorear errores y advertencias del sistema\n */\nexport class ErrorMonitorService {\n  private readonly logger: Logger;\n  private errors: MonitoredError[] = [];\n  private webhookUrl?: string;\n  private notificationThreshold: ErrorSeverity = ErrorSeverity.HIGH;\n  private static instance: ErrorMonitorService;\n\n  /**\n   * Constructor privado para implementar patrón Singleton\n   */\n  private constructor() {\n    this.logger = new Logger('ErrorMonitorService');\n    this.logger.info('Servicio de monitoreo de errores inicializado');\n  }\n\n  /**\n   * Obtiene la instancia única del servicio (patrón Singleton)\n   */\n  public static getInstance(): ErrorMonitorService {\n    if (!ErrorMonitorService.instance) {\n      ErrorMonitorService.instance = new ErrorMonitorService();\n    }\n    return ErrorMonitorService.instance;\n  }\n\n  /**\n   * Configura el servicio de monitoreo\n   * @param config Configuración del servicio\n   */\n  public configure(config: {\n    webhookUrl?: string;\n    notificationThreshold?: ErrorSeverity;\n  }): void {\n    this.webhookUrl = config.webhookUrl;\n    this.notificationThreshold =\n      config.notificationThreshold ?? ErrorSeverity.HIGH;\n    this.logger.info('Configuración de monitoreo actualizada', {\n      notificationThreshold: this.notificationThreshold,\n      webhookConfigured: !!this.webhookUrl,\n    });\n  }\n\n  /**\n   * Registra un nuevo error en el sistema\n   * @param error Información del error a registrar\n   * @returns ID del error registrado\n   */\n  public captureError(\n    error: Omit<\n      MonitoredError,\n      'id' | 'timestamp' | 'acknowledged' | 'resolved'\n    >\n  ): string {\n    const monitoredError: MonitoredError = {\n      id: errorId,\n      timestamp: new Date(),\n      acknowledged: false,\n      resolved: false,\n      ...error,\n    };\n\n    this.errors.push(monitoredError);\n\n    this.logger.error('Error registrado en el monitor', {\n      errorId,\n      message: monitoredError.message,\n      category: monitoredError.category,\n      severity: monitoredError.severity,\n      component: monitoredError.component,\n    });\n\n    // Enviar notificación si la severidad del error es igual o mayor al umbral configurado\n    this.maybeNotify(monitoredError);\n\n    return errorId;\n  }\n\n  /**\n   * Evalúa si un error debería enviarse como notificación\n   */\n  private maybeNotify(error: MonitoredError): void {\n    // Si la severidad del error es mayor o igual que el umbral, notificar\n    if (errorSeverityIndex <= thresholdIndex && this.webhookUrl) {\n      this.sendNotification(error);\n    }\n  }\n\n  /**\n   * Envía una notificación a través del webhook configurado\n   */\n  private sendNotification(error: MonitoredError): void {\n    if (!this.webhookUrl) return;\n\n    try {\n      // Aquí implementaríamos el envío real de la notificación\n      // fetch(this.webhookUrl, {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify({\n      //     error: {\n      //       id: error.id,\n      //       message: error.message,\n      //       severity: error.severity,\n      //       category: error.category,\n      //       component: error.component,\n      //       timestamp: error.timestamp\n      //     }\n      //   })\n      // });\n\n      this.logger.info('Notificación enviada para error', {\n        errorId: error.id,\n      });\n    } catch (notifyError) {\n      this.logger.error('Error al enviar notificación', {\n        errorId: error.id,\n        notifyError,\n      });\n    }\n  }\n\n  /**\n   * Marca un error como reconocido\n   * @param errorId ID del error a reconocer\n   * @param userId ID del usuario que reconoce el error\n   * @returns true si el error fue encontrado y actualizado\n   */\n  public acknowledgeError(errorId: string, userId: string): boolean {\n    if (!error) return false;\n\n    error.acknowledged = true;\n    error.metadata = {\n      ...error.metadata,\n      acknowledgedBy: userId,\n      acknowledgedAt: new Date(),\n    };\n\n    this.logger.info('Error reconocido', { errorId, userId });\n    return true;\n  }\n\n  /**\n   * Marca un error como resuelto\n   * @param errorId ID del error a resolver\n   * @param userId ID del usuario que resuelve el error\n   * @param resolution Información sobre la resolución\n   * @returns true si el error fue encontrado y actualizado\n   */\n  public resolveError(\n    errorId: string,\n    userId: string,\n    resolution?: {\n      steps?: string[];\n      notes?: string;\n    }\n  ): boolean {\n    if (!error) return false;\n\n    error.resolved = true;\n    error.resolvedBy = userId;\n    error.resolvedAt = new Date();\n\n    if (resolution?.steps?.length) {\n      error.resolutionSteps = resolution.steps;\n    }\n\n    error.metadata = {\n      ...error.metadata,\n      resolutionNotes: resolution?.notes,\n      resolutionDate: new Date(),\n    };\n\n    this.logger.info('Error resuelto', { errorId, userId });\n    return true;\n  }\n\n  /**\n   * Obtiene todos los errores activos (no resueltos)\n   * @returns Lista de errores activos\n   */\n  public getActiveErrors(): MonitoredError[] {\n    return this.errors.filter((error) => !error.resolved);\n  }\n\n  /**\n   * Obtiene errores filtrados por criterios\n   * @param filters Criterios de filtrado\n   * @returns Lista de errores que cumplen los criterios\n   */\n  public getErrors(filters?: {\n    severity?: ErrorSeverity;\n    category?: ErrorCategory;\n    component?: string;\n    resolved?: boolean;\n    acknowledged?: boolean;\n    startDate?: Date;\n    endDate?: Date;\n  }): MonitoredError[] {\n    let filteredErrors = [...this.errors];\n\n    if (!filters) return filteredErrors;\n\n    if (filters.severity) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.severity === filters.severity\n      );\n    }\n\n    if (filters.category) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.category === filters.category\n      );\n    }\n\n    if (filters.component) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.component === filters.component\n      );\n    }\n\n    if (filters.resolved !== undefined) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.resolved === filters.resolved\n      );\n    }\n\n    if (filters.acknowledged !== undefined) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.acknowledged === filters.acknowledged\n      );\n    }\n\n    if (filters.startDate) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.timestamp >= filters.startDate!\n      );\n    }\n\n    if (filters.endDate) {\n      filteredErrors = filteredErrors.filter(\n        (error) => error.timestamp <= filters.endDate!\n      );\n    }\n\n    return filteredErrors;\n  }\n\n  /**\n   * Obtiene un resumen estadístico de los errores por categoría y severidad\n   * @returns Estadísticas de errores\n   */\n  public getErrorStats(): {\n    total: number;\n    active: number;\n    bySeverity: Record<ErrorSeverity, number>;\n    byCategory: Record<ErrorCategory, number>;\n    criticalUnresolved: number;\n  } {\n    const stats = {\n      total: this.errors.length,\n      active: this.getActiveErrors().length,\n      bySeverity: Object.values(ErrorSeverity).reduce(\n        (acc, severity) => {\n          acc[severity] = this.errors.filter(\n            (e) => e.severity === severity\n          ).length;\n          return acc;\n        },\n        {} as Record<ErrorSeverity, number>\n      ),\n      byCategory: Object.values(ErrorCategory).reduce(\n        (acc, category) => {\n          acc[category] = this.errors.filter(\n            (e) => e.category === category\n          ).length;\n          return acc;\n        },\n        {} as Record<ErrorCategory, number>\n      ),\n      criticalUnresolved: this.errors.filter(\n        (e) => e.severity === ErrorSeverity.CRITICAL && !e.resolved\n      ).length,\n    };\n\n    return stats;\n  }\n\n  /**\n   * Genera un ID único para un error\n   */\n  private generateErrorId(): string {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Purga errores resueltos antiguos por fecha\n   * @param olderThan Fecha límite para considerar errores antiguos\n   * @returns Número de errores purgados\n   */\n  public purgeOldResolvedErrors(olderThan: Date): number {\n    this.errors = this.errors.filter(\n      (error) =>\n        !error.resolved || (error.resolvedAt && error.resolvedAt > olderThan)\n    );\n\n    if (purgedCount > 0) {\n      this.logger.info(`Purgados ${purgedCount} errores resueltos antiguos`);\n    }\n\n    return purgedCount;\n  }\n}\n\n/**\n * Utilidad para convertir errores JavaScript a errores monitorizados\n */\nexport const captureException = (\n  error: Error,\n  options: {\n    category: ErrorCategory;\n    severity: ErrorSeverity;\n    component?: string;\n    userId?: string;\n    metadata?: Record<string, unknown>;\n  }\n): string => {\n  return service.captureError({\n    message: error.message,\n    details: error.stack,\n    category: options.category,\n    severity: options.severity,\n    component: options.component,\n    userId: options.userId,\n    metadata: options.metadata,\n  });\n};\n\nexport default ErrorMonitorService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/providers/AIProviderClient.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Interfaz base para los clientes de proveedores de IA\nimport { \n/**\n * Permite implementar diferentes proveedores manteniendo una interfaz común\n */\nexport interface AIProviderClient {\n  /**\n   * Identificador único del proveedor\n   */\n  readonly id: string;\n\n  /**\n   * Nombre del proveedor\n   */\n  readonly name: string;\n\n  /**\n   * Costo por consulta en USD\n   */\n  readonly costPerQuery: number;\n\n  /**\n   * Lista de capacidades del proveedor\n   */\n  readonly capabilities: string[];\n\n  /**\n   * Procesa una consulta y devuelve una respuesta\n   * @param query Consulta a procesar\n   * @returns Respuesta de la IA\n   */\n  processQuery(query: AIQuery): Promise<AIResponse>;\n\n  /**\n   * Verifica si el cliente está listo para procesar consultas\n   */\n  isReady(): boolean;\n\n  /**\n   * Estima el costo de una consulta basado en su tamaño\n   * @param query Consulta a estimar\n   * @returns Costo estimado en USD\n   */\n  estimateQueryCost(query: AIQuery): number;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/providers/MedPaLMProvider.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Interfaz para la respuesta de la API de Google MedPaLM\nimport { \n/**\n */\ninterface MedPaLMResponse {\n  predictions: Array<{\n    content: string;\n    safetyAttributes: {\n      categories: string[];\n      blocked: boolean;\n      scores: Record<string, number>;\n    };\n  }>;\n  metadata: {\n    tokenMetadata: {\n      inputTokenCount: number;\n      outputTokenCount: number;\n    };\n  };\n}\n\n/**\n * Cliente para el proveedor Google MedPaLM 2\n */\nexport class MedPaLMProvider implements AIProviderClient {\n  readonly id = 'med-palm-2';\n  readonly name = 'Med-PaLM 2';\n  readonly costPerQuery = 0.05;\n  readonly capabilities = [\n    'emr-analysis',\n    'clinical-evidence',\n    'treatment-patterns',\n  ];\n\n  private readonly apiKey: string;\n  private readonly projectId: string;\n  private readonly location: string;\n  private readonly modelId: string;\n  private readonly logger = new Logger('MedPaLMProvider');\n\n  constructor(config: {\n    apiKey: string;\n    projectId: string;\n    location?: string;\n    modelId?: string;\n  }) {\n    this.apiKey = config.apiKey;\n    this.projectId = config.projectId;\n    this.location = config.location ?? 'us-central1';\n    this.modelId = config.modelId ?? 'medpalm2';\n\n    if (!this.apiKey || !this.projectId) {\n      this.logger.error('Google API key or project ID not provided');\n    }\n  }\n\n  isReady(): boolean {\n    return !!this.apiKey && !!this.projectId;\n  }\n\n  estimateQueryCost(query: AIQuery): number {\n    // Estimación básica basada en la longitud de la consulta\n\n    const notesLength =\n      query.unstructuredNotes?.reduce(\n        (acc, note) => acc + note.content.length,\n        0\n      ) ?? 0;\n    const contextLength = query.context?.data\n      ? JSON.stringify(query.context.data).length\n      : 0;\n\n    // Aproximación: 4 caracteres = 1 token\n\n    // Precios aproximados: $0.01 por 1K tokens de entrada, $0.04 por 1K tokens de salida\n\n    // Asumiendo que la salida es 1/3 de la entrada\n\n    return inputCost + outputCost;\n  }\n\n  async processQuery(query: AIQuery): Promise<AIResponse> {\n    if (!this.isReady()) {\n      throw new Error('MedPaLM provider is not configured correctly');\n    }\n\n    try {\n      this.logger.debug('Processing query with MedPaLM', {\n        queryType: query.context?.type,\n      });\n\n      // Preparar el prompt\n\n      // Realizar la llamada a la API de Google\n\n      // Procesar la respuesta\n      return this.processResponse(response);\n    } catch (error) {\n      this.logger.error('Error processing query with MedPaLM', { error });\n      throw new Error(\n        `Error al procesar consulta con MedPaLM: ${(error as Error).message}`\n      );\n    }\n  }\n\n  private buildPrompt(query: AIQuery): string {\n    let prompt = `Como asistente médico especializado, analiza la siguiente información y proporciona:\n- Una respuesta detallada a la consulta\n- Un nivel de confianza numérico entre 0.0 y 1.0\n- Una organización temporal de eventos médicos relevantes\n- Insights clínicos destacables\n- Recomendaciones basadas en los datos\n\nFormatea tu respuesta como un objeto JSON con las siguientes claves:\n- \"answer\": string con tu respuesta principal\n- \"confidence\": número entre 0 y 1\n- \"timeline\": array de objetos con \"date\" y \"events\" (cada evento con \"type\", \"description\", \"source\" y \"confidence\")\n- \"insights\": array de objetos con \"type\", \"description\", \"severity\", \"evidence\" y opcionalmente \"recommendation\"\n- \"recommendations\": array de objetos con \"type\", \"description\", \"priority\" y \"evidence\"\n\nConsulta del usuario: ${query.query}\n`;\n\n    // Añadir contexto si existe\n    if (query.context?.data) {\n      prompt += `\\n\\nContexto del EMR:\\n${JSON.stringify(query.context.data, null, 2)}`;\n    }\n\n    // Añadir notas no estructuradas si existen\n    if (query.unstructuredNotes && query.unstructuredNotes.length > 0) {\n      prompt += `\\n\\nNotas médicas para analizar:`;\n      query.unstructuredNotes.forEach((note, index) => {\n        prompt += `\\n\\nNota ${index + 1} (${note.type}, ${note.timestamp}):\\n${note.content}`;\n      });\n    }\n\n    return prompt;\n  }\n\n  private async callMedPaLM(prompt: string): Promise<MedPaLMResponse> {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        instances: [{ prompt: prompt }],\n        parameters: {\n          temperature: 0.2,\n          maxOutputTokens: 2048,\n          candidateCount: 1,\n        },\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = (await response.json()) as {\n        error?: { message?: string };\n      };\n      throw new Error(\n        `Google API error: ${errorData.error?.message ?? 'Unknown error'}`\n      );\n    }\n\n    return (await response.json()) as MedPaLMResponse;\n  }\n\n  private processResponse(medpalmResponse: MedPaLMResponse): AIResponse {\n    try {\n      // Extraer el contenido de la respuesta\n\n      if (!content) {\n        throw new Error('No content in MedPaLM response');\n      }\n\n      // Encontrar y parsear el JSON dentro del texto\n\n      if (!jsonMatch) {\n        throw new Error('No JSON found in MedPaLM response');\n      }\n\n      // Parsear el JSON\n      const parsedResponse = JSON.parse(jsonMatch[0]) as {\n        answer?: string;\n        confidence?: number;\n        timeline?: Array<{\n          date: string;\n          events: Array<{\n            type: string;\n            description: string;\n            source: string;\n            confidence: number;\n          }>;\n        }>;\n        insights?: Array<{\n          type: string;\n          description: string;\n          severity: string;\n          evidence: string | string[];\n          recommendation?: string;\n        }>;\n        recommendations?: Array<{\n          type: string;\n          description: string;\n          priority: string;\n          evidence: string[];\n        }>;\n      };\n\n      // Construir la respuesta estructurada\n      const aiResponse: AIResponse = {\n        answer: parsedResponse.answer ?? 'No se pudo generar una respuesta',\n        confidence: parsedResponse.confidence ?? 0.5,\n      };\n\n      // Añadir timeline si existe\n      if (parsedResponse.timeline) {\n        aiResponse.timeline = parsedResponse.timeline;\n      }\n\n      // Añadir insights si existen\n      if (parsedResponse.insights) {\n        aiResponse.insights = parsedResponse.insights.map((insight) => ({\n          type: insight.type as InsightType,\n          description: insight.description,\n          severity: insight.severity as 'high' | 'medium' | 'low',\n          evidence: Array.isArray(insight.evidence)\n            ? insight.evidence\n            : [insight.evidence],\n          recommendation: insight.recommendation,\n        }));\n      }\n\n      // Añadir recomendaciones si existen\n      if (parsedResponse.recommendations) {\n        aiResponse.recommendations = parsedResponse.recommendations.map(\n          (rec) => ({\n            type: rec.type as\n              | 'medication'\n              | 'test'\n              | 'follow-up'\n              | 'alert'\n              | 'referral',\n            description: rec.description,\n            priority: rec.priority as 'high' | 'medium' | 'low',\n            evidence: rec.evidence,\n          })\n        );\n      }\n\n      return aiResponse;\n    } catch (error) {\n      this.logger.error('Error processing MedPaLM response', { error });\n      // Devolver una respuesta mínima en caso de error\n      return {\n        answer: 'Error al procesar la respuesta de la IA',\n        confidence: 0.1,\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/providers/OpenAIProvider.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Interfaz para la respuesta de la API de OpenAI\nimport { \n/**\n */\ninterface OpenAIResponse {\n  id: string;\n  object: string;\n  created: number;\n  model: string;\n  choices: Array<{\n    index: number;\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\n/**\n * Cliente para el proveedor OpenAI (GPT-4)\n */\nexport class OpenAIProvider implements AIProviderClient {\n  readonly id = 'gpt-4-medical';\n  readonly name = 'GPT-4 Medical';\n  readonly costPerQuery = 0.03;\n  readonly capabilities = [\n    'emr-analysis',\n    'timeline-organization',\n    'insight-detection',\n  ];\n\n  private readonly apiKey: string;\n  private readonly baseUrl: string;\n  private readonly modelName: string;\n  private readonly logger = new Logger('OpenAIProvider');\n\n  constructor(config: {\n    apiKey: string;\n    baseUrl?: string;\n    modelName?: string;\n  }) {\n    this.apiKey = config.apiKey;\n    this.baseUrl = config.baseUrl ?? 'https://api.openai.com/v1';\n    this.modelName = config.modelName ?? 'gpt-4-turbo';\n\n    if (!this.apiKey) {\n      this.logger.error('OpenAI API key not provided');\n    }\n  }\n\n  isReady(): boolean {\n    return !!this.apiKey;\n  }\n\n  estimateQueryCost(query: AIQuery): number {\n    // Estimación básica basada en la longitud de la consulta\n    // En una implementación real, se calcularía basado en tokens\n\n    const notesLength =\n      query.unstructuredNotes?.reduce(\n        (acc, note) => acc + note.content.length,\n        0\n      ) ?? 0;\n    const contextLength = query.context?.data\n      ? JSON.stringify(query.context.data).length\n      : 0;\n\n    // Aproximación: 4 caracteres = 1 token\n\n    // Precios aproximados: $0.01 por 1K tokens de entrada, $0.03 por 1K tokens de salida\n\n    // Asumiendo que la salida es 1/3 de la entrada\n\n    return inputCost + outputCost;\n  }\n\n  async processQuery(query: AIQuery): Promise<AIResponse> {\n    if (!this.isReady()) {\n      throw new Error('OpenAI provider is not configured correctly');\n    }\n\n    try {\n      this.logger.debug('Processing query with OpenAI', {\n        queryType: query.context?.type,\n      });\n\n      // Construir el prompt basado en el tipo de consulta\n\n      // Realizar la llamada a la API de OpenAI\n\n      // Procesar la respuesta\n      return this.processResponse(response);\n    } catch (error) {\n      this.logger.error('Error processing query with OpenAI', { error });\n      throw new Error(\n        `Error al procesar consulta con OpenAI: ${(error as Error).message}`\n      );\n    }\n  }\n\n  private buildMessages(\n    query: AIQuery\n  ): Array<{ role: string; content: string }> {\n    // Mensaje del sistema con instrucciones\n    messages.push({\n      role: 'system',\n      content: this.getSystemPrompt(query),\n    });\n\n    // Mensaje del usuario con la consulta\n    messages.push({\n      role: 'user',\n      content: this.getUserPrompt(query),\n    });\n\n    return messages;\n  }\n\n  private getSystemPrompt(query: AIQuery): string {\n    let prompt = `Eres un asistente médico avanzado especializado en analizar información médica y proporcionar insights clínicamente relevantes.\nDebes analizar los datos proporcionados y generar una respuesta estructurada que incluya:\n1. Una respuesta detallada a la consulta\n2. Nivel de confianza en tu respuesta (0.0-1.0)\n3. Organización temporal de eventos médicos relevantes\n4. Insights clínicos destacables\n5. Recomendaciones basadas en los datos\n\nUsa un formato JSON válido con las siguientes claves: \"answer\", \"confidence\", \"timeline\", \"insights\", \"recommendations\".\nPara la clave \"timeline\", cada elemento debe incluir \"date\" y \"events\", donde cada evento tiene \"type\", \"description\", \"source\" y \"confidence\".\nPara la clave \"insights\", cada elemento debe incluir \"type\", \"description\", \"severity\", \"evidence\" y opcionalmente \"recommendation\".`;\n\n    // Personalizar según el tipo de consulta\n    if (query.context?.type === 'emr') {\n      prompt += `\\nEstás analizando datos estructurados de un expediente médico electrónico (EMR).`;\n    } else if (query.unstructuredNotes && query.unstructuredNotes.length > 0) {\n      prompt += `\\nEstás analizando notas médicas no estructuradas. Extrae la información relevante y organízala de forma coherente.`;\n    }\n\n    return prompt;\n  }\n\n  private getUserPrompt(query: AIQuery): string {\n    let prompt = query.query;\n\n    // Añadir contexto si existe\n    if (query.context?.data) {\n      prompt += `\\n\\nContexto del EMR:\\n${JSON.stringify(query.context.data, null, 2)}`;\n    }\n\n    // Añadir notas no estructuradas si existen\n    if (query.unstructuredNotes && query.unstructuredNotes.length > 0) {\n      prompt += `\\n\\nNotas médicas para analizar:`;\n      query.unstructuredNotes.forEach((note, index) => {\n        prompt += `\\n\\nNota ${index + 1} (${note.type}, ${note.timestamp}):\\n${note.content}`;\n      });\n    }\n\n    return prompt;\n  }\n\n  private async callOpenAI(\n    messages: Array<{ role: string; content: string }>\n  ): Promise<OpenAIResponse> {\n    const response = await fetch(`${this.baseUrl}/chat/completions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      body: JSON.stringify({\n        model: this.modelName,\n        messages: messages,\n        temperature: 0.2, // Baja temperatura para respuestas más precisas\n        max_tokens: 2000, // Limitar la longitud de la respuesta\n        response_format: { type: 'json_object' }, // Forzar formato JSON\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = (await response.json()) as {\n        error?: { message?: string };\n      };\n      throw new Error(\n        `OpenAI API error: ${errorData.error?.message ?? 'Unknown error'}`\n      );\n    }\n\n    return (await response.json()) as OpenAIResponse;\n  }\n\n  private processResponse(openAIResponse: OpenAIResponse): AIResponse {\n    try {\n      // Extraer el contenido de la respuesta\n\n      if (!content) {\n        throw new Error('No content in OpenAI response');\n      }\n\n      // Parsear el JSON\n      const parsedResponse = JSON.parse(content) as {\n        answer?: string;\n        confidence?: number;\n        timeline?: Array<{\n          date: string;\n          events: Array<{\n            type: string;\n            description: string;\n            source: string;\n            confidence: number;\n          }>;\n        }>;\n        insights?: Array<{\n          type: string;\n          description: string;\n          severity: string;\n          evidence: string | string[];\n          recommendation?: string;\n        }>;\n        recommendations?: Array<{\n          type: string;\n          description: string;\n          priority: string;\n          evidence: string[];\n        }>;\n      };\n\n      // Construir la respuesta estructurada\n      const aiResponse: AIResponse = {\n        answer: parsedResponse.answer ?? 'No se pudo generar una respuesta',\n        confidence: parsedResponse.confidence ?? 0.5,\n      };\n\n      // Añadir timeline si existe\n      if (parsedResponse.timeline) {\n        aiResponse.timeline = parsedResponse.timeline;\n      }\n\n      // Añadir insights si existen\n      if (parsedResponse.insights) {\n        aiResponse.insights = parsedResponse.insights.map((insight) => ({\n          type: insight.type as InsightType,\n          description: insight.description,\n          severity: insight.severity as 'high' | 'medium' | 'low',\n          evidence: Array.isArray(insight.evidence)\n            ? insight.evidence\n            : [insight.evidence],\n          recommendation: insight.recommendation,\n        }));\n      }\n\n      // Añadir recomendaciones si existen\n      if (parsedResponse.recommendations) {\n        aiResponse.recommendations = parsedResponse.recommendations.map(\n          (rec) => ({\n            type: rec.type as\n              | 'medication'\n              | 'test'\n              | 'follow-up'\n              | 'alert'\n              | 'referral',\n            description: rec.description,\n            priority: rec.priority as 'high' | 'medium' | 'low',\n            evidence: rec.evidence,\n          })\n        );\n      }\n\n      return aiResponse;\n    } catch (error) {\n      this.logger.error('Error processing OpenAI response', { error });\n      // Devolver una respuesta mínima en caso de error\n      return {\n        answer: 'Error al procesar la respuesta de la IA',\n        confidence: 0.1,\n      };\n    }\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/providers/index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from '../../../lib/api'\nimport { \nexport { OpenAIProvider, MedPaLMProvider };\nexport type { AIProviderClient };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/ai/types.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n */\nimport { \n/**\n * Tipos e interfaces comunes para el sistema de IA\n\nexport type NoteType =\n  | 'consultation'\n  | 'emergency'\n  | 'follow-up'\n  | 'lab-result'\n  | 'prescription'\n  | 'other';\nexport type InsightType =\n  | 'timeline-gap'\n  | 'treatment-pattern'\n  | 'risk-factor'\n  | 'contradiction'\n  | 'missing-follow-up'\n  | 'vital-signs-trend'\n  | 'symptom-pattern';\nexport type SeverityType = 'high' | 'medium' | 'low';\nexport type RecommendationType =\n  | 'medication'\n  | 'test'\n  | 'follow-up'\n  | 'alert'\n  | 'referral';\n\nexport interface VitalSigns {\n  temperature?: number;\n  bloodPressure?: string;\n  heartRate?: number;\n  oxygenSaturation?: number;\n  respiratoryRate?: number;\n  painLevel?: number;\n}\n\nexport interface EMRData {\n  patientId: string;\n  medicalHistory: Array<{\n    date: string;\n    type: string;\n    description: string;\n  }>;\n  medications: Array<{\n    name: string;\n    dosage: string;\n    frequency: string;\n  }>;\n  vitalSigns: Array<{\n    date: string;\n    values: Omit<VitalSigns, 'respiratoryRate' | 'painLevel'>;\n  }>;\n}\n\nexport interface UnstructuredNote {\n  content: string;\n  timestamp: string;\n  author: string;\n  type: NoteType;\n  symptoms?: string[];\n  medications?: string[];\n  vitalSigns?: VitalSigns;\n  diagnosis?: string;\n  treatment?: string;\n  followUp?: {\n    date: string;\n    notes: string;\n  };\n}\n\nexport interface AIProvider {\n  id: string;\n  name: string;\n  costPerQuery: number;\n  capabilities: string[];\n}\n\nexport interface AIQuery {\n  query: string;\n  patientId?: string;\n  providerId?: string;\n  context?: {\n    type: 'emr' | 'appointment' | 'general';\n    data?: EMRData;\n  };\n  unstructuredNotes?: UnstructuredNote[];\n}\n\nexport interface TimelineEvent {\n  type: string;\n  description: string;\n  source: string;\n  confidence: number;\n}\n\nexport interface Insight {\n  type: InsightType;\n  description: string;\n  severity: SeverityType;\n  evidence: string[];\n  recommendation?: string;\n}\n\nexport interface Recommendation {\n  type: RecommendationType;\n  description: string;\n  priority: SeverityType;\n  evidence: string[];\n}\n\nexport interface AIResponse {\n  answer: string;\n  confidence: number;\n  sources?: string[];\n  timeline?: Array<{\n    date: string;\n    events: TimelineEvent[];\n  }>;\n  insights?: Insight[];\n  recommendations?: Recommendation[];\n}\n\nexport interface CachedResponse {\n  query: string;\n  response: AIResponse;\n  timestamp: number;\n  id: string;\n  queryHash: string;\n  lastAccessed: string;\n  accessCount: number;\n  metadata?: {\n    provider: string;\n    cost: number;\n    processingTime: number;\n  };\n}\n\n/**\n * Interfaz para métodos internos de AIService (usado para testing)\n */\nexport interface AIServiceInternals {\n  getEMRData: (patientId: string) => Promise<EMRData>;\n  executeWithRetry: <T>(\n    operation: () => Promise<T>,\n    retries?: number\n  ) => Promise<T>;\n  generateSimulatedResponse: (query: AIQuery) => Promise<AIResponse>;\n  detectContradictions: (\n    emrData: EMRData,\n    notes: UnstructuredNote[]\n  ) => Insight[];\n  generateInsights: (response: AIResponse, emrData: EMRData) => Insight[];\n  generateRecommendations: (response: AIResponse) => Recommendation[];\n}\n\n/**\n * Nivel de evidencia clínica\n */\nexport type EvidenceLevel = 'alto' | 'moderado' | 'bajo';\n\n/**\n * Fuente de evidencia clínica\n */\nexport interface EvidenceSource {\n  title: string;\n  authors?: string[];\n  journal?: string;\n  year?: number;\n  doi?: string;\n  url?: string;\n  summary: string;\n  evidenceLevel: EvidenceLevel;\n}\n\n/**\n * Tratamiento sugerido basado en evidencia\n */\nexport interface TreatmentSuggestion {\n  name: string;\n  type: 'medicamento' | 'terapia' | 'procedimiento' | 'cambio-estilo-vida';\n  description: string;\n  dosage?: string;\n  frequency?: string;\n  duration?: string;\n  contraindications?: string[];\n  sideEffects?: string[];\n  expectedOutcomes?: string[];\n  evidenceLevel: EvidenceLevel;\n  evidenceSources: EvidenceSource[];\n  confidence: number;\n  alternativeTreatments?: string[];\n}\n\n/**\n * Pregunta sugerida durante la consulta\n */\nexport interface SuggestedQuestion {\n  question: string;\n  context: string;\n  importance: 'alta' | 'media' | 'baja';\n  rationale: string;\n  expectedInsights: string[];\n  differentialDiagnosis?: string[];\n}\n\n/**\n * Tipos de etapas de la consulta médica\n */\nexport type ConsultationStage =\n  | 'anamnesis'\n  | 'examen-fisico'\n  | 'diagnostico'\n  | 'plan-tratamiento'\n  | 'educacion-paciente'\n  | 'seguimiento';\n\n/**\n * Ampliar AIResponse para incluir sugerencias de tratamiento y preguntas\n */\nexport interface EnhancedAIResponse extends AIResponse {\n  treatmentSuggestions?: TreatmentSuggestion[];\n  suggestedQuestions?: SuggestedQuestion[];\n  currentStage?: ConsultationStage;\n  nextSteps?: string[];\n  educationalContent?: {\n    forPatient?: string;\n    forProvider?: string;\n    resources?: Array<{ title: string; url: string }>;\n  };\n}\n\n/**\n * Contexto de la consulta actual\n */\nexport interface ConsultationContext {\n  patientId: string;\n  providerId: string;\n  specialtyArea: string;\n  reasonForVisit: string;\n  isFirstVisit: boolean;\n  previousDiagnoses?: string[];\n  currentMedications?: string[];\n  stage: ConsultationStage;\n  timeElapsed?: number; // Tiempo transcurrido en la consulta (minutos)\n  timeRemaining?: number; // Tiempo restante estimado (minutos)\n}\n\n/**\n * Ampliar AIQuery para incluir contexto de consulta\n */\nexport interface EnhancedAIQuery extends AIQuery {\n  consultationContext?: ConsultationContext;\n  requiresTreatmentSuggestions?: boolean;\n  requiresQuestionSuggestions?: boolean;\n  requiresEducationalContent?: boolean;\n  evidenceLevelThreshold?: EvidenceLevel;\n}\n\n/**\n * Datos del paciente\n */\nexport interface PatientData {\n  id: string;\n  personalInfo: {\n    fullName: string;\n    firstName: string;\n    lastName: string;\n    dateOfBirth: string;\n    age: number;\n    gender: string;\n    documentId?: string;\n    contactInfo?: {\n      email?: string;\n      phone?: string;\n      address?: string;\n    };\n  };\n  medicalHistory?: {\n    allergies?: string[];\n    chronicConditions?: string[];\n    medications?: Array<{\n      name: string;\n      dosage: string;\n      frequency: string;\n      startDate?: string;\n      endDate?: string;\n    }>;\n    surgeries?: Array<{\n      procedure: string;\n      date: string;\n      notes?: string;\n    }>;\n    familyHistory?: Record<string, string[]>;\n  };\n  vitalSigns?: {\n    height?: number;\n    weight?: number;\n    bmi?: number;\n    bloodPressure?: {\n      systolic: number;\n      diastolic: number;\n    };\n    heartRate?: number;\n    respiratoryRate?: number;\n    temperature?: number;\n    oxygenSaturation?: number;\n    lastUpdated?: string;\n  };\n  consultations?: Array<{\n    id: string;\n    date: string;\n    provider: string;\n    specialty?: string;\n    reason: string;\n    diagnosis?: string[];\n    notes: string;\n    treatmentPlan?: string;\n    followUp?: string;\n  }>;\n  labResults?: Array<{\n    id: string;\n    date: string;\n    type: string;\n    results: Record<\n      string,\n      {\n        value: string | number;\n        unit?: string;\n        referenceRange?: string;\n        isAbnormal?: boolean;\n      }\n    >;\n  }>;\n  currentTreatments?: Array<{\n    name: string;\n    type: string;\n    startDate: string;\n    endDate?: string;\n    status: string;\n    notes?: string;\n  }>;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/api.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ';' expected.","line":2,"column":18,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  headers: {\n    'Content-Type': 'application/json',\n  },\n})\nimport.meta.env.VITE_API_URL || 'http://localhost:3000/api',\nconst api = axios.create({\n\n// Interceptor para manejar errores\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Manejar token expirado\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(new Error(error.message || 'Error en la respuesta'));\n  }\n);\n\n// Interceptor para agregar token\napi.interceptors.request.use(\n  (config) => {\n\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(new Error(error.message || 'Error en la solicitud'))\n);\n\nexport { api };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/appointmentService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  Appointment,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  AppointmentFilters,\nimport { \n  AppointmentListResponse,\n} from '../types/appointment';\n\nclass AppointmentService {\n  async getAppointments(\n    filters: AppointmentFilters = {}\n  ): Promise<AppointmentListResponse> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n      throw error;\n    }\n  }\n\n  async getAppointment(id: string): Promise<Appointment> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching appointment:', error);\n      throw error;\n    }\n  }\n\n  async createAppointment(\n    appointment: Omit<Appointment, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<Appointment> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error creating appointment:', error);\n      throw error;\n    }\n  }\n\n  async updateAppointment(\n    id: string,\n    appointment: Partial<Appointment>\n  ): Promise<Appointment> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error updating appointment:', error);\n      throw error;\n    }\n  }\n\n  async deleteAppointment(id: string): Promise<void> {\n    try {\n      await api.delete(`/appointments/${id}`);\n    } catch (error) {\n      console.error('Error deleting appointment:', error);\n      throw error;\n    }\n  }\n\n  async updateAppointmentStatus(\n    id: string,\n    status: Appointment['status']\n  ): Promise<Appointment> {\n    try {\n      const response = await api.patch(`/appointments/${id}/status`, {\n        status,\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error updating appointment status:', error);\n      throw error;\n    }\n  }\n}\n\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/auth.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  email: string\nimport { \nexport interface LoginCredentials {\n  password: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n}\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'doctor' | 'nurse';\n}\n\nclass AuthService {\n  private static readonly TOKEN_KEY = 'auth_token';\n  private static readonly USER_KEY = 'auth_user';\n\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    try {\n\n      this.setToken(response.data.token);\n      this.setUser(response.data.user);\n      return response.data;\n    } catch {\n      throw new Error('Error al iniciar sesión');\n    }\n  }\n\n  logout(): void {\n    localStorage.removeItem(AuthService.TOKEN_KEY);\n    localStorage.removeItem(AuthService.USER_KEY);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(AuthService.TOKEN_KEY);\n  }\n\n  getUser(): User | null {\n\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getToken();\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem(AuthService.TOKEN_KEY, token);\n  }\n\n  private setUser(user: User): void {\n    localStorage.setItem(AuthService.USER_KEY, JSON.stringify(user));\n  }\n}\n\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/dashboard.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  async getMetrics(): Promise<DashboardMetrics> {\nimport { \nexport const dashboardService = {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching dashboard metrics:', error);\n      throw error;\n    }\n  },\n\n  async getHealthScore(): Promise<number> {\n    try {\n      const response = await api.get<{ score: number }>(\n        '/dashboard/health-score'\n      );\n      return response.data.score;\n    } catch (error) {\n      console.error('Error fetching health score:', error);\n      throw error;\n    }\n  },\n\n  async getActivityHistory(): Promise<Array<{ date: string; value: number }>> {\n    try {\n       value: number }>>(\n        '/dashboard/activity-history'\n      );\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching activity history:', error);\n      throw error;\n    }\n  },\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/dashboardService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  async getMetrics(): Promise<DashboardMetrics> {\nimport { \nclass DashboardService {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching dashboard metrics:', error);\n      throw error;\n    }\n  }\n\n  async getRecentActivities() {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recent activities:', error);\n      throw error;\n    }\n  }\n}\n\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/emr/EMRAdapter.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Interfaz base para adaptadores de EMR\nimport { \n/**\n * Define las operaciones comunes para interactuar con sistemas de Registros Médicos Electrónicos (EMR)\n */\nexport interface EMRAdapter {\n  /**\n   * Nombre identificador del sistema EMR\n   */\n  readonly name: string;\n\n  /**\n   * Verifica la conexión con el sistema EMR\n   * @returns Promise que resuelve a true si la conexión es exitosa\n   */\n  testConnection(): Promise<boolean>;\n\n  /**\n   * Obtiene los datos completos de un paciente\n   * @param patientId Identificador del paciente en el sistema EMR\n   * @returns Promise con los datos del paciente estructurados\n   */\n  getPatientData(patientId: string): Promise<PatientData>;\n\n  /**\n   * Busca pacientes según criterios específicos\n   * @param query Objeto con criterios de búsqueda\n   * @param limit Límite de resultados a devolver\n   * @returns Promise con array de resultados de pacientes\n   */\n  searchPatients(\n    query: EMRSearchQuery,\n    limit?: number\n  ): Promise<EMRPatientSearchResult[]>;\n\n  /**\n   * Obtiene el historial médico de un paciente\n   * @param patientId Identificador del paciente\n   * @param options Opciones para filtrar el historial\n   * @returns Promise con el historial médico estructurado\n   */\n  getPatientHistory(\n    patientId: string,\n    options?: EMRHistoryOptions\n  ): Promise<EMRPatientHistory>;\n\n  /**\n   * Guarda una nueva consulta en el historial del paciente\n   * @param consultation Datos de la consulta a guardar\n   * @returns Promise con el ID de la consulta guardada\n   */\n  saveConsultation(consultation: EMRConsultation): Promise<string>;\n\n  /**\n   * Actualiza una consulta existente\n   * @param consultationId ID de la consulta a actualizar\n   * @param updates Campos a actualizar\n   * @returns Promise que resuelve a true si la actualización fue exitosa\n   */\n  updateConsultation(\n    consultationId: string,\n    updates: Partial<EMRConsultation>\n  ): Promise<boolean>;\n\n  /**\n   * Registra un nuevo tratamiento para un paciente\n   * @param treatment Datos del tratamiento a registrar\n   * @returns Promise con el ID del tratamiento registrado\n   */\n  registerTreatment(treatment: EMRTreatment): Promise<string>;\n\n  /**\n   * Obtiene métricas de salud del paciente\n   * @param patientId ID del paciente\n   * @param metricTypes Tipos de métricas a obtener\n   * @returns Promise con las métricas de salud solicitadas\n   */\n  getPatientMetrics(\n    patientId: string,\n    metricTypes: string[]\n  ): Promise<EMRPatientMetrics>;\n}\n\n/**\n * Opciones para filtrar el historial médico\n */\nexport interface EMRHistoryOptions {\n  startDate?: Date;\n  endDate?: Date;\n  includeConsultations?: boolean;\n  includeTreatments?: boolean;\n  includeLabResults?: boolean;\n  includeImaging?: boolean;\n  includeDiagnoses?: boolean;\n  specialty?: string;\n}\n\n/**\n * Consulta para buscar pacientes\n */\nexport interface EMRSearchQuery {\n  name?: string;\n  documentId?: string;\n  email?: string;\n  phone?: string;\n  criteria?: string | Record<string, unknown>;\n}\n\n/**\n * Resultado de búsqueda de pacientes\n */\nexport interface EMRPatientSearchResult {\n  id: string;\n  fullName: string;\n  name: string;\n  birthDate: string;\n  gender: string;\n  mrn: string;\n  documentId?: string;\n  contactInfo?: {\n    email?: string;\n    phone?: string;\n    address?: string;\n  };\n  lastVisit?: Date;\n}\n\n/**\n * Historia clínica del paciente\n */\nexport interface EMRPatientHistory {\n  patientId: string;\n  consultations: EMRConsultation[];\n  treatments: EMRTreatment[];\n  labResults?: EMRLabResult[];\n  imagingResults?: EMRImagingResult[];\n  diagnoses?: EMRDiagnosis[];\n  allergies?: string[];\n  medications?: EMRMedication[];\n}\n\n/**\n * Consulta médica\n */\nexport interface EMRConsultation {\n  id: string;\n  patientId: string;\n  providerId: string;\n  date: Date;\n  reason: string;\n  notes: string;\n  specialty?: string;\n  diagnoses?: EMRDiagnosis[];\n  followUpDate?: Date;\n}\n\n/**\n * Tratamiento médico\n */\nexport interface EMRTreatment {\n  id?: string;\n  patientId: string;\n  providerId: string;\n  startDate: Date;\n  endDate?: Date;\n  name: string;\n  type: 'medication' | 'procedure' | 'therapy' | 'lifestyle' | 'other';\n  description: string;\n  dosage?: string;\n  frequency?: string;\n  instructions?: string;\n  status: 'active' | 'completed' | 'cancelled' | 'scheduled';\n  consultationId?: string;\n}\n\n/**\n * Métricas de salud del paciente\n */\nexport interface EMRPatientMetrics {\n  patientId: string;\n  vitalSigns?: EMRVitalSigns[];\n  labValues?: Record<string, number[]>;\n  weightHistory?: Array<{ date: Date; value: number }>;\n  heightHistory?: Array<{ date: Date; value: number }>;\n  bloodPressureHistory?: Array<{\n    date: Date;\n    systolic: number;\n    diastolic: number;\n  }>;\n  glucoseHistory?: Array<{\n    date: Date;\n    value: number;\n    type: 'fasting' | 'postprandial' | 'random';\n  }>;\n  [key: string]: unknown;\n}\n\n/**\n * Signos vitales\n */\nexport interface EMRVitalSigns {\n  id: string;\n  patientId: string;\n  date: Date;\n  temperature?: number;\n  heartRate?: number;\n  bloodPressure?: {\n    systolic: number;\n    diastolic: number;\n    unit: string;\n  };\n  respiratoryRate?: number;\n  oxygenSaturation?: number;\n  notes?: string;\n}\n\n/**\n * Resultado de laboratorio\n */\nexport interface EMRLabResult {\n  id: string;\n  patientId: string;\n  date: Date;\n  type: string;\n  orderedBy: string;\n  results: Record<\n    string,\n    {\n      value: string | number;\n      unit?: string;\n      normalRange?: string;\n      isAbnormal?: boolean;\n    }\n  >;\n  notes?: string;\n}\n\n/**\n * Resultado de imagen diagnóstica\n */\nexport interface EMRImagingResult {\n  id: string;\n  patientId: string;\n  date: Date;\n  type: string;\n  region: string;\n  findings: string;\n  conclusion: string;\n  imagePath?: string;\n  orderedBy: string;\n}\n\n/**\n * Diagnóstico médico\n */\nexport interface EMRDiagnosis {\n  id: string;\n  patientId: string;\n  date: Date;\n  code: string;\n  system: 'ICD-10' | 'ICD-11' | 'SNOMED-CT' | 'other';\n  description: string;\n  status: 'active' | 'resolved' | 'recurrent' | 'chronic' | 'suspected';\n  type: string;\n  notes?: string;\n}\n\n/**\n * Medicación\n */\nexport interface EMRMedication {\n  id: string;\n  patientId: string;\n  name: string;\n  dosage: string;\n  frequency: string;\n  startDate: Date;\n  endDate?: Date;\n  prescriber: string;\n  pharmacy?: string;\n  status: 'active' | 'discontinued' | 'completed';\n  notes?: string;\n}\n\n/**\n * Alergia\n */\nexport interface EMRAllergy {\n  id: string;\n  patientId: string;\n  allergen: string;\n  reaction?: string;\n  severity: 'mild' | 'moderate' | 'severe';\n  status: 'active' | 'resolved' | 'refuted';\n  onsetDate?: Date;\n  notes?: string;\n}\n\n/**\n * Vacuna\n */\nexport interface EMRImmunization {\n  id: string;\n  patientId: string;\n  vaccine: string;\n  date: Date;\n  provider: string;\n  lotNumber?: string;\n  manufacturer?: string;\n  location?: string;\n  notes?: string;\n}\n\n/**\n * Procedimiento\n */\nexport interface EMRProcedure {\n  id: string;\n  patientId: string;\n  name: string;\n  date: Date;\n  provider: string;\n  location?: string;\n  status: 'scheduled' | 'completed' | 'cancelled';\n  notes?: string;\n  results?: string;\n}\n\n/**\n * Documento\n */\nexport interface EMRDocument {\n  id: string;\n  patientId: string;\n  type: string;\n  date: Date;\n  author: string;\n  title: string;\n  content: string;\n  status: 'draft' | 'final' | 'amended';\n  notes?: string;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/emr/EMRAdapterFactory.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Tipo para las opciones de configuración de adaptadores EMR\nimport { \n/**\n */\nexport type EMRAdapterConfig = {\n  apiKey?: string;\n  baseUrl?: string;\n  apiUrl?: string;\n  username?: string;\n  password?: string;\n  clientId?: string;\n  clientSecret?: string;\n  clinicId?: string;\n  timeout?: number;\n  [key: string]: unknown;\n};\n\n/**\n * Fábrica para crear y gestionar adaptadores EMR\n */\nexport class EMRAdapterFactory {\n  private static readonly adapters: Map<string, EMRAdapter> = new Map();\n  private static readonly logger: Logger = new Logger('EMRAdapterFactory');\n  private static initialized = false;\n\n  /**\n   * Inicializa la fábrica con los adaptadores por defecto\n   */\n  private static initializeDefaultAdapters(): void {\n    if (EMRAdapterFactory.initialized) {\n      return;\n    }\n\n    // Registrar adaptador genérico\n    EMRAdapterFactory.registerAdapter('GENERIC', new GenericEMRAdapter());\n\n    // Indicar que ya hemos inicializado\n    EMRAdapterFactory.initialized = true;\n    EMRAdapterFactory.logger.info(\n      'Fábrica de adaptadores EMR inicializada con adaptadores por defecto'\n    );\n  }\n\n  /**\n   * Registra un adaptador EMR en la fábrica\n   */\n  public static registerAdapter(name: string, adapter: EMRAdapter): void {\n    EMRAdapterFactory.adapters.set(name.toUpperCase(), adapter);\n    EMRAdapterFactory.logger.info(`Adaptador EMR registrado: ${name}`);\n  }\n\n  /**\n   * Obtiene un adaptador EMR por su nombre\n   * Si se proporcionan opciones de configuración, crea una nueva instancia\n   */\n  public static getAdapter(\n    name: string,\n    config?: EMRAdapterConfig\n  ): EMRAdapter {\n    EMRAdapterFactory.initializeDefaultAdapters();\n\n    // Si hay configuración, crear una nueva instancia\n    if (config) {\n      return EMRAdapterFactory.createAdapter(adapterName, config);\n    }\n\n    // Si no, obtener la instancia existente\n\n    if (!adapter) {\n      EMRAdapterFactory.logger.error(`Adaptador EMR no encontrado: ${name}`);\n      throw new Error(`No se encontró un adaptador EMR para: ${name}`);\n    }\n\n    return adapter;\n  }\n\n  /**\n   * Crea una nueva instancia de un adaptador EMR con la configuración proporcionada\n   */\n  private static createAdapter(\n    name: string,\n    config: EMRAdapterConfig\n  ): EMRAdapter {\n    EMRAdapterFactory.logger.info(`Creando adaptador EMR: ${name}`);\n\n    switch (name) {\n      case 'EPIC':\n        if (!config.baseUrl) {\n          throw new Error('Se requiere baseUrl para el adaptador EPIC');\n        }\n        return new EPICAdapter({\n          apiBaseUrl: config.baseUrl,\n          apiKey: config.apiKey,\n          clientId: config.clientId,\n          clientSecret: config.clientSecret,\n        });\n\n      case 'OSCAR':\n        if (\n          !config.baseUrl ||\n          !config.username ||\n          !config.password ||\n          !config.clinicId\n        ) {\n          throw new Error(\n            'Se requiere baseUrl, username, password y clinicId para el adaptador OSCAR'\n          );\n        }\n        return new OSCARAdapter({\n          baseUrl: config.baseUrl,\n          username: config.username,\n          password: config.password,\n          clinicId: config.clinicId,\n        });\n\n      case 'CLINICCLOUD':\n        if (!config.apiUrl || !config.apiKey || !config.clinicId) {\n          throw new Error(\n            'Se requiere apiUrl, apiKey y clinicId para el adaptador ClinicCloud'\n          );\n        }\n        return new ClinicCloudAdapter({\n          apiUrl: config.apiUrl,\n          apiKey: config.apiKey,\n          clinicId: config.clinicId,\n          clientId: config.clientId,\n          clientSecret: config.clientSecret,\n        });\n\n      case 'GENERIC':\n        return new GenericEMRAdapter();\n\n      default:\n        EMRAdapterFactory.logger.error(\n          `Adaptador EMR no implementado: ${name}`\n        );\n        throw new Error(\n          `No existe implementación para el adaptador EMR: ${name}`\n        );\n    }\n  }\n\n  /**\n   * Obtiene una lista de los nombres de adaptadores disponibles\n   */\n  public static getAvailableAdapters(): string[] {\n    EMRAdapterFactory.initializeDefaultAdapters();\n    return Array.from(EMRAdapterFactory.adapters.keys());\n  }\n\n  /**\n   * Obtiene un mapa con información sobre los adaptadores disponibles\n   */\n  public static getAdaptersInfo(): Array<{\n    id: string;\n    name: string;\n    description: string;\n  }> {\n    EMRAdapterFactory.initializeDefaultAdapters();\n\n    return [\n      {\n        id: 'GENERIC',\n        name: 'Adaptador Genérico',\n        description: 'Adaptador de demostración para pruebas y desarrollo',\n      },\n      {\n        id: 'EPIC',\n        name: 'EPIC EMR',\n        description:\n          'Adaptador para EPIC, uno de los sistemas EMR más utilizados en EE.UU. y Canadá',\n      },\n      {\n        id: 'OSCAR',\n        name: 'OSCAR EMR',\n        description:\n          'Adaptador para OSCAR, sistema EMR de código abierto popular en Canadá',\n      },\n      {\n        id: 'CLINICCLOUD',\n        name: 'ClinicCloud',\n        description:\n          'Adaptador para ClinicCloud, uno de los sistemas EMR más utilizados en España',\n      },\n    ];\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/emr/EMRConfigService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Servicio para gestionar la configuración de adaptadores EMR\nimport { \n/**\n */\nexport class EMRConfigService {\n  private static instance: EMRConfigService;\n  private readonly logger: Logger;\n  private currentAdapter: EMRAdapter | null = null;\n  private currentAdapterName: string | null = null;\n  private currentConfig: EMRAdapterConfig | null = null;\n\n  private constructor() {\n    this.logger = new Logger('EMRConfigService');\n    this.loadSavedConfig();\n  }\n\n  /**\n   * Obtiene la instancia singleton del servicio\n   */\n  public static getInstance(): EMRConfigService {\n    if (!EMRConfigService.instance) {\n      EMRConfigService.instance = new EMRConfigService();\n    }\n    return EMRConfigService.instance;\n  }\n\n  /**\n   * Obtiene el adaptador EMR actual\n   * Si no hay ninguno configurado, devuelve el adaptador genérico\n   */\n  public getAdapter(): EMRAdapter {\n    if (!this.currentAdapter) {\n      this.logger.info(\n        'No hay adaptador configurado, usando adaptador genérico'\n      );\n      this.currentAdapter = EMRAdapterFactory.getAdapter('GENERIC');\n      this.currentAdapterName = 'GENERIC';\n    }\n    return this.currentAdapter;\n  }\n\n  /**\n   * Obtiene el nombre del adaptador EMR actual\n   */\n  public getCurrentAdapterName(): string {\n    return this.currentAdapterName ?? 'GENERIC';\n  }\n\n  /**\n   * Obtiene la configuración actual del adaptador EMR\n   */\n  public getCurrentConfig(): EMRAdapterConfig | null {\n    return this.currentConfig;\n  }\n\n  /**\n   * Configura un adaptador EMR\n   * @param adapterName Nombre del adaptador a configurar\n   * @param config Configuración del adaptador\n   */\n  public async configureAdapter(\n    adapterName: string,\n    config: EMRAdapterConfig\n  ): Promise<boolean> {\n    try {\n      this.logger.info(`Configurando adaptador EMR: ${adapterName}`);\n\n      // Obtener una instancia del adaptador con la configuración proporcionada\n\n      // Probar la conexión\n\n      if (!isConnected) {\n        this.logger.error(\n          `Error al probar conexión con adaptador: ${adapterName}`\n        );\n        return false;\n      }\n\n      // Guardar adaptador y configuración\n      this.currentAdapter = adapter;\n      this.currentAdapterName = adapterName;\n      this.currentConfig = config;\n\n      // Persistir configuración\n      this.saveConfig();\n\n      this.logger.info(\n        `Adaptador EMR configurado exitosamente: ${adapterName}`\n      );\n      return true;\n    } catch (error) {\n      this.logger.error(`Error al configurar adaptador EMR: ${adapterName}`, {\n        error,\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Carga la configuración guardada\n   */\n  private loadSavedConfig(): void {\n    try {\n      // En una aplicación real, podríamos cargar esto desde una API o base de datos\n\n      if (savedAdapterName && savedConfig) {\n        this.logger.info(\n          `Cargando configuración guardada para: ${savedAdapterName}`\n        );\n\n        // Obtener adaptador con la configuración guardada\n        this.currentAdapter = EMRAdapterFactory.getAdapter(\n          savedAdapterName,\n          config\n        );\n        this.currentAdapterName = savedAdapterName;\n        this.currentConfig = config;\n      } else {\n        this.logger.info('No hay configuración guardada');\n      }\n    } catch (error) {\n      this.logger.error('Error al cargar configuración guardada', { error });\n    }\n  }\n\n  /**\n   * Guarda la configuración actual\n   */\n  private saveConfig(): void {\n    if (this.currentAdapterName && this.currentConfig) {\n      localStorage.setItem('emrAdapterName', this.currentAdapterName);\n      localStorage.setItem(\n        'emrAdapterConfig',\n        JSON.stringify(this.currentConfig)\n      );\n      this.logger.info(\n        `Configuración guardada para: ${this.currentAdapterName}`\n      );\n    }\n  }\n\n  /**\n   * Resetea la configuración actual\n   */\n  public resetConfig(): void {\n    localStorage.removeItem('emrAdapterName');\n    localStorage.removeItem('emrAdapterConfig');\n    this.currentAdapter = null;\n    this.currentAdapterName = null;\n    this.currentConfig = null;\n    this.logger.info('Configuración reseteada');\n  }\n\n  /**\n   * Verifica si hay un adaptador configurado\n   */\n  public hasConfiguredAdapter(): boolean {\n    return (\n      this.currentAdapter !== null && this.currentAdapterName !== 'GENERIC'\n    );\n  }\n}\n\nexport default EMRConfigService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/emr/implementations/ClinicCloudAdapter.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  EMRAdapter,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  EMRConsultation,\nimport { \n  EMRDiagnosis,\n  EMRHistoryOptions,\n  EMRPatientHistory,\n  EMRPatientMetrics,\n  EMRPatientSearchResult,\n  EMRSearchQuery,\n  EMRTreatment,\n} from '../EMRAdapter';\n\n/**\n * Tipos específicos para ClinicCloud EMR\n */\n// Tipo para datos del paciente en ClinicCloud\ninterface ClinicCloudPaciente {\n  id: string;\n  nombre: string;\n  apellidos: string;\n  genero: string;\n  fechaNacimiento: string;\n  email?: string;\n  telefono?: string;\n  direccion?: string;\n  ciudad?: string;\n  provincia?: string;\n  codigoPostal?: string;\n  numeroTarjetaSanitaria?: string;\n}\n\n// Tipo para respuesta de búsqueda de pacientes\ninterface ClinicCloudSearchResult {\n  pacientes: ClinicCloudPaciente[];\n  totalResultados: number;\n}\n\n// Tipo para consulta médica en ClinicCloud\ninterface ClinicCloudConsulta {\n  id: string;\n  pacienteId: string;\n  fecha: string;\n  profesional: string;\n  motivo: string;\n  contenido: string;\n  diagnosticos?: ClinicCloudDiagnostico[];\n  proximaCita?: string;\n  especialidad?: string;\n  signosVitales?: {\n    temperatura?: number;\n    frecuenciaCardiaca?: number;\n    frecuenciaRespiratoria?: number;\n    tensionSistolica?: number;\n    tensionDiastolica?: number;\n    saturacion?: number;\n    peso?: number;\n    altura?: number;\n  };\n}\n\n// Tipo para respuesta de consultas\ninterface ClinicCloudConsultaResult {\n  consultas: ClinicCloudConsulta[];\n}\n\n// Tipo para tratamientos en ClinicCloud\ninterface ClinicCloudTratamiento {\n  id: string;\n  pacienteId: string;\n  nombreMedicamento: string;\n  dosis: string;\n  frecuencia: string;\n  fechaInicio: string;\n  fechaFin?: string;\n  estado: string;\n  instrucciones?: string;\n  recetadoPor: string;\n  tipo: string;\n  descripcion?: string;\n  consultaId?: string;\n}\n\n// Tipo para respuesta de tratamientos\ninterface ClinicCloudTratamientoResult {\n  tratamientos: ClinicCloudTratamiento[];\n}\n\n// Tipo para diagnósticos en ClinicCloud\ninterface ClinicCloudDiagnostico {\n  id: string;\n  codigo: string;\n  sistema: string;\n  descripcion?: string;\n  fecha: string;\n  estado: string;\n  cronica: boolean;\n  notas?: string;\n}\n\n// Tipo para respuesta de diagnósticos\ninterface ClinicCloudDiagnosticoResult {\n  diagnosticos: ClinicCloudDiagnostico[];\n}\n\n// Tipo para resultados de laboratorio en ClinicCloud\ninterface ClinicCloudResultadoLab {\n  id: string;\n  fecha: string;\n  tipo: string;\n  resultados: {\n    [key: string]: {\n      valor: string | number;\n      unidad?: string;\n      rangoNormal?: string;\n      anormal?: boolean;\n    };\n  };\n  solicitadoPor: string;\n  notas?: string;\n}\n\n// Tipo para respuesta de laboratorio\ninterface ClinicCloudLabResult {\n  resultados: ClinicCloudResultadoLab[];\n}\n\n// Tipo para métricas en ClinicCloud\ninterface ClinicCloudMetrica {\n  id: string;\n  pacienteId: string;\n  fecha: string;\n  tipo: string;\n  valor: string | number;\n  unidad?: string;\n  sistolica?: number;\n  diastolica?: number;\n}\n\n// Tipo para respuesta de métricas\ninterface ClinicCloudMetricaResult {\n  metricas: ClinicCloudMetrica[];\n}\n\n// Tipo para datos adicionales en ClinicCloud\ninterface ClinicCloudAdditionalData {\n  alergias: {\n    id: string;\n    descripcion?: string;\n    reaccion?: string;\n    gravedad?: string;\n  }[];\n  condiciones: ClinicCloudDiagnostico[];\n  vacunas: {\n    id: string;\n    nombre: string;\n    fecha: string;\n    lote?: string;\n    zona?: string;\n  }[];\n}\n\n/**\n * Interfaz para el resultado del historial médico\n */\ninterface MedicalHistoryResult {\n  alergias: Array<{\n    id: string;\n    descripcion?: string;\n    reaccion?: string;\n    gravedad?: string;\n  }>;\n  condicionesCronicas: Array<{\n    id: string;\n    codigo: string;\n    sistema: string;\n    descripcion?: string;\n    fecha: string;\n    estado: string;\n    cronica: boolean;\n    notas?: string;\n  }>;\n}\n\n/**\n * Interfaz para resultados de laboratorio\n */\ninterface LabResultData {\n  id: string;\n  patientId: string;\n  date: Date;\n  category: string;\n  name: string;\n  results: Record<\n    string,\n    {\n      value: string | number;\n      unit?: string;\n      normalRange?: string;\n      isAbnormal?: boolean;\n    }\n  >;\n  units: string;\n  range?: string;\n  abnormal?: boolean;\n  notes: string;\n}\n\n/**\n * Interfaz para consulta de ClinicCloud\n */\ninterface ClinicCloudConsulta {\n  id: string;\n  pacienteId: string;\n  medicoId: string;\n  fecha: string;\n  motivo: string;\n  notas: string;\n  especialidad?: string;\n  citaProxima?: string;\n  diagnosticos?: Array<{\n    codigo: string;\n    sistema: string;\n    descripcion?: string;\n  }>;\n  signosVitales?: {\n    temperatura?: number;\n    frecuenciaCardiaca?: number;\n    frecuenciaRespiratoria?: number;\n    tensionSistolica?: number;\n    tensionDiastolica?: number;\n    saturacion?: number;\n    peso?: number;\n    altura?: number;\n  };\n}\n\n/**\n * Interfaz para tratamiento de ClinicCloud\n */\ninterface ClinicCloudTratamiento {\n  pacienteId: string;\n  medicoId: string;\n  fechaInicio: string;\n  fechaFin?: string | null;\n  nombre: string;\n  tipo: string;\n  descripcion?: string;\n  dosis: string | null;\n  frecuencia: string | null;\n  instrucciones?: string | null;\n  estado: string;\n  consultaId?: string | null;\n}\n\n/**\n * Interfaz para métricas de ClinicCloud\n */\ninterface ClinicCloudMetrica {\n  id: string;\n  pacienteId: string;\n  fecha: string;\n  tipo: string;\n  valor: string | number;\n  unidad?: string;\n  sistolica?: number;\n  diastolica?: number;\n}\n\n/**\n * Interfaz para resultado de métricas de ClinicCloud\n */\ninterface ClinicCloudMetricaResult {\n  metricas: ClinicCloudMetrica[];\n}\n\ninterface ClinicCloudConfig {\n  apiUrl: string;\n  apiKey: string;\n  clinicId: string;\n}\n\ninterface ClinicCloudPatient {\n  id: string;\n  nombre: string;\n  apellido: string;\n  fechaNacimiento: string;\n  genero: string;\n  documento: string;\n  email?: string;\n  telefono?: string;\n  direccion?: string;\n  ultimaVisita?: string;\n}\n\ninterface ClinicCloudDiagnostico {\n  id: string;\n  pacienteId: string;\n  fecha: string;\n  codigo: string;\n  sistema: \"ICD-10\" | \"ICD-11\" | \"SNOMED-CT\" | \"other\";\n  descripcion: string;\n  estado: \"active\" | \"resolved\" | \"recurrent\" | \"chronic\" | \"suspected\";\n  tipo: string;\n  notas?: string;\n}\n\n/**\n * Adaptador para integración con ClinicCloud\n * ClinicCloud es uno de los sistemas EMR más utilizados en España\n * Especializado en clínicas privadas y consultas médicas particulares\n */\nexport class ClinicCloudAdapter implements EMRAdapter {\n  public readonly name = 'ClinicCloud Adapter';\n  private readonly logger: Logger;\n  private readonly apiUrl: string;\n  private readonly apiKey: string;\n  private readonly clinicId: string;\n  private readonly clientId: string;\n  private readonly clientSecret: string;\n  private accessToken: string | null = null;\n  private tokenExpiration: Date | null = null;\n  private config: ClinicCloudConfig;\n  private httpService: HttpService;\n\n  constructor(config: ClinicCloudConfig, httpService: HttpService) {\n    this.logger = new Logger('ClinicCloudAdapter');\n    this.apiUrl = config.apiUrl;\n    this.apiKey = config.apiKey;\n    this.clinicId = config.clinicId;\n    this.clientId = config.clientId ?? '';\n    this.clientSecret = config.clientSecret ?? '';\n    this.config = config;\n    this.httpService = httpService;\n\n    this.logger.info('Inicializado adaptador para ClinicCloud', {\n      apiUrl: this.apiUrl,\n      clinicId: this.clinicId,\n    });\n  }\n\n  /**\n   * Prueba la conexión con ClinicCloud\n   */\n  public async testConnection(): Promise<boolean> {\n    try {\n      this.logger.info('Probando conexión con ClinicCloud');\n\n      // Intentar obtener un token para verificar credenciales\n      await this.getAccessToken();\n\n      // Realizar una petición de prueba adicional\n      await this.fetchData('/ping');\n\n      return true;\n    } catch (error) {\n      this.logger.error('Error al conectar con ClinicCloud', { error });\n      return false;\n    }\n  }\n\n  /**\n   * Obtiene los datos de un paciente de ClinicCloud\n   */\n  public async getPatientData(patientId: string): Promise<PatientData> {\n    try {\n      this.logger.info('Obteniendo datos del paciente desde ClinicCloud', {\n        patientId,\n      });\n\n      // Obtener datos básicos del paciente\n\n\n      // Obtener información de historial médico\n\n      const condiciones = await this.fetchData(\n        `/pacientes/${patientId}/condiciones`\n      );\n\n      // Convertir datos al formato PatientData de la aplicación\n      return this.convertPatientData(pacientData, {\n        alergias,\n        condiciones,\n      });\n    } catch (error) {\n      this.logger.error(\n        'Error al obtener datos del paciente desde ClinicCloud',\n        { error, patientId }\n      );\n      throw new Error(\n        `Error al obtener datos del paciente: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Busca pacientes en ClinicCloud según criterios\n   */\n  public async searchPatients(query: string): Promise<EMRPatientSearchResult[]> {\n    try {\n      const response = await this.httpService.get<ClinicCloudPatient[]>(\n        `${this.apiUrl}/pacientes/buscar`,\n        {\n          params: { q: query },\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'X-Clinic-ID': this.clinicId\n          }\n        }\n      );\n\n      return response.map(patient => ({\n        id: patient.id,\n        fullName: `${patient.nombre} ${patient.apellido}`,\n        name: `${patient.nombre} ${patient.apellido}`,\n        birthDate: patient.fechaNacimiento,\n        gender: patient.genero,\n        mrn: patient.id,\n        documentId: patient.documento,\n        contactInfo: {\n          email: patient.email,\n          phone: patient.telefono,\n          address: patient.direccion\n        },\n        lastVisit: patient.ultimaVisita ? new Date(patient.ultimaVisita) : undefined\n      }));\n    } catch (error) {\n      console.error('Error buscando pacientes en ClinicCloud:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtiene el historial médico del paciente de ClinicCloud\n   */\n  public async getPatientHistory(patientId: string): Promise<EMRConsultation[]> {\n    try {\n      const response = await this.httpService.get<ClinicCloudConsulta[]>(\n        `${this.apiUrl}/pacientes/${patientId}/historial`,\n        {\n          headers: {\n            'Authorization': `Bearer ${this.apiKey}`,\n            'X-Clinic-ID': this.clinicId\n          }\n        }\n      );\n\n      return response.map(consulta => ({\n        id: consulta.id,\n        patientId: consulta.pacienteId,\n        providerId: consulta.medicoId,\n        date: new Date(consulta.fecha),\n        reason: consulta.motivo,\n        notes: consulta.notas,\n        specialty: consulta.especialidad,\n        diagnoses: consulta.diagnosticos?.map(d => ({\n          id: d.id,\n          patientId: d.pacienteId,\n          date: new Date(d.fecha),\n          code: d.codigo,\n          system: d.sistema,\n          description: d.descripcion,\n          status: d.estado,\n          type: d.tipo,\n          notes: d.notas\n        })),\n        followUpDate: consulta.citaProxima ? new Date(consulta.citaProxima) : undefined\n      }));\n    } catch (error) {\n      console.error('Error obteniendo historial del paciente en ClinicCloud:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Guarda una nueva consulta en ClinicCloud\n   */\n  public async saveConsultation(\n    consultation: EMRConsultation\n  ): Promise<string> {\n    try {\n      this.logger.info('Guardando consulta en ClinicCloud', {\n        patientId: consultation.patientId,\n      });\n\n      // Convertir consulta al formato de ClinicCloud\n\n\n      // Enviar la consulta a ClinicCloud\n\n\n      // Extraer el ID de la consulta creada\n\n      if (!consultaId) {\n        throw new Error('No se recibió un ID de consulta válido');\n      }\n\n      this.logger.info('Consulta guardada exitosamente en ClinicCloud', {\n        consultaId,\n      });\n      return consultaId.toString();\n    } catch (error) {\n      this.logger.error('Error al guardar consulta en ClinicCloud', {\n        error,\n        consultation,\n      });\n      throw new Error(`Error al guardar consulta: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Actualiza una consulta existente en ClinicCloud\n   */\n  public async updateConsultation(\n    consultationId: string,\n    updates: Partial<EMRConsultation>\n  ): Promise<boolean> {\n    try {\n      this.logger.info('Actualizando consulta en ClinicCloud', {\n        consultationId,\n      });\n\n      // Obtener la consulta existente\n      const consultaExistente = await this.fetchData(\n        `/consultas/${consultationId}`\n      );\n\n      // Aplicar actualizaciones\n      const consultaActualizada = this.applyConsultaUpdates(\n        consultaExistente,\n        updates\n      );\n\n      // Enviar los cambios\n      await this.putData(`/consultas/${consultationId}`, consultaActualizada);\n\n      this.logger.info('Consulta actualizada exitosamente en ClinicCloud', {\n        consultationId,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error('Error al actualizar consulta en ClinicCloud', {\n        error,\n        consultationId,\n      });\n      throw new Error(\n        `Error al actualizar consulta: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Registra un nuevo tratamiento en ClinicCloud\n   */\n  public async registerTreatment(treatment: EMRTreatment): Promise<string> {\n    try {\n      this.logger.info('Registrando tratamiento en ClinicCloud', {\n        patientId: treatment.patientId,\n      });\n\n      // Convertir tratamiento al formato de ClinicCloud\n\n\n      // Enviar el tratamiento a ClinicCloud\n      let endpoint;\n      if (treatment.type === 'medication') {\n        endpoint = '/tratamientos/medicamentos';\n      } else if (treatment.type === 'procedure') {\n        endpoint = '/tratamientos/procedimientos';\n      } else {\n        endpoint = '/tratamientos/otros';\n      }\n\n\n\n      // Extraer el ID del tratamiento creado\n\n      if (!tratamientoId) {\n        throw new Error('No se recibió un ID de tratamiento válido');\n      }\n\n      this.logger.info('Tratamiento registrado exitosamente en ClinicCloud', {\n        tratamientoId,\n      });\n      return tratamientoId.toString();\n    } catch (error) {\n      this.logger.error('Error al registrar tratamiento en ClinicCloud', {\n        error,\n        treatment,\n      });\n      throw new Error(\n        `Error al registrar tratamiento: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Obtiene métricas del paciente de ClinicCloud\n   */\n  public async getPatientMetrics(\n    patientId: string,\n    metricTypes: string[]\n  ): Promise<EMRPatientMetrics> {\n    try {\n      this.logger.info('Obteniendo métricas del paciente desde ClinicCloud', {\n        patientId,\n        metricTypes,\n      });\n\n      const metrics: EMRPatientMetrics = {\n        patientId,\n        weight: [],\n        height: [],\n        bloodPressure: [],\n        glucose: [],\n        cholesterol: [],\n      };\n\n      // Mapear tipos de métricas a los nombres utilizados en ClinicCloud\n      const metricMap: Record<string, string> = {\n        weight: 'peso',\n        height: 'altura',\n        bloodPressure: 'tension',\n        glucose: 'glucosa',\n        cholesterol: 'colesterol',\n      };\n\n      // Filtrar los tipos solicitados que tienen equivalente en ClinicCloud\n      const metricTypesToQuery = metricTypes\n        .filter((type) => metricMap[type])\n        .map((type) => metricMap[type]);\n\n      if (metricTypesToQuery.length > 0) {\n        // Obtener todas las métricas en una sola petición\n\n        const metricas = await this.fetchData(\n          `/pacientes/${patientId}/metricas?tipos=${tiposParam}`\n        );\n\n        // Procesar cada tipo de métrica\n        this.processMetricas(metricas, metrics);\n      }\n\n      return metrics;\n    } catch (error) {\n      this.logger.error(\n        'Error al obtener métricas del paciente desde ClinicCloud',\n        { error, patientId }\n      );\n      throw new Error(\n        `Error al obtener métricas del paciente: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Obtiene un token de acceso para ClinicCloud\n   */\n  private async getAccessToken(): Promise<string> {\n    try {\n      // Si tenemos un token válido, lo devolvemos\n      if (\n        this.accessToken &&\n        this.tokenExpiration &&\n        new Date() < this.tokenExpiration\n      ) {\n        return this.accessToken;\n      }\n\n      // Si no, debemos obtener uno nuevo\n      let token;\n\n      // ClinicCloud soporta dos métodos de autenticación:\n      // 1. API Key simple\n      // 2. OAuth2 con flujo de client credentials\n      if (this.clientId && this.clientSecret) {\n        // Usar OAuth2\n        const response = await fetch(`${this.apiUrl}/oauth/token`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'X-Clinic-Id': this.clinicId,\n          },\n          body: new URLSearchParams({\n            grant_type: 'client_credentials',\n            client_id: this.clientId,\n            client_secret: this.clientSecret,\n            scope: 'read write',\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\n            `Error en autenticación OAuth2: ${response.status} ${response.statusText}`\n          );\n        }\n\n\n        token = data.access_token;\n\n        // Guardar token y calcular expiración (típicamente 1 hora)\n        this.accessToken = token;\n        this.tokenExpiration = new Date(Date.now() + data.expires_in * 1000);\n      } else {\n        // Usar API Key simple\n        token = this.apiKey;\n\n        // En este caso, no hay expiración (el API key es de larga duración)\n        this.accessToken = token;\n        this.tokenExpiration = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000); // 1 año\n      }\n\n      this.logger.info('Token de acceso ClinicCloud obtenido exitosamente');\n      return token;\n    } catch (error) {\n      this.logger.error('Error al obtener token de acceso ClinicCloud', {\n        error,\n      });\n      throw new Error(\n        `Error al obtener token de acceso: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Realiza una petición GET autenticada a ClinicCloud\n   */\n  private async fetchData(\n    endpoint: string\n  ): Promise<\n    | ClinicCloudSearchResult\n    | ClinicCloudConsultaResult\n    | ClinicCloudTratamientoResult\n    | ClinicCloudLabResult\n    | ClinicCloudDiagnosticoResult\n    | ClinicCloudMetricaResult\n  > {\n    try {\n\n\n      const response = await fetch(`${this.apiUrl}${endpoint}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'X-Clinic-Id': this.clinicId,\n          Accept: 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error en petición: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al recuperar datos de ClinicCloud', {\n        error,\n        endpoint,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Realiza una petición POST autenticada a ClinicCloud\n   */\n  private async postData(\n    endpoint: string,\n    data: Record<string, string | number | boolean | object>\n  ): Promise<{ id: string; exito: boolean; mensaje?: string }> {\n    try {\n\n\n      const response = await fetch(`${this.apiUrl}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'X-Clinic-Id': this.clinicId,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error en petición POST: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al enviar datos a ClinicCloud', {\n        error,\n        endpoint,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Realiza una petición PUT autenticada a ClinicCloud\n   */\n  private async putData(\n    endpoint: string,\n    data: Record<string, string | number | boolean | object>\n  ): Promise<{ exito: boolean; mensaje?: string }> {\n    try {\n\n\n      const response = await fetch(`${this.apiUrl}${endpoint}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'X-Clinic-Id': this.clinicId,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error en petición PUT: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al actualizar datos en ClinicCloud', {\n        error,\n        endpoint,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Convierte datos de ClinicCloud al formato PatientData de la aplicación\n   */\n  private convertPatientData(\n    pacienteData: ClinicCloudPaciente,\n    additionalData: ClinicCloudAdditionalData\n  ): PatientData {\n    try {\n      // Extraer información básica\n      const fullName =\n        `${pacienteData.nombre ?? ''} ${pacienteData.apellidos ?? ''}`.trim();\n\n\n\n\n\n      // Obtener información de contacto\n\n\n\n\n      // Construir el objeto PatientData\n      const patientData: PatientData = {\n        id: pacienteData.id,\n        personalInfo: {\n          fullName,\n          firstName,\n          lastName,\n          dateOfBirth: dob,\n          age,\n          gender: this.mapGender(pacienteData.genero),\n          documentId: pacienteData.numeroTarjetaSanitaria ?? '',\n          contactInfo: {\n            email,\n            phone,\n            address,\n          },\n        },\n        medicalHistory: this.extractMedicalHistory(additionalData),\n        vitalSigns: {},\n      };\n\n      return patientData;\n    } catch (error) {\n      this.logger.error('Error al convertir datos de paciente de ClinicCloud', {\n        error,\n      });\n      throw new Error('Error al procesar datos del paciente');\n    }\n  }\n\n  /**\n   * Mapea el género del formato de ClinicCloud al formato de la aplicación\n   */\n  private mapGender(gender: string): string {\n    switch (gender?.toLowerCase()) {\n      case 'hombre':\n      case 'h':\n      case 'masculino':\n        return 'masculino';\n      case 'mujer':\n      case 'm':\n      case 'femenino':\n        return 'femenino';\n      default:\n        return 'otro';\n    }\n  }\n\n  /**\n   * Calcula la edad a partir de la fecha de nacimiento\n   */\n  private calculateAge(dateOfBirth: string): number {\n    if (!dateOfBirth) return 0;\n\n\n\n    let age = today.getFullYear() - birthDate.getFullYear();\n\n\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n\n    return age;\n  }\n\n  /**\n   * Extrae el historial médico de los datos adicionales\n   */\n  private extractMedicalHistory(\n    data: ClinicCloudAdditionalData\n  ): MedicalHistoryResult {\n    // Extraer alergias\n    const alergias = data.alergias.map((alergia) => ({\n      id: alergia.id,\n      descripcion: alergia.descripcion,\n      reaccion: alergia.reaccion,\n      gravedad: alergia.gravedad,\n    }));\n\n    // Extraer condiciones crónicas\n    const condiciones = data.condiciones\n      .filter((condicion) => condicion.cronica)\n      .map((condicion) => ({\n        id: condicion.id,\n        codigo: condicion.codigo,\n        sistema: condicion.sistema,\n        descripcion: condicion.descripcion,\n        fecha: condicion.fecha,\n        estado: condicion.estado,\n        cronica: condicion.cronica,\n        notas: condicion.notas,\n      }));\n\n    return {\n      alergias,\n      condicionesCronicas: condiciones,\n    };\n  }\n\n  /**\n   * Formatea una fecha para las peticiones a ClinicCloud\n   */\n  private formatDate(date: Date): string {\n    return date.toISOString().split('T')[0];\n  }\n\n  /**\n   * Construye parámetros de búsqueda para ClinicCloud\n   */\n  private buildSearchParams(query: EMRSearchQuery): URLSearchParams {\n\n\n    if (query.name) {\n      if (query.name.includes(' ')) {\n\n        params.append('nombre', nameParts[0]);\n        params.append('apellidos', nameParts.slice(1).join(' '));\n      } else {\n        params.append('q', query.name);\n      }\n    }\n\n    if (query.documentId) {\n      params.append('documento', query.documentId);\n    }\n\n    if (query.email) {\n      params.append('email', query.email);\n    }\n\n    if (query.phone) {\n      params.append('telefono', query.phone);\n    }\n\n    if (query.criteria && typeof query.criteria === 'string') {\n      params.append('q', query.criteria);\n    }\n\n    return params;\n  }\n\n  /**\n   * Convierte resultados de búsqueda de ClinicCloud al formato de la aplicación\n   */\n  private convertSearchResults(\n    results: ClinicCloudSearchResult\n  ): EMRPatientSearchResult[] {\n    if (!results || !results.pacientes) return [];\n\n    return results.pacientes.map((paciente) => {\n      const fullName =\n        `${paciente.nombre ?? ''} ${paciente.apellidos ?? ''}`.trim();\n      return {\n        id: paciente.id,\n        fullName: fullName,\n        name: fullName,\n        birthDate: paciente.fechaNacimiento ?? '',\n        gender: paciente.genero ?? 'desconocido',\n        mrn: paciente.numeroTarjetaSanitaria ?? '',\n        dateOfBirth: paciente.fechaNacimiento\n          ? new Date(paciente.fechaNacimiento)\n          : undefined,\n        documentId: paciente.numeroTarjetaSanitaria,\n        contactInfo: {\n          email: paciente.email,\n          phone: paciente.telefono,\n        },\n      };\n    });\n  }\n\n  /**\n   * Convierte consultas de ClinicCloud al formato de la aplicación\n   */\n  private convertConsultas(\n    consultas: ClinicCloudConsultaResult\n  ): EMRConsultation[] {\n    if (!consultas || !consultas.consultas) return [];\n\n    return consultas.consultas.map((consulta) => ({\n      id: consulta.id,\n      patientId: consulta.pacienteId,\n      providerId: consulta.profesional,\n      date: new Date(consulta.fecha),\n      reason: consulta.motivo,\n      notes: consulta.contenido,\n      diagnoses: consulta.diagnosticos.map((diag) => ({\n        code: diag.codigo,\n        system: diag.sistema as 'ICD-10' | 'ICD-11' | 'SNOMED-CT' | 'other',\n        description: diag.descripcion,\n        date: new Date(diag.fecha),\n        status: diag.estado === 'activo' ? 'active' : 'resolved',\n      })),\n      specialty: consulta.especialidad ?? '',\n      followUpDate: consulta.proximaCita\n        ? new Date(consulta.proximaCita)\n        : undefined,\n    }));\n  }\n\n  /**\n   * Convierte tratamientos de ClinicCloud al formato de la aplicación\n   */\n  private convertTratamientos(\n    tratamientos: ClinicCloudTratamientoResult\n  ): EMRTreatment[] {\n    if (!tratamientos || !tratamientos.tratamientos) return [];\n\n    return tratamientos.tratamientos.map((tratamiento) => ({\n      id: tratamiento.id,\n      patientId: tratamiento.pacienteId,\n      providerId: tratamiento.recetadoPor,\n      startDate: new Date(tratamiento.fechaInicio),\n      endDate: tratamiento.fechaFin\n        ? new Date(tratamiento.fechaFin)\n        : undefined,\n      name: tratamiento.nombreMedicamento,\n      type: this.mapTreatmentType(tratamiento.tipo),\n      description: tratamiento.descripcion || tratamiento.nombreMedicamento,\n      dosage: tratamiento.dosis ?? '',\n      frequency: tratamiento.frecuencia ?? '',\n      instructions: tratamiento.instrucciones || '',\n      status: this.mapTreatmentStatus(tratamiento.estado),\n      consultationId: tratamiento.consultaId,\n    }));\n  }\n\n  /**\n   * Mapea el tipo de tratamiento de ClinicCloud al formato de la aplicación\n   */\n  private mapTreatmentType(\n    type: string\n  ): 'medication' | 'procedure' | 'therapy' | 'lifestyle' | 'other' {\n    switch (type?.toLowerCase()) {\n      case 'medicamento':\n      case 'farmaco':\n        return 'medication';\n      case 'procedimiento':\n      case 'cirugia':\n        return 'procedure';\n      case 'terapia':\n      case 'fisioterapia':\n      case 'rehabilitacion':\n        return 'therapy';\n      case 'estilo de vida':\n      case 'dieta':\n      case 'ejercicio':\n        return 'lifestyle';\n      default:\n        return 'other';\n    }\n  }\n\n  /**\n   * Mapea el estado del tratamiento de ClinicCloud al formato de la aplicación\n   */\n  private mapTreatmentStatus(\n    status: string\n  ): 'active' | 'completed' | 'cancelled' | 'scheduled' {\n    switch (status?.toLowerCase()) {\n      case 'activo':\n        return 'active';\n      case 'completado':\n      case 'finalizado':\n        return 'completed';\n      case 'cancelado':\n        return 'cancelled';\n      case 'programado':\n      case 'pendiente':\n        return 'scheduled';\n      default:\n        return 'active';\n    }\n  }\n\n  /**\n   * Convierte resultados de laboratorio de ClinicCloud al formato de la aplicación\n   */\n  private convertLaboratorio(\n    laboratorio: ClinicCloudLabResult\n  ): LabResultData[] {\n    if (!laboratorio.resultados) return [];\n\n    return laboratorio.resultados.map((resultado) => ({\n      id: resultado.id,\n      patientId: resultado.pacienteId,\n      date: new Date(resultado.fecha),\n      category: 'laboratory',\n      name: resultado.tipo,\n      results: resultado.resultados,\n      units: resultado.unidad,\n      range: resultado.rangoNormal,\n      abnormal: resultado.anormal,\n      notes: resultado.notas ?? '',\n    }));\n  }\n\n  /**\n   * Convierte diagnósticos de ClinicCloud al formato de la aplicación\n   */\n  private convertDiagnosticos(\n    diagnosticos?: ClinicCloudDiagnosticoResult\n  ): EMRDiagnosis[] {\n    if (!diagnosticos?.diagnosticos) return [];\n\n    return diagnosticos.diagnosticos.map((diagnostico) => ({\n      id: diagnostico.id,\n      patientId: diagnostico.pacienteId,\n      date: new Date(diagnostico.fecha),\n      code: diagnostico.codigo ?? '',\n      system: diagnostico.sistema ?? 'CIE-10',\n      description: diagnostico.descripcion,\n      status: diagnostico.estado === 'activo' ? 'active' : 'resolved',\n      type: 'diagnosis',\n      notes: diagnostico.notas ?? '',\n    }));\n  }\n\n  /**\n   * Convierte una consulta al formato de ClinicCloud\n   */\n  private convertToClinicCloudConsulta(\n    consultation: EMRConsultation\n  ): ClinicCloudConsulta {\n    const consulta: ClinicCloudConsulta = {\n      id: consultation.id,\n      pacienteId: consultation.patientId,\n      medicoId: consultation.providerId,\n      fecha: this.formatDate(consultation.date),\n      motivo: consultation.reason,\n      notas: consultation.notes ?? '',\n      especialidad: consultation.specialty ?? '',\n    };\n\n    // Añadir fecha de próxima cita si existe\n    if (consultation.followUpDate) {\n      consulta.citaProxima = this.formatDate(consultation.followUpDate);\n    }\n\n    // Añadir diagnósticos si existen\n    if (consultation.diagnoses?.length > 0) {\n      consulta.diagnosticos = consultation.diagnoses.map((diag) => ({\n        codigo: diag.code,\n        sistema: diag.system,\n        descripcion: diag.description,\n      }));\n    }\n\n    // Añadir signos vitales si existen\n    if (consultation.vitalSigns) {\n      consulta.signosVitales = {\n        temperatura: consultation.vitalSigns.temperature,\n        frecuenciaCardiaca: consultation.vitalSigns.heartRate,\n        frecuenciaRespiratoria: consultation.vitalSigns.respiratoryRate,\n        tensionSistolica: consultation.vitalSigns.bloodPressureSystolic,\n        tensionDiastolica: consultation.vitalSigns.bloodPressureDiastolic,\n        saturacion: consultation.vitalSigns.oxygenSaturation,\n        peso: consultation.vitalSigns.weight,\n        altura: consultation.vitalSigns.height,\n      };\n    }\n\n    return consulta;\n  }\n\n  /**\n   * Aplica actualizaciones a una consulta existente\n   */\n  private applyConsultaUpdates(\n    consultaExistente: ClinicCloudConsulta,\n    updates: Partial<EMRConsultation>\n  ): ClinicCloudConsulta {\n\n\n    if (updates.reason) {\n      updatedConsulta.motivo = updates.reason;\n    }\n\n    if (updates.notes) {\n      updatedConsulta.notas = updates.notes;\n    }\n\n    if (updates.specialty) {\n      updatedConsulta.especialidad = updates.specialty;\n    }\n\n    if (updates.followUpDate) {\n      updatedConsulta.citaProxima = this.formatDate(updates.followUpDate);\n    }\n\n    return updatedConsulta;\n  }\n\n  /**\n   * Convierte un tratamiento al formato de ClinicCloud\n   */\n  private convertToClinicCloudTratamiento(\n    treatment: EMRTreatment\n  ): ClinicCloudTratamiento {\n    return {\n      pacienteId: treatment.patientId,\n      medicoId: treatment.providerId,\n      fechaInicio: this.formatDate(treatment.startDate),\n      fechaFin: treatment.endDate ? this.formatDate(treatment.endDate) : null,\n      nombre: treatment.name,\n      tipo: this.reverseMapTreatmentType(treatment.type),\n      descripcion: treatment.description,\n      dosis: treatment.dosage ?? null,\n      frecuencia: treatment.frequency ?? null,\n      instrucciones: treatment.instructions ?? null,\n      estado: this.reverseMapTreatmentStatus(treatment.status),\n      consultaId: treatment.consultationId ?? null,\n    };\n  }\n\n  /**\n   * Mapea el tipo de tratamiento del formato de la aplicación al de ClinicCloud\n   */\n  private reverseMapTreatmentType(type: string): string {\n    switch (type) {\n      case 'medication':\n        return 'medicamento';\n      case 'procedure':\n        return 'procedimiento';\n      case 'therapy':\n        return 'terapia';\n      case 'lifestyle':\n        return 'estilo de vida';\n      default:\n        return 'otro';\n    }\n  }\n\n  /**\n   * Mapea el estado del tratamiento del formato de la aplicación al de ClinicCloud\n   */\n  private reverseMapTreatmentStatus(status: string): string {\n    switch (status) {\n      case 'active':\n        return 'activo';\n      case 'completed':\n        return 'completado';\n      case 'cancelled':\n        return 'cancelado';\n      case 'scheduled':\n        return 'programado';\n      default:\n        return 'activo';\n    }\n  }\n\n  /**\n   * Procesa métricas del formato de ClinicCloud al formato de la aplicación\n   */\n  private processMetricas(\n    metricas: ClinicCloudMetricaResult,\n    metrics: EMRPatientMetrics\n  ): void {\n    if (!metricas?.metricas) return;\n\n    metricas.metricas.forEach((metrica: ClinicCloudMetrica) => {\n\n\n      switch (metrica.tipo.toLowerCase()) {\n        case 'peso':\n          metrics.weight.push({\n            date: fecha,\n            value: metrica.valor,\n            units: metrica.unidad || 'kg',\n          });\n          break;\n        case 'altura':\n          metrics.height.push({\n            date: fecha,\n            value: metrica.valor,\n            units: metrica.unidad || 'cm',\n          });\n          break;\n        case 'tension':\n          if (metrica.sistolica && metrica.diastolica) {\n            metrics.bloodPressure.push({\n              date: fecha,\n              systolic: metrica.sistolica,\n              diastolic: metrica.diastolica,\n              units: metrica.unidad || 'mmHg',\n            });\n          }\n          break;\n        case 'glucosa':\n          metrics.glucose.push({\n            date: fecha,\n            value: metrica.valor,\n            units: metrica.unidad || 'mg/dL',\n          });\n          break;\n        case 'colesterol':\n          metrics.cholesterol.push({\n            date: fecha,\n            value: metrica.valor,\n            units: metrica.unidad || 'mg/dL',\n          });\n          break;\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/emr/implementations/EPICAdapter.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  EMRAdapter,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  EMRConsultation,\nimport { \n  EMRDiagnosis,\n  EMRHistoryOptions,\n  EMRPatientHistory,\n  EMRPatientMetrics,\n  EMRPatientSearchResult,\n  EMRSearchQuery,\n  EMRTreatment,\n} from '../EMRAdapter';\n\n/**\n * Tipos específicos para EPIC usando FHIR\n */\n// Tipo base para recursos FHIR\ninterface FHIRResource {\n  resourceType: string;\n  id?: string;\n  meta?: {\n    versionId?: string;\n    lastUpdated?: string;\n  };\n}\n\n// Definir interfaz para EMRLabResult con la propiedad requerida orderedBy\ninterface EMRLabResult {\n  id: string;\n  patientId: string;\n  date: Date;\n  type: string;\n  name: string;\n  results: Record<\n    string,\n    {\n      value: string | number;\n      unit?: string;\n      referenceRange?: string;\n      isAbnormal?: boolean;\n    }\n  >;\n  units?: string;\n  range?: string;\n  abnormal?: boolean;\n  notes?: string;\n  orderedBy: string;\n}\n\n// Interfaces adicionales para reducir el uso de 'any'\ninterface FHIRMedicationResource extends FHIRResource {\n  medicationCodeableConcept?: {\n    text?: string;\n  };\n  dosageInstruction?: Array<{\n    doseAndRate?: Array<{\n      doseQuantity?: {\n        value: number;\n        unit: string;\n      };\n    }>;\n    timing?: {\n      text?: string;\n    };\n  }>;\n  authoredOn?: string;\n}\n\ninterface FHIREncounterResource extends FHIRResource {\n  id: string;\n  status?: string; // Añadir la propiedad status que faltaba\n  subject?: {\n    reference: string;\n  };\n  participant?: Array<{\n    individual?: {\n      reference: string;\n    };\n  }>;\n  period?: {\n    start?: string;\n  };\n  reasonCode?: Array<{\n    text?: string;\n  }>;\n  note?: Array<{\n    text?: string;\n  }>;\n  serviceType?: {\n    text?: string;\n  };\n  class?: {\n    // Añadir clase como opcional\n    system: string;\n    code: string;\n    display: string;\n  };\n}\n\ninterface FHIRConditionResource extends FHIRResource {\n  clinicalStatus?: {\n    coding?: Array<{\n      code?: string;\n    }>;\n  };\n  code?: {\n    text?: string;\n  };\n}\n\n// Tipo para paciente FHIR\ninterface FHIRPatient extends FHIRResource {\n  resourceType: 'Patient';\n  name?: Array<{\n    family?: string;\n    given?: string[];\n    use?: string;\n    prefix?: string[];\n    suffix?: string[];\n  }>;\n  gender?: string;\n  birthDate?: string;\n  telecom?: Array<{\n    system?: string;\n    value?: string;\n    use?: string;\n  }>;\n  address?: Array<{\n    line?: string[];\n    city?: string;\n    state?: string;\n    postalCode?: string;\n    country?: string;\n    use?: string;\n  }>;\n  identifier?: Array<{\n    system?: string;\n    value?: string;\n    type?: {\n      coding?: Array<{\n        system?: string;\n        code?: string;\n        display?: string;\n      }>;\n    };\n  }>;\n  active?: boolean;\n}\n\n// Tipo para bundle FHIR\ninterface FHIRBundle extends FHIRResource {\n  resourceType: 'Bundle';\n  type: string;\n  total?: number;\n  entry?: Array<{\n    resource?: FHIRResource;\n    fullUrl?: string;\n    search?: {\n      mode?: string;\n      score?: number;\n    };\n  }>;\n}\n\n// Tipo para respuesta FHIR (usado en algunos métodos)\ninterface FHIRResponse {\n  resourceType: string;\n  id?: string;\n  status?: string;\n  location?: string;\n  etag?: string;\n  lastModified?: string;\n}\n\n// Tipo para datos adicionales que no se obtienen directamente del paciente\ninterface FHIRAdditionalData {\n  allergies?: FHIRBundle;\n  conditions?: FHIRBundle;\n  observations?: FHIRBundle;\n  medications?: FHIRBundle;\n}\n\n/**\n * Adaptador para integración con EPIC EMR\n * EPIC es uno de los sistemas EMR más utilizados en hospitales y clínicas grandes\n * Este adaptador implementa la interfaz EMRAdapter para conectar con la API FHIR de EPIC\n */\nexport class EPICAdapter implements EMRAdapter {\n  public readonly name = 'EPIC EMR Adapter';\n  private readonly logger: Logger;\n  private readonly apiBaseUrl: string;\n  // Variables para configuración futura - actualmente no utilizadas\n  private readonly apiKey?: string;\n  private readonly clientId?: string;\n  private readonly clientSecret?: string;\n  private accessToken: string | null = null;\n  private tokenExpiration: Date | null = null;\n\n  constructor(config: {\n    apiBaseUrl: string;\n    apiKey?: string;\n    clientId?: string;\n    clientSecret?: string;\n  }) {\n    this.logger = new Logger('EPICAdapter');\n    this.apiBaseUrl = config.apiBaseUrl;\n    this.apiKey = config.apiKey ?? '';\n    this.clientId = config.clientId ?? '';\n    this.clientSecret = config.clientSecret ?? '';\n\n    this.logger.info('Inicializado adaptador para EPIC EMR', {\n      baseUrl: this.apiBaseUrl,\n    });\n  }\n\n  /**\n   * Prueba la conexión con EPIC EMR\n   */\n  public async testConnection(): Promise<boolean> {\n    try {\n      this.logger.info('Probando conexión con EPIC EMR');\n\n      // Intentar obtener un token para verificar credenciales\n      await this.getAccessToken();\n      return true;\n    } catch (error) {\n      this.logger.error('Error al conectar con EPIC EMR', { error });\n      return false;\n    }\n  }\n\n  /**\n   * Obtiene los datos de un paciente de EPIC\n   */\n  public async getPatientData(patientId: string): Promise<PatientData> {\n    try {\n      this.logger.info('Obteniendo datos del paciente desde EPIC', {\n        patientId,\n      });\n\n      await this.ensureValidToken();\n\n      // Obtener datos básicos del paciente utilizando FHIR\n      const patientResource = await this.fetchFHIRResource<FHIRPatient>(\n        `Patient/${patientId}`\n      );\n\n      // Obtener información adicional como alergias, condiciones, etc.\n      const allergies = await this.fetchFHIRResource<FHIRBundle>(\n        `AllergyIntolerance?patient=${patientId}`\n      );\n      const conditions = await this.fetchFHIRResource<FHIRBundle>(\n        `Condition?patient=${patientId}`\n      );\n      const medications = await this.fetchFHIRResource<FHIRBundle>(\n        `MedicationRequest?patient=${patientId}`\n      );\n\n      // Convertir datos FHIR al formato PatientData de la aplicación\n      return this.convertFHIRToPatientData(patientResource, {\n        allergies,\n        conditions,\n        medications,\n      });\n    } catch (error) {\n      this.logger.error('Error al obtener datos del paciente desde EPIC', {\n        error,\n        patientId,\n      });\n      throw new Error(\n        `Error al obtener datos del paciente: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Busca pacientes en EPIC según criterios\n   */\n  public async searchPatients(\n    query: EMRSearchQuery,\n    limit = 10\n  ): Promise<EMRPatientSearchResult[]> {\n    try {\n      this.logger.info('Buscando pacientes en EPIC', { query, limit });\n\n      await this.ensureValidToken();\n\n      // Construir parámetros de búsqueda FHIR\n\n\n      // Añadir el límite de resultados\n      searchParams.append('_count', limit.toString());\n\n      // Ejecutar la búsqueda\n      const searchResults = await this.fetchFHIRResource<FHIRBundle>(\n        `Patient?${searchParams.toString()}`\n      );\n\n      // Convertir resultados FHIR a formato de la aplicación\n      return this.convertFHIRPatientBundle(searchResults);\n    } catch (error) {\n      this.logger.error('Error al buscar pacientes en EPIC', { error, query });\n      throw new Error(`Error al buscar pacientes: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Obtiene el historial médico del paciente de EPIC\n   */\n  public async getPatientHistory(\n    patientId: string,\n    options?: EMRHistoryOptions\n  ): Promise<EMRPatientHistory> {\n    try {\n      this.logger.info('Obteniendo historial médico desde EPIC', {\n        patientId,\n        options,\n      });\n\n      await this.ensureValidToken();\n\n      // Construir objeto base del historial\n      const patientHistory: EMRPatientHistory = {\n        patientId,\n        consultations: [],\n        treatments: [],\n        labResults: [],\n        diagnoses: [],\n      };\n\n      // Obtener consultas si se solicitan\n      if (!options || options.includeConsultations !== false) {\n        const encounters = await this.fetchFHIRResource<FHIRBundle>(\n          `Encounter?patient=${patientId}`\n        );\n        patientHistory.consultations = this.convertFHIREncounters(encounters);\n      }\n\n      // Obtener tratamientos si se solicitan\n      if (!options || options.includeTreatments !== false) {\n        const medicationRequests = await this.fetchFHIRResource<FHIRBundle>(\n          `MedicationRequest?patient=${patientId}`\n        );\n        const procedures = await this.fetchFHIRResource<FHIRBundle>(\n          `Procedure?patient=${patientId}`\n        );\n        patientHistory.treatments = [\n          ...this.convertFHIRMedicationRequests(medicationRequests),\n          ...this.convertFHIRProcedures(procedures),\n        ];\n      }\n\n      // Obtener resultados de laboratorio si se solicitan\n      if (!options || options.includeLabResults !== false) {\n        const observations = await this.fetchFHIRResource<FHIRBundle>(\n          `Observation?patient=${patientId}&category=laboratory`\n        );\n        patientHistory.labResults = this.convertFHIRObservations(observations);\n      }\n\n      // Obtener diagnósticos si se solicitan\n      if (!options || options.includeDiagnoses !== false) {\n        const conditions = await this.fetchFHIRResource<FHIRBundle>(\n          `Condition?patient=${patientId}`\n        );\n        patientHistory.diagnoses = this.convertFHIRConditions(conditions);\n      }\n\n      return patientHistory;\n    } catch (error) {\n      this.logger.error('Error al obtener historial médico desde EPIC', {\n        error,\n        patientId,\n      });\n      throw new Error(\n        `Error al obtener historial médico: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Guarda una nueva consulta en EPIC\n   */\n  public async saveConsultation(\n    consultation: EMRConsultation\n  ): Promise<string> {\n    try {\n      this.logger.info('Guardando consulta en EPIC', {\n        patientId: consultation.patientId,\n      });\n\n      await this.ensureValidToken();\n\n      // Convertir consulta al formato FHIR Encounter\n\n\n      // Enviar la consulta a EPIC\n      const response = await this.postFHIRResource(\n        'Encounter',\n        encounterResource\n      );\n\n      // Extraer el ID del recurso creado\n\n\n      this.logger.info('Consulta guardada exitosamente en EPIC', {\n        resourceId,\n      });\n      return resourceId;\n    } catch (error) {\n      this.logger.error('Error al guardar consulta en EPIC', {\n        error,\n        consultation,\n      });\n      throw new Error(`Error al guardar consulta: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Actualiza una consulta existente en EPIC\n   */\n  public async updateConsultation(\n    consultationId: string,\n    updates: Partial<EMRConsultation>\n  ): Promise<boolean> {\n    try {\n      this.logger.info('Actualizando consulta en EPIC', { consultationId });\n\n      await this.ensureValidToken();\n\n      // Obtener consulta existente\n      const existingEncounter = await this.fetchFHIRResource<FHIRResource>(\n        `Encounter/${consultationId}`\n      );\n\n      // Aplicar actualizaciones al recurso FHIR\n      const updatedEncounter = this.applyConsultationUpdates(\n        existingEncounter,\n        updates\n      );\n\n      // Enviar la consulta actualizada\n      await this.putFHIRResource(\n        `Encounter/${consultationId}`,\n        updatedEncounter\n      );\n\n      this.logger.info('Consulta actualizada exitosamente en EPIC', {\n        consultationId,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error('Error al actualizar consulta en EPIC', {\n        error,\n        consultationId,\n      });\n      throw new Error(\n        `Error al actualizar consulta: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Registra un nuevo tratamiento en EPIC\n   */\n  public async registerTreatment(treatment: EMRTreatment): Promise<string> {\n    try {\n      this.logger.info('Registrando tratamiento en EPIC', {\n        patientId: treatment.patientId,\n      });\n\n      await this.ensureValidToken();\n\n      // Determinar el tipo de recurso FHIR basado en el tipo de tratamiento\n      let resourceType: string;\n      let fhirResource: FHIRResource;\n\n      if (treatment.type === 'medication') {\n        resourceType = 'MedicationRequest';\n        fhirResource = this.convertToFHIRMedicationRequest(treatment);\n      } else if (treatment.type === 'procedure') {\n        resourceType = 'Procedure';\n        fhirResource = this.convertToFHIRProcedure(treatment);\n      } else {\n        resourceType = 'CarePlan';\n        fhirResource = this.convertToFHIRCarePlan(treatment);\n      }\n\n      // Enviar el tratamiento a EPIC\n\n\n      // Extraer el ID del recurso creado\n\n\n      this.logger.info('Tratamiento registrado exitosamente en EPIC', {\n        resourceId,\n      });\n      return resourceId;\n    } catch (error) {\n      this.logger.error('Error al registrar tratamiento en EPIC', {\n        error,\n        treatment,\n      });\n      throw new Error(\n        `Error al registrar tratamiento: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Obtiene métricas del paciente de EPIC\n   */\n  public async getPatientMetrics(\n    patientId: string,\n    metricTypes: string[]\n  ): Promise<EMRPatientMetrics> {\n    try {\n      this.logger.info('Obteniendo métricas del paciente desde EPIC', {\n        patientId,\n        metricTypes,\n      });\n\n      await this.ensureValidToken();\n\n      const metrics: EMRPatientMetrics = {\n        patientId,\n        weight: [],\n        height: [],\n        bloodPressure: [],\n        glucose: [],\n        cholesterol: [],\n      };\n\n      // Construir lista de códigos LOINC para las métricas solicitadas\n\n\n      if (loincCodes.length > 0) {\n        // Obtener las observaciones para los códigos seleccionados\n        const observations = await this.fetchFHIRResource<FHIRBundle>(\n          `Observation?patient=${patientId}&code=${loincCodes.join(',')}`\n        );\n\n        // Procesar las observaciones y organizarlas en métricas\n        this.processFHIRObservationsToMetrics(observations, metrics);\n      }\n\n      return metrics;\n    } catch (error) {\n      this.logger.error('Error al obtener métricas del paciente desde EPIC', {\n        error,\n        patientId,\n      });\n      throw new Error(\n        `Error al obtener métricas del paciente: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Obtiene un token de acceso para la API de EPIC\n   */\n  private async getAccessToken(): Promise<string> {\n    try {\n      this.logger.info('Obteniendo token de acceso para EPIC API');\n\n      // Usar las credenciales en un escenario real\n      if (!this.apiKey && !this.clientId && !this.clientSecret) {\n        this.logger.warn(\n          'Credenciales no proporcionadas, usando token de prueba'\n        );\n        return 'mock-epic-token-12345';\n      }\n\n      // En un entorno real, usaríamos estas credenciales para autenticar\n\n      if (this.clientId) authParams.append('client_id', this.clientId);\n      if (this.clientSecret)\n        authParams.append('client_secret', this.clientSecret);\n      if (this.apiKey) authParams.append('api_key', this.apiKey);\n\n      // En este ejemplo simulado, solo registramos que usamos las credenciales\n      this.logger.info('Autenticando con credenciales configuradas', {\n        hasApiKey: !!this.apiKey,\n        hasClientCredentials: !!this.clientId && !!this.clientSecret,\n      });\n\n      // Por simplicidad, devolvemos un token \"simulado\"\n      return 'mock-epic-token-12345';\n    } catch (error) {\n      this.logger.error('Error al obtener token de acceso', { error });\n      throw new Error('No se pudo autenticar con la API de EPIC');\n    }\n  }\n\n  /**\n   * Asegura que el token de acceso sea válido\n   */\n  private async ensureValidToken(): Promise<void> {\n\n    if (\n      !this.accessToken ||\n      !this.tokenExpiration ||\n      now >= this.tokenExpiration\n    ) {\n      try {\n\n        this.accessToken = token;\n        // Establece la expiración a 55 minutos para renovar antes de que expire\n\n        expiration.setMinutes(expiration.getMinutes() + 55);\n        this.tokenExpiration = expiration;\n      } catch (error) {\n        this.logger.error('Error al renovar token de acceso', { error });\n        this.accessToken = '';\n        this.tokenExpiration = null;\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Recupera un recurso FHIR de la API de EPIC\n   */\n  private async fetchFHIRResource<T extends FHIRResource>(\n    path: string\n  ): Promise<T> {\n    try {\n      // Asegurar que tenemos un token válido\n      await this.ensureValidToken();\n\n      // Construir la URL completa para la solicitud\n\n\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n          Accept: 'application/fhir+json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error al obtener recurso FHIR: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      this.logger.error('Error al recuperar recurso FHIR', { error, path });\n      throw error;\n    }\n  }\n\n  /**\n   * Envía un recurso FHIR a la API de EPIC\n   */\n  private async postFHIRResource(\n    resourceType: string,\n    resource: FHIRResource\n  ): Promise<FHIRResponse> {\n    try {\n      // Asegurar que tenemos un token válido\n      await this.ensureValidToken();\n\n      const response = await fetch(`${this.apiBaseUrl}/${resourceType}`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/fhir+json',\n          Accept: 'application/fhir+json',\n        },\n        body: JSON.stringify(resource),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error al crear recurso FHIR: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al crear recurso FHIR', { error, resourceType });\n      throw error;\n    }\n  }\n\n  /**\n   * Actualiza un recurso FHIR en la API de EPIC\n   */\n  private async putFHIRResource(\n    path: string,\n    resource: FHIRResource\n  ): Promise<FHIRResponse> {\n    try {\n      // Asegurar que tenemos un token válido\n      await this.ensureValidToken();\n\n      const response = await fetch(`${this.apiBaseUrl}/${path}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/fhir+json',\n          Accept: 'application/fhir+json',\n        },\n        body: JSON.stringify(resource),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error al actualizar recurso FHIR: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al actualizar recurso FHIR', { error, path });\n      throw error;\n    }\n  }\n\n  /**\n   * Convierte datos FHIR a formato PatientData de la aplicación\n   */\n  private convertFHIRToPatientData(\n    patientResource: FHIRPatient,\n    additionalData: FHIRAdditionalData\n  ): PatientData {\n    try {\n      // Extraer información básica del paciente\n\n      const primaryName = names.find((n) => !n.use || n.use === 'official') ??\n        names[0] ?? { given: [], family: '' };\n\n\n\n\n\n\n\n\n      // Obtener información de contacto\n\n\n\n\n      // Extraer identificadores relevantes\n\n\n\n      // Extraer medicamentos si están disponibles\n      const medications = additionalData.medications\n        ? this.extractMedicationsFromFHIR(additionalData.medications)\n        : [];\n\n      // Construir el objeto de datos del paciente\n      const patientData: PatientData = {\n        id: patientId,\n        personalInfo: {\n          fullName,\n          firstName,\n          lastName,\n          dateOfBirth: birthDate,\n          age: this.calculateAge(birthDate),\n          gender: this.mapGender(gender),\n          documentId: mrn,\n          contactInfo: {\n            email,\n            phone,\n            address,\n          },\n        },\n        medicalHistory: {\n          ...this.extractMedicalHistoryFromFHIR(additionalData),\n          medications: medications, // Añadir medicamentos al historial médico\n        },\n        vitalSigns: this.extractVitalSignsFromFHIR(additionalData),\n      };\n\n      return patientData;\n    } catch (error) {\n      this.logger.error('Error al convertir recursos FHIR a PatientData', {\n        error,\n      });\n      throw new Error('Error al procesar datos del paciente');\n    }\n  }\n\n  // Métodos auxiliares para conversión de FHIR a formatos internos\n  private calculateAge(dateOfBirth: string): number {\n    if (!dateOfBirth) return 0;\n\n\n\n    let age = today.getFullYear() - birthDate.getFullYear();\n\n\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n\n    return age;\n  }\n\n  private extractEmailFromFHIR(patientResource: FHIRPatient): string {\n\n\n    return emailSystem?.value ?? '';\n  }\n\n  private extractPhoneFromFHIR(patientResource: FHIRPatient): string {\n\n\n    return phoneSystem?.value ?? '';\n  }\n\n  private extractAddressFromFHIR(patientResource: FHIRPatient): string {\n\n    const primaryAddress =\n      addresses.find((a) => !a.use || a.use === 'home') || addresses[0];\n\n    if (!primaryAddress) return '';\n\n    const addressParts = [\n      primaryAddress.line?.join(', '),\n      primaryAddress.city,\n      primaryAddress.state,\n      primaryAddress.postalCode,\n      primaryAddress.country,\n    ].filter(Boolean);\n\n    return addressParts.join(', ');\n  }\n\n  private extractIdentifierFromFHIR(\n    patientResource: FHIRPatient,\n    type: string\n  ): string {\n\n    const identifier = identifiers.find((id) =>\n      id.type?.coding?.some((c) => c.display === type || c.code === type)\n    );\n    return identifier?.value ?? '';\n  }\n\n  private extractMedicalHistoryFromFHIR(\n    data: FHIRAdditionalData\n  ): Record<string, unknown> {\n    // Extraer alergias\n    const allergies = data.allergies?.entry\n      ? data.allergies.entry.map((entry) => {\n\n\n          return resourceWithCode.code?.text ?? 'Alergia desconocida';\n        })\n      : [];\n\n    // Extraer condiciones crónicas\n    const conditions = data.conditions?.entry\n      ? data.conditions.entry\n          .filter((entry) => {\n\n            return resource.clinicalStatus?.coding?.some(\n              (c) => c.code === 'active'\n            );\n          })\n          .map((entry) => {\n\n            return resource.code?.text ?? 'Condición desconocida';\n          })\n      : [];\n\n    return {\n      allergies,\n      chronicConditions: conditions,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private extractVitalSignsFromFHIR(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _data: FHIRAdditionalData\n  ): Record<string, unknown> {\n    // Implementación simplificada - en un caso real se obtendría de recursos Observation\n    return {};\n  }\n\n  /**\n   * Método para extraer medicaciones de recursos FHIR\n   * Nota: Este método está implementado para uso futuro o referencia.\n   * Actualmente no se utiliza en el flujo principal del adaptador.\n   */\n  private extractMedicationsFromFHIR(medicationRequests: FHIRBundle): Array<{\n    name: string;\n    dosage: string;\n    frequency: string;\n    startDate?: string;\n    endDate?: string;\n  }> {\n    if (!medicationRequests?.entry) return [];\n\n    return medicationRequests.entry.map((entry) => {\n\n\n      const medication = {\n        name: resource.medicationCodeableConcept\n          ? (resource.medicationCodeableConcept.text ??\n            'Medicamento sin nombre')\n          : 'Medicamento sin nombre',\n        dosage: '',\n        frequency: '',\n        startDate: resource.authoredOn,\n      };\n\n      // Extraer información de dosificación con manejo seguro de undefined\n      if (resource.dosageInstruction && resource.dosageInstruction.length > 0) {\n\n\n        if (dosage.doseAndRate && dosage.doseAndRate.length > 0) {\n\n          medication.dosage = dose.doseQuantity\n            ? `${dose.doseQuantity.value} ${dose.doseQuantity.unit}`\n            : '';\n        }\n\n        medication.frequency = dosage.timing?.text ?? '';\n      }\n\n      return medication;\n    });\n  }\n\n  private buildFHIRSearchParams(query: EMRSearchQuery): URLSearchParams {\n\n\n    if (query.name) {\n      params.append('name', query.name);\n    }\n\n    if (query.documentId) {\n      params.append('identifier', query.documentId);\n    }\n\n    if (query.email) {\n      params.append('email:exact', query.email);\n    }\n\n    if (query.criteria && typeof query.criteria === 'string') {\n      params.append('_content', query.criteria);\n    }\n\n    return params;\n  }\n\n  private extractResourceIdFromResponse(response: FHIRResponse): string {\n    if (!response.id) {\n      throw new Error('No se recibió un ID de recurso válido');\n    }\n    return response.id;\n  }\n\n  /**\n   * Convierte bundle de pacientes FHIR a resultados de búsqueda\n   */\n  private convertFHIRPatientBundle(\n    bundle: FHIRBundle\n  ): EMRPatientSearchResult[] {\n    if (!bundle.entry || bundle.entry.length === 0) {\n      return [];\n    }\n\n    return bundle.entry\n      .filter((entry) => entry.resource?.resourceType === 'Patient')\n      .map((entry) => {\n\n\n        const primaryName = names.find((n) => !n.use || n.use === 'official') ??\n          names[0] ?? { given: [], family: '' };\n\n\n\n\n\n        // Extraer género del recurso FHIR\n\n\n        // Extraer MRN del recurso FHIR\n\n\n        // Convertir fecha de nacimiento a formato string para la interfaz\n\n\n        return {\n          id: resource.id ?? '',\n          fullName,\n          name: fullName, // Usar mismo valor que fullName\n          birthDate: birthDateStr, // Fecha en formato string\n          gender: gender, // Género extraído del recurso\n          mrn: mrn, // MRN extraído del recurso\n          dateOfBirth: resource.birthDate\n            ? new Date(resource.birthDate)\n            : undefined,\n          documentId: this.extractIdentifierFromFHIR(resource, 'MR'),\n          contactInfo: {\n            email: this.extractEmailFromFHIR(resource),\n            phone: this.extractPhoneFromFHIR(resource),\n          },\n        };\n      });\n  }\n\n  private convertFHIREncounters(bundle: FHIRBundle): EMRConsultation[] {\n    if (!bundle?.entry) return [];\n\n    return bundle.entry.map((entry) => {\n\n\n      return {\n        id: resource.id,\n        patientId: resource.subject?.reference.split('/')[1] ?? '',\n        providerId:\n          resource.participant?.[0]?.individual?.reference.split('/')[1] ?? '',\n        date: new Date(resource.period?.start ?? Date.now()),\n        reason: resource.reasonCode?.[0]?.text ?? 'No especificado',\n        notes: resource.note?.[0]?.text ?? '',\n        specialty: resource.serviceType?.text ?? '',\n      } as EMRConsultation;\n    });\n  }\n\n  private convertToFHIREncounter(\n    consultation: EMRConsultation\n  ): FHIREncounterResource {\n    const fhirEncounter: FHIREncounterResource = {\n      resourceType: 'Encounter',\n      id: consultation.id ?? '',\n      status: 'finished',\n      class: {\n        system: 'http://terminology.hl7.org/CodeSystem/v3-ActCode',\n        code: 'AMB',\n        display: 'ambulatory',\n      },\n      subject: {\n        reference: `Patient/${consultation.patientId}`,\n      },\n      participant: [\n        {\n          individual: {\n            reference: `Practitioner/${consultation.providerId}`,\n          },\n        },\n      ],\n      period: {\n        start: consultation.date.toISOString(),\n      },\n      reasonCode: [\n        {\n          text: consultation.reason,\n        },\n      ],\n      note: [\n        {\n          text: consultation.notes,\n        },\n      ],\n    };\n\n    if (consultation.specialty) {\n      fhirEncounter.serviceType = {\n        text: consultation.specialty,\n      };\n    }\n\n    return fhirEncounter;\n  }\n\n  private getLoincCodesForMetrics(metricTypes: string[]): string[] {\n    const metricToLoinc: Record<string, string> = {\n      weight: '29463-7',\n      height: '8302-2',\n      bloodPressure: '85354-9',\n      glucose: '2339-0',\n      cholesterol: '2093-3',\n    };\n\n    return metricTypes\n      .filter((type) => metricToLoinc[type])\n      .map((type) => metricToLoinc[type]);\n  }\n\n  // Otros métodos de conversión FHIR omitidos por brevedad\n  private convertFHIRMedicationRequests(bundle: FHIRBundle): EMRTreatment[] {\n    return this.commonFHIRConverter<EMRTreatment>(bundle, (resource) => {\n      // Implementación específica para convertir medicamentos\n      // Esto es un placeholder, la implementación real dependería de los campos específicos\n      return {\n        id: resource.id ?? '',\n        patientId: '',\n        providerId: '',\n        type: 'medication',\n        name: 'Medication',\n        startDate: new Date(),\n        status: 'active',\n      } as EMRTreatment;\n    });\n  }\n\n  private convertFHIRProcedures(bundle: FHIRBundle): EMRTreatment[] {\n    return this.commonFHIRConverter<EMRTreatment>(bundle, (resource) => {\n      // Implementación específica para convertir procedimientos\n      return {\n        id: resource.id ?? '',\n        patientId: '',\n        providerId: '',\n        type: 'procedure',\n        name: 'Procedure',\n        startDate: new Date(),\n        status: 'scheduled',\n      } as EMRTreatment;\n    });\n  }\n\n  private convertFHIRObservations(bundle: FHIRBundle): EMRLabResult[] {\n    if (!bundle?.entry) return [];\n\n    return bundle.entry.map((entry) => {\n\n      // Crear objeto que cumpla con la interfaz EMRLabResult\n      return {\n        id: resource.id ?? '',\n        patientId: '', // Extraer del recurso si está disponible\n        date: new Date(), // Extraer fecha real del recurso\n        type: 'laboratory',\n        name: 'Lab Test', // Extraer nombre real del recurso\n        results: {\n          // Proporcionar un objeto de resultados en el formato requerido\n          general: {\n            value: 'Normal',\n            unit: '',\n            referenceRange: '',\n            isAbnormal: false,\n          },\n        },\n        units: '',\n        range: '',\n        abnormal: false,\n        notes: '',\n        orderedBy: '', // Añadir el valor para la propiedad obligatoria\n      };\n    });\n  }\n\n  private convertFHIRConditions(bundle: FHIRBundle): EMRDiagnosis[] {\n    if (!bundle?.entry) return [];\n    // ... rest of the method implementation ...\n    return [];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private processFHIRObservationsToMetrics(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _observations: FHIRBundle,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _metrics: EMRPatientMetrics\n  ): void {\n    // Implementación simplificada\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private applyConsultationUpdates(\n    existingEncounter: FHIRResource,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _updates: Partial<EMRConsultation>\n  ): FHIRResource {\n    return existingEncounter; // Implementación simplificada\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private createTreatmentConverter(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _type: string\n  ): (treatment: EMRTreatment) => FHIRResource {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    return (_treatment: EMRTreatment): FHIRResource => {\n      // Implementación base para todos los convertidores\n      return { resourceType: 'Resource' }; // Implementación simplificada\n    };\n  }\n\n  private readonly convertToFHIRMedicationRequest =\n    this.createTreatmentConverter('medication');\n  private readonly convertToFHIRProcedure =\n    this.createTreatmentConverter('procedure');\n  private readonly convertToFHIRCarePlan =\n    this.createTreatmentConverter('careplan');\n\n  /**\n   * Mapea el género del formato FHIR al formato de la aplicación\n   */\n  private mapGender(gender: string): string {\n    switch (gender.toLowerCase()) {\n      case 'male':\n        return 'masculino';\n      case 'female':\n        return 'femenino';\n      default:\n        return 'otro';\n    }\n  }\n\n  private commonFHIRConverter<T>(\n    bundle: FHIRBundle,\n    mapFunction: (resource: FHIRResource) => T\n  ): T[] {\n    if (!bundle?.entry) return [];\n    return bundle.entry\n      .filter((entry) => entry.resource)\n      .map((entry) => mapFunction(entry.resource as FHIRResource));\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/emr/implementations/GenericEMRAdapter.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  EMRAdapter,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  EMRConsultation,\nimport { \n  EMRDiagnosis,\n  EMRHistoryOptions,\n  EMRPatientHistory,\n  EMRPatientMetrics,\n  EMRPatientSearchResult,\n  EMRSearchQuery,\n  EMRTreatment,\n} from '../EMRAdapter';\n\n// Definir alias de tipos para uniones\ntype EMRTreatmentType =\n  | 'medication'\n  | 'procedure'\n  | 'therapy'\n  | 'lifestyle'\n  | 'other';\ntype EMRTreatmentStatus = 'active' | 'completed' | 'cancelled' | 'scheduled';\ntype DiagnosisSystem = 'ICD-10' | 'ICD-11' | 'SNOMED-CT' | 'other';\ntype DiagnosisStatus =\n  | 'active'\n  | 'resolved'\n  | 'recurrent'\n  | 'chronic'\n  | 'suspected';\ntype GlucoseReadingType = 'fasting' | 'postprandial' | 'random';\n\n// Tipos para datos mock\ntype MockPatient = Omit<PatientData, 'medicalHistory'> & {\n  medicalHistory?: {\n    allergies?: string[];\n    chronicConditions?: string[];\n    medications?: Array<{\n      name: string;\n      dosage: string;\n      frequency: string;\n      startDate?: string;\n      endDate?: string;\n    }>;\n    surgeries?: Array<{\n      procedure: string;\n      date: string;\n      notes?: string;\n    }>;\n    familyHistory?: Record<string, string[]>;\n  };\n};\n\ntype MockConsultation = {\n  id: string;\n  patientId: string;\n  providerId: string;\n  date: string;\n  reason: string;\n  notes: string;\n  diagnoses?: Array<{\n    code: string;\n    system: string;\n    description: string;\n    date: string;\n    status: string;\n  }>;\n  vitalSigns?: {\n    date: string;\n    temperature?: number;\n    heartRate?: number;\n    respiratoryRate?: number;\n    bloodPressureSystolic?: number;\n    bloodPressureDiastolic?: number;\n    oxygenSaturation?: number;\n    weight?: number;\n    height?: number;\n    bmi?: number;\n  };\n  treatmentPlan?: string;\n  followUpDate?: string;\n  specialty?: string;\n};\n\ntype MockTreatment = {\n  id: string;\n  patientId: string;\n  providerId: string;\n  startDate: string;\n  endDate?: string;\n  name: string;\n  type: string;\n  description: string;\n  dosage?: string;\n  frequency?: string;\n  instructions?: string;\n  status: string;\n  consultationId?: string;\n};\n\n// Datos de ejemplo para demostración - importar como values que será completado en runtime\n\n\n\n\n/**\n * Implementación genérica del adaptador EMR para demostración\n * Esta implementación usa datos de ejemplo y no se conecta a un sistema real\n */\nexport class GenericEMRAdapter implements EMRAdapter {\n  public readonly name = 'Generic EMR Adapter';\n  private readonly logger: Logger;\n\n  constructor() {\n    this.logger = new Logger('GenericEMRAdapter');\n    this.logger.info('Inicializado adaptador genérico EMR');\n\n    // Cargar datos de ejemplo - en un caso real esto vendría de una API o base de datos\n    this.loadMockData();\n  }\n\n  /**\n   * Carga los datos de ejemplo\n   * En un caso real, estos datos vendrían de una API o base de datos\n   */\n  private loadMockData(): void {\n    // Datos simplificados para pasar la compilación de TypeScript\n    // Paciente 1\n    mockPatientData.push({\n      id: 'PAT-001',\n      personalInfo: {\n        fullName: 'Juan Carlos Martínez',\n        firstName: 'Juan Carlos',\n        lastName: 'Martínez',\n        dateOfBirth: '1975-06-12',\n        age: 48,\n        gender: 'masculino',\n        documentId: '27456789',\n        contactInfo: {\n          email: 'jcmartinez@example.com',\n          phone: '+34612345678',\n          address: 'Calle Libertad 123, Madrid',\n        },\n      },\n      medicalHistory: {\n        allergies: ['penicilina', 'nueces'],\n        chronicConditions: ['hipertensión', 'diabetes tipo 2'],\n        familyHistory: {\n          diabetes: ['padre', 'abuela paterna'],\n          cardiopatías: ['madre'],\n        },\n      },\n      vitalSigns: {\n        bloodPressure: {\n          systolic: 135,\n          diastolic: 85,\n        },\n      },\n    });\n\n    // Consulta de ejemplo\n    mockConsultations.push({\n      id: 'CONS-001',\n      patientId: 'PAT-001',\n      providerId: 'PROV-001',\n      date: '2023-10-15T10:30:00Z',\n      reason: 'Control rutinario diabetes',\n      notes: 'Paciente estable. Control glucémico mejorado.',\n      diagnoses: [\n        {\n          code: 'E11.9',\n          system: 'ICD-10',\n          description: 'Diabetes mellitus tipo 2 controlada',\n          date: '2023-10-15T10:30:00Z',\n          status: 'active',\n        },\n      ],\n    });\n\n    // Tratamiento de ejemplo\n    mockTreatments.push({\n      id: 'TREAT-001',\n      patientId: 'PAT-001',\n      providerId: 'PROV-001',\n      startDate: '2020-03-15T00:00:00Z',\n      name: 'Metformina',\n      type: 'medication',\n      description: 'Tratamiento para control de glucemia en diabetes tipo 2',\n      dosage: '850mg',\n      frequency: '2 veces al día',\n      status: 'active',\n    });\n  }\n\n  /**\n   * Simula prueba de conexión siempre exitosa\n   */\n  public async testConnection(): Promise<boolean> {\n    this.logger.info('Probando conexión');\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    return true;\n  }\n\n  /**\n   * Obtiene datos de paciente de ejemplo\n   */\n  public async getPatientData(patientId: string): Promise<PatientData> {\n    this.logger.info('Obteniendo datos del paciente', { patientId });\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 800));\n\n    // Buscar paciente en datos de ejemplo\n\n\n    if (!patient) {\n      this.logger.error('Paciente no encontrado', { patientId });\n      throw new Error(`Paciente no encontrado: ${patientId}`);\n    }\n\n    // Convertimos explícitamente a PatientData\n    return patient as unknown as PatientData;\n  }\n\n  /**\n   * Busca pacientes en datos de ejemplo\n   */\n  public async searchPatients(\n    query: EMRSearchQuery,\n    limit = 10\n  ): Promise<EMRPatientSearchResult[]> {\n    this.logger.info('Buscando pacientes', { query, limit });\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 700));\n\n    // Filtrar pacientes basados en criterios de búsqueda\n    let results = mockPatientData\n      .filter((patient) => {\n        if (\n          query.name &&\n          patient.personalInfo.fullName\n            .toLowerCase()\n            .includes(query.name.toLowerCase())\n        ) {\n          return true;\n        }\n\n        if (\n          query.documentId &&\n          patient.personalInfo.documentId === query.documentId\n        ) {\n          return true;\n        }\n\n        if (\n          query.email &&\n          patient.personalInfo.contactInfo?.email === query.email\n        ) {\n          return true;\n        }\n\n        if (\n          query.phone &&\n          patient.personalInfo.contactInfo?.phone === query.phone\n        ) {\n          return true;\n        }\n\n        // Usar cadena opcional para la consulta\n        if (Object.keys(query).length === 1 && query.criteria) {\n          // Convertir criteria a string de forma segura\n\n          const searchTerm =\n            typeof searchTermRaw === 'string'\n              ? searchTermRaw.toLowerCase()\n              : String(searchTermRaw).toLowerCase();\n\n          return (\n            patient.personalInfo.fullName.toLowerCase().includes(searchTerm) ||\n            (patient.personalInfo.documentId\n              ?.toLowerCase()\n              ?.includes(searchTerm) ??\n              false)\n          );\n        }\n\n        // Si no hay criterios, no incluir en los resultados\n        return Object.keys(query).length === 0;\n      })\n      .map((patient) => {\n        const lastDate = patient.consultations?.length\n          ? patient.consultations[patient.consultations.length - 1].date\n          : undefined;\n\n        // Formatear fecha de nacimiento como cadena\n        const birthDateStr = patient.personalInfo.dateOfBirth\n          ? new Date(patient.personalInfo.dateOfBirth)\n              .toISOString()\n              .split('T')[0]\n          : '';\n\n        return {\n          id: patient.id,\n          fullName: patient.personalInfo.fullName,\n          name: patient.personalInfo.fullName, // Propiedad name requerida\n          birthDate: birthDateStr, // Propiedad birthDate requerida como string\n          gender: patient.personalInfo.gender || 'unknown', // Propiedad gender requerida\n          mrn: patient.id, // Usar ID como número de registro médico\n          dateOfBirth: new Date(patient.personalInfo.dateOfBirth),\n          documentId: patient.personalInfo.documentId,\n          contactInfo: patient.personalInfo.contactInfo,\n          lastVisit: lastDate ? new Date(lastDate) : undefined,\n        };\n      });\n\n    // Limitar resultados\n    if (results.length > limit) {\n      results = results.slice(0, limit);\n    }\n\n    return results;\n  }\n\n  /**\n   * Obtiene historial del paciente\n   */\n  public async getPatientHistory(\n    patientId: string,\n    options?: EMRHistoryOptions\n  ): Promise<EMRPatientHistory> {\n    this.logger.info('Obteniendo historial del paciente', {\n      patientId,\n      options,\n    });\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 1200));\n\n    // Filtrar consultas por paciente\n    const consultations = mockConsultations\n      .filter((c) => c.patientId === patientId)\n      .filter((c) => {\n        if (!options) return true;\n\n        let include = true;\n\n        if (options.startDate && new Date(c.date) < options.startDate) {\n          include = false;\n        }\n\n        if (options.endDate && new Date(c.date) > options.endDate) {\n          include = false;\n        }\n\n        if (options.specialty && c.specialty !== options.specialty) {\n          include = false;\n        }\n\n        return include;\n      })\n      .map((c) => this.convertToEMRConsultation(c));\n\n    // Filtrar tratamientos por paciente\n    const treatments = mockTreatments\n      .filter((t) => t.patientId === patientId)\n      .filter((t) => {\n        if (!options) return true;\n\n        let include = true;\n\n        if (options.startDate && new Date(t.startDate) < options.startDate) {\n          include = false;\n        }\n\n        if (\n          options.endDate &&\n          t.endDate &&\n          new Date(t.endDate) > options.endDate\n        ) {\n          include = false;\n        }\n\n        return include;\n      })\n      .map((t) => this.convertToEMRTreatment(t));\n\n    // Extraer diagnósticos de las consultas\n    const allDiagnoses = consultations\n      .filter((c) => c.diagnoses && c.diagnoses.length > 0)\n      .flatMap((c) => c.diagnoses as EMRDiagnosis[]);\n\n    return {\n      patientId,\n      consultations,\n      treatments,\n      diagnoses: allDiagnoses,\n      allergies: this.getPatientAllergies(patientId),\n    };\n  }\n\n  /**\n   * Guarda una nueva consulta\n   */\n  public async saveConsultation(\n    consultation: EMRConsultation\n  ): Promise<string> {\n    this.logger.info('Guardando consulta', { consultation });\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 600));\n\n    // Generar ID para la consulta\n\n\n    // En un caso real, aquí guardaríamos en la base de datos\n    this.logger.info('Consulta guardada con éxito', { consultationId });\n\n    return consultationId;\n  }\n\n  /**\n   * Actualiza una consulta existente\n   */\n  public async updateConsultation(\n    consultationId: string,\n    updates: Partial<EMRConsultation>\n  ): Promise<boolean> {\n    this.logger.info('Actualizando consulta', { consultationId, updates });\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    // En un caso real, aquí actualizaríamos en la base de datos\n    this.logger.info('Consulta actualizada con éxito', { consultationId });\n\n    return true;\n  }\n\n  /**\n   * Registra un nuevo tratamiento\n   */\n  public async registerTreatment(treatment: EMRTreatment): Promise<string> {\n    this.logger.info('Registrando tratamiento', { treatment });\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 700));\n\n    // Generar ID para el tratamiento\n\n\n    // En un caso real, aquí guardaríamos en la base de datos\n    this.logger.info('Tratamiento registrado con éxito', { treatmentId });\n\n    return treatmentId;\n  }\n\n  /**\n   * Obtiene métricas de salud del paciente\n   */\n  public async getPatientMetrics(\n    patientId: string,\n    metricTypes: string[]\n  ): Promise<EMRPatientMetrics> {\n    this.logger.info('Obteniendo métricas del paciente', {\n      patientId,\n      metricTypes,\n    });\n\n    // Simular latencia de red\n    await new Promise((resolve) => setTimeout(resolve, 900));\n\n    // Generar datos de ejemplo para las métricas solicitadas\n    const metrics: EMRPatientMetrics = {\n      patientId,\n    };\n\n    // Obtener paciente para acceder a datos base\n\n\n    if (!patient) {\n      throw new Error(`Paciente no encontrado: ${patientId}`);\n    }\n\n    // Generar historial de peso si se solicita\n    if (metricTypes.includes('weight')) {\n      metrics.weightHistory = this.generateWeightHistory(patient);\n    }\n\n    // Generar historial de presión arterial si se solicita\n    if (metricTypes.includes('bloodPressure')) {\n      metrics.bloodPressureHistory = this.generateBloodPressureHistory(patient);\n    }\n\n    // Generar historial de glucosa si se solicita\n    if (metricTypes.includes('glucose')) {\n      metrics.glucoseHistory = this.generateGlucoseHistory(patient);\n    }\n\n    return metrics;\n  }\n\n  /**\n   * Obtiene las alergias de un paciente de los datos de ejemplo\n   */\n  private getPatientAllergies(patientId: string): string[] {\n    return (\n      mockPatientData.find((p) => p.id === patientId)?.medicalHistory\n        ?.allergies ?? []\n    );\n  }\n\n  /**\n   * Convierte una consulta mock a formato EMRConsultation\n   */\n  private convertToEMRConsultation(\n    mockConsultation: MockConsultation\n  ): EMRConsultation {\n    return {\n      id: mockConsultation.id,\n      patientId: mockConsultation.patientId,\n      providerId: mockConsultation.providerId,\n      date: new Date(mockConsultation.date),\n      reason: mockConsultation.reason,\n      notes: mockConsultation.notes,\n      diagnoses: mockConsultation.diagnoses?.map((d) => ({\n        code: d.code,\n        system: d.system as DiagnosisSystem,\n        description: d.description,\n        date: new Date(d.date),\n        status: d.status as DiagnosisStatus,\n      })),\n      vitalSigns: mockConsultation.vitalSigns\n        ? {\n            date: new Date(mockConsultation.vitalSigns.date),\n            temperature: mockConsultation.vitalSigns.temperature,\n            heartRate: mockConsultation.vitalSigns.heartRate,\n            respiratoryRate: mockConsultation.vitalSigns.respiratoryRate,\n            bloodPressureSystolic:\n              mockConsultation.vitalSigns.bloodPressureSystolic,\n            bloodPressureDiastolic:\n              mockConsultation.vitalSigns.bloodPressureDiastolic,\n            oxygenSaturation: mockConsultation.vitalSigns.oxygenSaturation,\n            weight: mockConsultation.vitalSigns.weight,\n            height: mockConsultation.vitalSigns.height,\n            bmi: mockConsultation.vitalSigns.bmi,\n          }\n        : undefined,\n      treatmentPlan: mockConsultation.treatmentPlan,\n      followUpDate: mockConsultation.followUpDate\n        ? new Date(mockConsultation.followUpDate)\n        : undefined,\n      specialty: mockConsultation.specialty,\n    };\n  }\n\n  /**\n   * Convierte un tratamiento mock a formato EMRTreatment\n   */\n  private convertToEMRTreatment(mockTreatment: MockTreatment): EMRTreatment {\n    return {\n      id: mockTreatment.id,\n      patientId: mockTreatment.patientId,\n      providerId: mockTreatment.providerId,\n      startDate: new Date(mockTreatment.startDate),\n      endDate: mockTreatment.endDate\n        ? new Date(mockTreatment.endDate)\n        : undefined,\n      name: mockTreatment.name,\n      type: mockTreatment.type as EMRTreatmentType,\n      description: mockTreatment.description,\n      dosage: mockTreatment.dosage,\n      frequency: mockTreatment.frequency,\n      instructions: mockTreatment.instructions,\n      status: mockTreatment.status as EMRTreatmentStatus,\n      consultationId: mockTreatment.consultationId,\n    };\n  }\n\n  /**\n   * Genera un historial de peso de ejemplo\n   */\n  private generateWeightHistory(\n    patient: MockPatient\n  ): Array<{ date: Date; value: number }> {\n\n\n\n    // Generar datos para los últimos 6 meses\n\n    for (let i = 0; i < 6; i++) {\n\n      date.setMonth(now.getMonth() - i);\n\n      // Variar el peso ligeramente\n       // Entre -2 y +2 kg\n\n\n      history.push({\n        date,\n        value: Number(weight.toFixed(1)),\n      });\n    }\n\n    return history.reverse(); // Orden cronológico\n  }\n\n  /**\n   * Genera un historial de presión arterial de ejemplo\n   */\n  private generateBloodPressureHistory(\n    patient: MockPatient\n  ): Array<{ date: Date; systolic: number; diastolic: number }> {\n\n\n    const history: Array<{ date: Date; systolic: number; diastolic: number }> =\n      [];\n\n    // Generar datos para los últimos 6 meses\n\n    for (let i = 0; i < 6; i++) {\n\n      date.setMonth(now.getMonth() - i);\n\n      // Variar la presión ligeramente\n       // Entre -5 y +5\n       // Entre -3 y +3\n\n      history.push({\n        date,\n        systolic: Math.round(baseSystolic + systolicVar),\n        diastolic: Math.round(baseDiastolic + diastolicVar),\n      });\n    }\n\n    return history.reverse(); // Orden cronológico\n  }\n\n  /**\n   * Genera un historial de glucosa de ejemplo\n   */\n  private generateGlucoseHistory(\n    patient: MockPatient\n  ): Array<{ date: Date; value: number; type: GlucoseReadingType }> {\n    const history: Array<{\n      date: Date;\n      value: number;\n      type: GlucoseReadingType;\n    }> = [];\n\n\n    // Determinar si el paciente tiene diabetes (para ajustar los valores)\n    const hasDiabetes =\n      patient.medicalHistory?.chronicConditions?.some((c: string) =>\n        c.toLowerCase().includes('diabetes')\n      ) ?? false;\n\n    // Valores base según condición\n\n\n\n    // Generar datos para los últimos 10 días\n\n    for (let i = 0; i < 10; i++) {\n\n      date.setDate(now.getDate() - i);\n\n      // Elegir tipo aleatorio\n\n\n      // Ajustar valor base según tipo\n      let typeBaseValue = baseValue;\n      if (type === 'postprandial') {\n        typeBaseValue += 30; // Más alto después de comer\n      } else if (type === 'fasting') {\n        typeBaseValue -= 10; // Más bajo en ayunas\n      }\n\n      // Variar la glucosa\n\n\n      history.push({\n        date,\n        value: Math.round(typeBaseValue + valueVar),\n        type,\n      });\n    }\n\n    return history.reverse(); // Orden cronológico\n  }\n\n  /**\n   * Finaliza la consulta actual\n   */\n  public endConsultation(consultationId: string, summary?: string): boolean {\n    this.logger.info('Consulta finalizada', {\n      consultationId,\n      summary: summary ?? 'No summary provided',\n    });\n    return true;\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/emr/implementations/OSCARAdapter.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Expression expected.","line":2,"column":0,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  EMRAdapter,\nimport { \n   HttpService \n } from \"../../../lib/api\"\n  EMRConsultation,\nimport { \n  EMRDiagnosis,\n  EMRHistoryOptions,\n  EMRPatientHistory,\n  EMRPatientMetrics,\n  EMRPatientSearchResult,\n  EMRSearchQuery,\n  EMRTreatment,\n} from '../EMRAdapter';\n\n/**\n * Tipos específicos para OSCAR EMR\n */\n// Tipo para la respuesta de datos demográficos de OSCAR\ninterface OSCARDemographic {\n  id: string;\n  firstName: string;\n  lastName: string;\n  gender: string;\n  birthDate: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  province?: string;\n  postalCode?: string;\n  healthCardNumber?: string;\n  id: string;\n  firstName: string;\n  lastName: string;\n  gender: string;\n  birthDate: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  province?: string;\n  postalCode?: string;\n  healthCardNumber?: string;\n  id: string;\n  firstName: string;\n  lastName: string;\n  gender: string;\n  birthDate: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  province?: string;\n  postalCode?: string;\n  healthCardNumber?: string;\n  id: string;\n  firstName: string;\n  lastName: string;\n  gender: string;\n  birthDate: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  province?: string;\n  postalCode?: string;\n  healthCardNumber?: string;\n}\n\n// Tipo para respuesta de resultados de búsqueda de OSCAR\ninterface OSCARSearchResult {\n  demographics: OSCARDemographic[];\n  totalResults: number;\n}\n\n// Tipo para notas clínicas de OSCAR\ninterface OSCAREncounter {\n  id: string;\n  date: string;\n  providerName: string;\n  reason: string;\n  content: string;\n  followUpDate?: string;\n  specialty?: string;\n}\n\n// Tipo para respuesta de encuentros médicos de OSCAR\ninterface OSCAREncounterResult {\n  notes: OSCAREncounter[];\n}\n\n// Tipo para prescripciones de OSCAR\ninterface OSCARPrescription {\n  id: string;\n  drugName: string;\n  dosage: string;\n  frequency: string;\n  startDate: string;\n  endDate?: string;\n  status: string;\n  instructions?: string;\n  prescribedBy: string;\n}\n\n// Tipo para respuesta de prescripciones de OSCAR\ninterface OSCARPrescriptionResult {\n  prescriptions: OSCARPrescription[];\n}\n\n// Tipo para problemas médicos de OSCAR\ninterface OSCARProblem {\n  id: string;\n  code: string;\n  codeSystem: string;\n  description: string;\n  dateRecorded: string;\n  status: string;\n  active: boolean;\n  notes?: string;\n}\n\n// Tipo para respuesta de problemas médicos de OSCAR\ninterface OSCARProblemResult {\n  problems: OSCARProblem[];\n}\n\n// Tipo para resultados de laboratorio de OSCAR\ninterface OSCARLab {\n  id: string;\n  date: string;\n  type: string;\n  results: {\n    [key: string]: {\n      value: string | number;\n      unit?: string;\n      normalRange?: string;\n      isAbnormal?: boolean;\n    };\n  };\n  orderedBy: string;\n  notes?: string;\n}\n\n// Tipo para respuesta de laboratorio de OSCAR\ninterface OSCARLabResult {\n  labs: OSCARLab[];\n}\n\n// Tipo para mediciones de OSCAR\ninterface OSCARMeasurement {\n  id: string;\n  type: string;\n  date: string;\n  value: string | number;\n  unit?: string;\n}\n\n// Tipo para respuesta de mediciones de OSCAR\ninterface OSCARMeasurementResult {\n  measurements: OSCARMeasurement[];\n}\n\n// Tipo para datos adicionales de OSCAR\ninterface OSCARAdditionalData {\n  allergies: {\n    id: string;\n    description: string;\n    reaction?: string;\n    severity?: string;\n  }[];\n  problems: OSCARProblem[];\n  vaccinations: {\n    id: string;\n    name: string;\n    date: string;\n    lot?: string;\n    site?: string;\n  }[];\n}\n\n/**\n * Interfaz para un resultado de historial médico\n */\ninterface MedicalHistoryResult {\n  allergies: Array<{\n    id: string;\n    description: string;\n    reaction?: string;\n    severity?: string;\n  }>;\n  chronicConditions: Array<{\n    id: string;\n    code: string;\n    codeSystem: string;\n    description: string;\n    dateRecorded: string;\n    status: string;\n    active: boolean;\n    notes?: string;\n  }>;\n}\n\n/**\n * Interfaz para resultados de laboratorio\n */\ninterface LabResultData {\n  id: string;\n  patientId: string;\n  date: Date;\n  category: string;\n  name: string;\n  results: Record<\n    string,\n    {\n      value: string | number;\n      unit?: string;\n      normalRange?: string;\n      isAbnormal?: boolean;\n    }\n  >;\n  units: string;\n  range?: string;\n  abnormal?: boolean;\n  notes?: string;\n}\n\n/**\n * Interfaz para notas de OSCAR\n */\ninterface OSCARNote {\n  id: string;\n  providerNo: string;\n  note: string;\n  encounter: string;\n  observationDate: string;\n  programId: string;\n  appointmentNo: number;\n  revision: number;\n  noteStatus: string;\n  archived: number;\n}\n\n/**\n * Interfaz para un procedimiento de OSCAR\n */\ninterface OSCARProcedurePayload {\n  id: string;\n  preventionType: string;\n  preventionDate: string;\n  providerNo: string;\n  status: string;\n  refused: number;\n  creationDate: string;\n  name: string;\n  description?: string;\n}\n\n/**\n * Interfaz para métricas de paciente\n */\ninterface PatientMetricEntry {\n  date: Date;\n  value: number;\n  units: string;\n}\n\n/**\n * Adaptador para integración con OSCAR EMR\n * OSCAR (Open Source Clinical Application Resource) es uno de los sistemas EMR más utilizados en Ontario, Canadá\n * Es un sistema de código abierto diseñado específicamente para el sistema de salud canadiense\n */\nexport class OSCARAdapter implements EMRAdapter {\n  public readonly name = 'OSCAR EMR Adapter';\n  private readonly logger: Logger;\n  private readonly baseUrl: string;\n  private readonly username: string;\n  private readonly password: string;\n  private readonly clinicId: string;\n  private sessionToken: string | null = null;\n  private tokenExpiration: Date | null = null;\n\n  constructor(config: {\n    baseUrl: string;\n    username: string;\n    password: string;\n    clinicId: string;\n  }) {\n    this.logger = new Logger('OSCARAdapter');\n    this.baseUrl = config.baseUrl;\n    this.username = config.username;\n    this.password = config.password;\n    this.clinicId = config.clinicId;\n\n    this.logger.info('Inicializado adaptador para OSCAR EMR', {\n      baseUrl: this.baseUrl,\n      clinicId: this.clinicId,\n    });\n  }\n\n  /**\n   * Prueba la conexión con OSCAR EMR\n   */\n  public async testConnection(): Promise<boolean> {\n    try {\n      this.logger.info('Probando conexión con OSCAR EMR');\n\n      // Intentar autenticarse para verificar conexión\n      await this.authenticate();\n      return true;\n    } catch (error) {\n      this.logger.error('Error al conectar con OSCAR EMR', { error });\n      return false;\n    }\n  }\n\n  /**\n   * Obtiene los datos de un paciente de OSCAR\n   */\n  public async getPatientData(patientId: string): Promise<PatientData> {\n    try {\n      this.logger.info('Obteniendo datos del paciente desde OSCAR', {\n        patientId,\n      });\n      await this.ensureAuthenticated();\n\n      // Obtener datos demográficos del paciente\n      const demographic = await this.fetchData(\n        `/demographicData?id=${patientId}`\n      );\n\n      // Obtener historial médico, alergias, condiciones, etc.\n\n      const medications = await this.fetchData(\n        `/prescriptions?id=${patientId}`\n      );\n\n\n      // Convertir datos de OSCAR al formato PatientData de la aplicación\n      return this.convertOscarToPatientData(demographic, {\n        allergies,\n        medications,\n        problems,\n      });\n    } catch (error) {\n      this.logger.error('Error al obtener datos del paciente desde OSCAR', {\n        error,\n        patientId,\n      });\n      throw new Error(\n        `Error al obtener datos del paciente: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Busca pacientes en OSCAR según criterios\n   */\n  public async searchPatients(\n    query: EMRSearchQuery,\n    limit: number = 20\n  ): Promise<EMRPatientSearchResult[]> {\n    this.logger.info(`[OSCARAdapter] Buscando pacientes con: ${JSON.stringify(query)}`);\n\n    try {\n      // Simulamos una búsqueda de pacientes en OSCAR\n      // En una implementación real, aquí llamaríamos a las API de OSCAR\n\n      // Para efectos de demostración, devolvemos datos mockeados\n      // que cumplen con la interfaz EMRPatientSearchResult\n      return [\n        {\n          id: '12345',\n          fullName: 'Juan Pérez García',\n          name: 'Juan Pérez García', // Propiedad requerida\n          birthDate: '1980-05-15', // Propiedad requerida\n          gender: 'M', // Propiedad requerida\n          mrn: 'OSC-12345', // Propiedad requerida\n          documentId: '12345678A',\n          contactInfo: {\n            email: 'juan.perez@example.com',\n            phone: '555-123-4567',\n            address: 'Calle Ejemplo 123, Madrid'\n          },\n          lastVisit: new Date('2023-03-10')\n        },\n        {\n          id: '67890',\n          fullName: 'María López Sánchez',\n          name: 'María López Sánchez', // Propiedad requerida\n          birthDate: '1975-11-23', // Propiedad requerida\n          gender: 'F', // Propiedad requerida\n          mrn: 'OSC-67890', // Propiedad requerida\n          documentId: '87654321B',\n          contactInfo: {\n            email: 'maria.lopez@example.com',\n            phone: '555-765-4321',\n            address: 'Avenida Principal 456, Barcelona'\n          },\n          lastVisit: new Date('2023-04-05')\n        }\n      ].slice(0, limit);\n    } catch (error) {\n      this.logger.error(`[OSCARAdapter] Error al buscar pacientes: ${error}`);\n      throw new Error(`Error al buscar pacientes en OSCAR: ${error}`);\n    }\n  }\n\n  /**\n   * Obtiene el historial médico del paciente de OSCAR\n   */\n  public async getPatientHistory(\n    patientId: string,\n    options?: EMRHistoryOptions\n  ): Promise<EMRPatientHistory> {\n    try {\n      this.logger.info('Obteniendo historial médico desde OSCAR', {\n        patientId,\n        options,\n      });\n      await this.ensureAuthenticated();\n\n      // Construir objeto base del historial\n      const patientHistory: EMRPatientHistory = {\n        patientId,\n        consultations: [],\n        treatments: [],\n        labResults: [],\n        diagnoses: [],\n      };\n\n      // Construir filtro de fechas si se proporcionan opciones\n      let dateFilter = '';\n      if (options?.startDate && options?.endDate) {\n\n\n        dateFilter = `&startDate=${startDate}&endDate=${endDate}`;\n      }\n\n      // Obtener consultas si se solicitan\n      if (!options || options.includeConsultations !== false) {\n        const encounters = await this.fetchData(\n          `/casemgmt/note?id=${patientId}${dateFilter}`\n        );\n        patientHistory.consultations = this.convertOscarEncounters(encounters);\n      }\n\n      // Obtener tratamientos si se solicitan\n      if (!options || options.includeTreatments !== false) {\n        const prescriptions = await this.fetchData(\n          `/prescriptions?id=${patientId}${dateFilter}`\n        );\n        patientHistory.treatments =\n          this.convertOscarPrescriptions(prescriptions);\n      }\n\n      // Obtener resultados de laboratorio si se solicitan\n      if (!options || options.includeLabResults !== false) {\n        const labs = await this.fetchData(\n          `/lab/reports?id=${patientId}${dateFilter}`\n        );\n        patientHistory.labResults = this.convertOscarLabResults(labs);\n      }\n\n      // Obtener diagnósticos si se solicitan\n      if (!options || options.includeDiagnoses !== false) {\n        const problems = await this.fetchData(\n          `/diseaseRegistry?id=${patientId}`\n        );\n        patientHistory.diagnoses = this.convertOscarProblems(problems);\n      }\n\n      return patientHistory;\n    } catch (error) {\n      this.logger.error('Error al obtener historial médico desde OSCAR', {\n        error,\n        patientId,\n      });\n      throw new Error(\n        `Error al obtener historial médico: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Guarda una nueva consulta en OSCAR\n   */\n  public async saveConsultation(\n    consultation: EMRConsultation\n  ): Promise<string> {\n    try {\n      this.logger.info('Guardando consulta en OSCAR', {\n        patientId: consultation.patientId,\n      });\n      await this.ensureAuthenticated();\n\n      // Convertir consulta al formato de OSCAR\n\n\n      // Enviar la consulta a OSCAR\n\n\n      // Extraer el ID de la consulta creada\n\n      if (!noteId) {\n        throw new Error('No se recibió un ID de nota válido');\n      }\n\n      this.logger.info('Consulta guardada exitosamente en OSCAR', { noteId });\n      return noteId.toString();\n    } catch (error) {\n      this.logger.error('Error al guardar consulta en OSCAR', {\n        error,\n        consultation,\n      });\n      throw new Error(`Error al guardar consulta: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Actualiza una consulta existente en OSCAR\n   */\n  public async updateConsultation(\n    consultationId: string,\n    updates: Partial<EMRConsultation>\n  ): Promise<boolean> {\n    try {\n      this.logger.info('Actualizando consulta en OSCAR', { consultationId });\n      await this.ensureAuthenticated();\n\n      // Obtener la consulta existente\n      const existingNote = await this.fetchData(\n        `/casemgmt/note/${consultationId}`\n      );\n\n      // Aplicar actualizaciones a la nota\n\n\n      // Enviar la consulta actualizada\n      await this.putData(`/casemgmt/note/${consultationId}`, updatedNote);\n\n      this.logger.info('Consulta actualizada exitosamente en OSCAR', {\n        consultationId,\n      });\n      return true;\n    } catch (error) {\n      this.logger.error('Error al actualizar consulta en OSCAR', {\n        error,\n        consultationId,\n      });\n      throw new Error(\n        `Error al actualizar consulta: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Registra un nuevo tratamiento en OSCAR\n   */\n  public async registerTreatment(treatment: EMRTreatment): Promise<string> {\n    try {\n      this.logger.info('Registrando tratamiento en OSCAR', {\n        patientId: treatment.patientId,\n      });\n      await this.ensureAuthenticated();\n\n      // Convertir tratamiento según su tipo\n      let endpoint: string;\n      let payload: Record<string, string | number | boolean | object>;\n\n      if (treatment.type === 'medication') {\n        endpoint = '/prescription';\n        payload = this.convertToOscarPrescription(treatment);\n      } else {\n        endpoint = '/preventions';\n        payload = this.convertToOscarProcedure(treatment);\n      }\n\n      // Enviar el tratamiento a OSCAR\n\n\n      // Extraer el ID del tratamiento creado\n\n      if (!treatmentId) {\n        throw new Error('No se recibió un ID de tratamiento válido');\n      }\n\n      this.logger.info('Tratamiento registrado exitosamente en OSCAR', {\n        treatmentId,\n      });\n      return treatmentId.toString();\n    } catch (error) {\n      this.logger.error('Error al registrar tratamiento en OSCAR', {\n        error,\n        treatment,\n      });\n      throw new Error(\n        `Error al registrar tratamiento: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Obtiene métricas del paciente de OSCAR\n   */\n  public async getPatientMetrics(\n    patientId: string,\n    metricTypes: string[]\n  ): Promise<EMRPatientMetrics> {\n    try {\n      this.logger.info('Obteniendo métricas del paciente desde OSCAR', {\n        patientId,\n        metricTypes,\n      });\n      await this.ensureAuthenticated();\n\n      const metrics: EMRPatientMetrics = {\n        patientId,\n        weight: [],\n        height: [],\n        bloodPressure: [],\n        glucose: [],\n        cholesterol: [],\n      };\n\n      // Obtener las mediciones disponibles\n      const measurements = await this.fetchData(\n        `/measurements?id=${patientId}`\n      );\n\n      // Procesar las mediciones según los tipos solicitados\n      this.processOscarMeasurements(measurements, metrics, metricTypes);\n\n      return metrics;\n    } catch (error) {\n      this.logger.error('Error al obtener métricas del paciente desde OSCAR', {\n        error,\n        patientId,\n      });\n      throw new Error(\n        `Error al obtener métricas del paciente: ${(error as Error).message}`\n      );\n    }\n  }\n\n  /**\n   * Autentica con el sistema OSCAR\n   */\n  private async authenticate(): Promise<string> {\n    try {\n      // Si tenemos un token válido, lo devolvemos\n      if (\n        this.sessionToken &&\n        this.tokenExpiration &&\n        new Date() < this.tokenExpiration\n      ) {\n        return this.sessionToken;\n      }\n\n      const response = await fetch(`${this.baseUrl}/loginService`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          username: this.username,\n          password: this.password,\n          clinicNo: this.clinicId,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error al autenticar: ${response.status} ${response.statusText}`\n        );\n      }\n\n\n\n      if (!data.success || !data.token) {\n        throw new Error('Autenticación fallida');\n      }\n\n      // Guardar el token y calcular expiración (8 horas es típico en OSCAR)\n      this.sessionToken = data.token;\n      this.tokenExpiration = new Date(Date.now() + 8 * 60 * 60 * 1000);\n\n      this.logger.info('Autenticación con OSCAR exitosa');\n      return this.sessionToken;\n    } catch (error) {\n      this.logger.error('Error en autenticación con OSCAR', { error });\n      throw new Error(`Error de autenticación: ${(error as Error).message}`);\n    }\n  }\n\n  /**\n   * Asegura que exista una autenticación válida\n   */\n  private async ensureAuthenticated(): Promise<void> {\n    await this.authenticate();\n  }\n\n  /**\n   * Realiza una petición GET autenticada a OSCAR\n   */\n  private async fetchData(\n    endpoint: string\n  ): Promise<\n    | OSCARSearchResult\n    | OSCAREncounterResult\n    | OSCARPrescriptionResult\n    | OSCARLabResult\n    | OSCARProblemResult\n    | OSCARMeasurementResult\n  > {\n    try {\n\n\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error en petición: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al recuperar datos de OSCAR', {\n        error,\n        endpoint,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Realiza una petición POST autenticada a OSCAR\n   */\n  private async postData(\n    endpoint: string,\n    data: Record<string, string | number | boolean | object>\n  ): Promise<{ id: string; success: boolean; message?: string }> {\n    try {\n\n\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error en petición POST: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al enviar datos a OSCAR', { error, endpoint });\n      throw error;\n    }\n  }\n\n  /**\n   * Realiza una petición PUT autenticada a OSCAR\n   */\n  private async putData(\n    endpoint: string,\n    data: Record<string, string | number | boolean | object>\n  ): Promise<{ success: boolean; message?: string }> {\n    try {\n\n\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Error en petición PUT: ${response.status} ${response.statusText}`\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      this.logger.error('Error al actualizar datos en OSCAR', {\n        error,\n        endpoint,\n      });\n      throw error;\n    }\n  }\n\n  // Métodos de conversión de formato OSCAR a formatos internos\n\n  /**\n   * Convierte datos de OSCAR al formato PatientData de la aplicación\n   */\n  private convertOscarToPatientData(\n    demographic: OSCARDemographic,\n    additionalData: OSCARAdditionalData\n  ): PatientData {\n    try {\n      // Extraer información básica\n      const fullName =\n        `${demographic.firstName ?? ''} ${demographic.lastName ?? ''}`.trim();\n\n\n\n\n\n      // Obtener información de contacto\n\n\n\n\n      // Construir objeto de datos del paciente\n      const patientData: PatientData = {\n        id: demographic.id,\n        personalInfo: {\n          fullName,\n          firstName,\n          lastName,\n          birthDate: dob,\n          age,\n          gender: demographic.gender,\n          documentId: demographic.healthCardNumber ?? '', // Health Insurance Number en Canadá\n          contactInfo: {\n            email,\n            phone,\n            address,\n          },\n        },\n        medicalHistory: this.extractMedicalHistoryFromOscar(additionalData),\n        vitalSigns: {},\n      };\n\n      return patientData;\n    } catch (error) {\n      this.logger.error('Error al convertir datos de OSCAR a PatientData', {\n        error,\n      });\n      throw new Error('Error al procesar datos del paciente');\n    }\n  }\n\n  /**\n   * Calcula la edad a partir de la fecha de nacimiento\n   */\n  private calculateAge(birthDate: string): number {\n    if (!birthDate) return 0;\n\n\n\n    let age = today.getFullYear() - birthDate.getFullYear();\n\n\n    if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n\n    return age;\n  }\n\n  /**\n   * Formatea la dirección a partir de campos individuales\n   */\n  private formatAddress(demographic: OSCARDemographic): string {\n    const components = [\n      demographic.address,\n      demographic.city,\n      demographic.province,\n      demographic.postalCode,\n    ].filter(Boolean);\n\n    return components.join(', ');\n  }\n\n  /**\n   * Extrae el historial médico del formato OSCAR\n   */\n  private extractMedicalHistoryFromOscar(\n    data: OSCARAdditionalData\n  ): MedicalHistoryResult {\n    // Extraer alergias\n    const allergies = data.allergies.map((allergy) => ({\n      id: allergy.id,\n      description: allergy.description,\n      reaction: allergy.reaction,\n      severity: allergy.severity,\n    }));\n\n    // Extraer condiciones crónicas (problemas activos)\n    const problems = data.problems\n      .filter((problem) => problem.active)\n      .map((problem) => ({\n        id: problem.id,\n        code: problem.code,\n        codeSystem: problem.codeSystem,\n        description: problem.description,\n        dateRecorded: problem.dateRecorded,\n        status: problem.status,\n        active: problem.active,\n        notes: problem.notes,\n      }));\n\n    return {\n      allergies,\n      chronicConditions: problems,\n    };\n  }\n\n  /**\n   * Construye parámetros de búsqueda para OSCAR\n   */\n  private buildSearchParams(query: EMRSearchQuery): URLSearchParams {\n\n\n    if (query.name) {\n      if (query.name.includes(' ')) {\n\n        params.append('firstName', firstName);\n        params.append('lastName', lastNames.join(' '));\n      } else {\n        params.append('name', query.name);\n      }\n    }\n\n    if (query.documentId) {\n      params.append('hin', query.documentId); // Health Insurance Number\n    }\n\n    if (query.email) {\n      params.append('email', query.email);\n    }\n\n    if (query.phone) {\n      params.append('phone', query.phone);\n    }\n\n    if (query.criteria && typeof query.criteria === 'string') {\n      params.append('keywords', query.criteria);\n    }\n\n    return params;\n  }\n\n  // Métodos de conversión simplificados\n\n  private convertOscarPatientResults(\n    results: OSCARSearchResult\n  ): EMRPatientSearchResult[] {\n    if (!results?.demographics) return [];\n\n    return results.demographics.map((demo: OSCARDemographic) => ({\n      id: demo.id,\n      name: `${demo.firstName ?? ''} ${demo.lastName ?? ''}`.trim(),\n      birthDate: demo.birthDate,\n      gender: demo.gender,\n      mrn: demo.healthCardNumber ?? '',\n    }));\n  }\n\n  private convertOscarEncounters(\n    encounters: OSCAREncounterResult\n  ): EMRConsultation[] {\n    if (!encounters?.notes) return [];\n\n    return encounters.notes.map((note: OSCAREncounter) => ({\n      id: note.id,\n      patientId: note.id,\n      providerId: note.providerName,\n      date: new Date(note.date),\n      reason: note.reason,\n      notes: note.content,\n      specialty: note.specialty ?? '',\n    }));\n  }\n\n  private convertOscarPrescriptions(\n    prescriptions: OSCARPrescriptionResult\n  ): EMRTreatment[] {\n    if (!prescriptions?.prescriptions) return [];\n\n    return prescriptions.prescriptions.map((rx: OSCARPrescription) => ({\n      id: rx.id,\n      patientId: rx.id,\n      providerId: rx.prescribedBy,\n      startDate: new Date(rx.startDate),\n      endDate: rx.endDate ? new Date(rx.endDate) : undefined,\n      name: rx.drugName,\n      type: 'medication',\n      description: rx.special ?? rx.drugName,\n      dosage: rx.dosage,\n      frequency: rx.frequency ?? '',\n      instructions: rx.instructions ?? '',\n      status: rx.status === 'completed' ? 'completed' : 'active',\n    }));\n  }\n\n  private convertOscarLabResults(labs: OSCARLabResult): LabResultData[] {\n    if (!labs?.labs) return [];\n\n    return labs.labs.map((lab) => ({\n      id: lab.id,\n      patientId: lab.id,\n      date: new Date(lab.date),\n      category: 'laboratory',\n      name: lab.type,\n      results: lab.results,\n      units: lab.orderedBy,\n      range: lab.normalRange,\n      abnormal: lab.isAbnormal,\n      notes: lab.notes,\n    }));\n  }\n\n  private convertOscarProblems(problems: OSCARProblemResult): EMRDiagnosis[] {\n    if (!problems?.problems) return [];\n\n    return problems.problems.map((problem: OSCARProblem) => ({\n      id: problem.id,\n      patientId: problem.id,\n      date: new Date(problem.dateRecorded),\n      code: problem.code,\n      system: problem.codeSystem,\n      description: problem.description,\n      status: problem.active ? 'active' : 'resolved',\n      type: 'problem',\n      notes: problem.notes ?? '',\n    }));\n  }\n\n  // Métodos de conversión del formato interno a OSCAR\n\n  private convertToOscarNote(\n    consultation: EMRConsultation\n  ): Record<string, string | number | boolean> {\n    return {\n      id: consultation.patientId,\n      providerNo: consultation.providerId,\n      note: consultation.notes,\n      encounter: consultation.reason,\n      observationDate: consultation.date.toISOString().split('T')[0],\n      programId: consultation.specialty ?? '0',\n      appointmentNo: 0,\n      revision: 1,\n      noteStatus: 'A',\n      archived: 0,\n    };\n  }\n\n  private applyConsultationUpdates(\n    existingNote: OSCARNote,\n    updates: Partial<EMRConsultation>\n  ): Record<string, string | number | boolean> {\n\n\n    if (updates.notes) {\n      updatedNote.note = updates.notes;\n    }\n\n    if (updates.reason) {\n      updatedNote.encounter = updates.reason;\n    }\n\n    if (updates.specialty) {\n      updatedNote.programId = updates.specialty;\n    }\n\n    // Incrementar revisión\n    updatedNote.revision =\n      (parseInt(String(updatedNote.revision), 10) ?? 1) + 1;\n\n    return updatedNote;\n  }\n\n  private convertToOscarPrescription(\n    treatment: EMRTreatment\n  ): Record<string, string | number | boolean | null> {\n    return {\n      id: treatment.patientId,\n      providerNo: treatment.providerId,\n      rxDate: treatment.startDate.toISOString().split('T')[0],\n      endDate: treatment.endDate\n        ? treatment.endDate.toISOString().split('T')[0]\n        : null,\n      drugName: treatment.name,\n      takeMin: treatment.dosage ? parseFloat(treatment.dosage) : null,\n      takeUnits: treatment.dosage\n        ? treatment.dosage.replace(/[\\d.]/g, '').trim()\n        : null,\n      frequency: treatment.frequency ?? '',\n      special: treatment.instructions ?? '',\n      archived: 0,\n      written: 1,\n    };\n  }\n\n  private convertToOscarProcedure(\n    treatment: EMRTreatment\n  ): OSCARProcedurePayload {\n    return {\n      id: treatment.patientId,\n      preventionType: treatment.type === 'procedure' ? 'Procedure' : 'Other',\n      preventionDate: treatment.startDate.toISOString().split('T')[0],\n      providerNo: treatment.providerId,\n      status: treatment.status === 'completed' ? '1' : '0',\n      refused: 0,\n      creationDate: new Date().toISOString().split('T')[0],\n      name: treatment.name,\n      description: treatment.description,\n    };\n  }\n\n  private processOscarMeasurements(\n    measurements: OSCARMeasurementResult,\n    metrics: EMRPatientMetrics,\n    metricTypes: string[]\n  ): void {\n    if (!measurements?.measurements) return;\n\n    // Mapear los tipos de métricas de OSCAR a los tipos de la aplicación\n    const oscarTypeMap: Record<string, string> = {\n      WT: 'weight',\n      HT: 'height',\n      BP: 'bloodPressure',\n      BG: 'glucose',\n      CHOL: 'cholesterol',\n    };\n\n    measurements.measurements.forEach((measurement: OSCARMeasurement) => {\n\n\n      // Verificar si este tipo de métrica fue solicitado\n      if (metricType && metricTypes.includes(metricType)) {\n        const entry = {\n          date: new Date(measurement.date),\n          value: parseFloat(measurement.value),\n          units: measurement.unit ?? '',\n        };\n\n        // Añadir la entrada a la categoría adecuada\n        if (metricType === 'bloodPressure' && measurement.value.includes('/')) {\n          const [systolic, diastolic] = measurement.value\n            .split('/')\n            .map(Number);\n          metrics.bloodPressure.push({\n            date: entry.date,\n            systolic,\n            diastolic,\n            units: entry.units,\n          });\n        } else {\n          (\n            metrics[\n              metricType as keyof EMRPatientMetrics\n            ] as PatientMetricEntry[]\n          ).push(entry);\n        }\n      }\n    });\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/integration/EMRAdapterInterface.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n * Interfaz para adaptadores de sistemas EMR\nimport { \n/**\n * Permite la integración con diferentes sistemas de historial médico electrónico\n */\nexport interface EMRAdapterInterface {\n  /**\n   * Nombre del sistema EMR\n   */\n  readonly systemName: string;\n\n  /**\n   * Versión de la API que se está utilizando\n   */\n  readonly apiVersion: string;\n\n  /**\n   * Obtiene los datos completos del EMR para un paciente\n   * @param patientId Identificador único del paciente\n   */\n  getPatientEMR(patientId: string): Promise<EMRData>;\n\n  /**\n   * Obtiene las notas clínicas recientes para un paciente\n   * @param patientId Identificador único del paciente\n   * @param limit Número máximo de notas a recuperar\n   * @param days Número de días hacia atrás para buscar\n   */\n  getRecentNotes(\n    patientId: string,\n    limit?: number,\n    days?: number\n  ): Promise<UnstructuredNote[]>;\n\n  /**\n   * Actualiza el EMR con nuevas notas, tratamientos o seguimientos\n   * @param patientId Identificador único del paciente\n   * @param data Datos a actualizar en el EMR\n   */\n  updatePatientRecord(\n    patientId: string,\n    data: Partial<EMRData>\n  ): Promise<boolean>;\n\n  /**\n   * Sincroniza los tratamientos sugeridos con el sistema EMR\n   * @param patientId Identificador único del paciente\n   * @param treatments Tratamientos recomendados por IA\n   */\n  syncTreatments(\n    patientId: string,\n    treatments: Array<{\n      name: string;\n      dosage?: string;\n      frequency?: string;\n      duration?: string;\n      notes?: string;\n      evidenceLevel?: 'alto' | 'moderado' | 'bajo';\n      evidenceSource?: string;\n    }>\n  ): Promise<boolean>;\n\n  /**\n   * Obtiene el historial de interacciones del profesional con el paciente\n   * @param patientId Identificador único del paciente\n   * @param providerId Identificador del profesional de salud\n   */\n  getInteractionHistory(\n    patientId: string,\n    providerId: string\n  ): Promise<\n    Array<{\n      date: string;\n      type: string;\n      summary: string;\n      aiAssisted: boolean;\n    }>\n  >;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/patient.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  static async getPatients(\nimport { \nclass PatientService {\n    filters: PatientFilters = {}\n  ): Promise<PatientListResponse> {\n    try {\n      const response = await api.get<PatientListResponse>('/patients', {\n        params: filters,\n      });\n      return response.data;\n    } catch {\n      throw new Error('Error al obtener la lista de pacientes');\n    }\n  }\n\n  static async getPatient(id: string): Promise<Patient> {\n    try {\n\n      return response.data;\n    } catch {\n      throw new Error('Error al obtener los detalles del paciente');\n    }\n  }\n\n  static async createPatient(\n    patient: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<Patient> {\n    try {\n\n      return response.data;\n    } catch {\n      throw new Error('Error al crear el paciente');\n    }\n  }\n\n  static async updatePatient(\n    id: string,\n    patient: Partial<Patient>\n  ): Promise<Patient> {\n    try {\n\n      return response.data;\n    } catch {\n      throw new Error('Error al actualizar el paciente');\n    }\n  }\n\n  static async deletePatient(id: string): Promise<void> {\n    try {\n      await api.delete(`/patients/${id}`);\n    } catch {\n      throw new Error('Error al eliminar el paciente');\n    }\n  }\n}\n\nexport default PatientService;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/patientService.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  private static instance: PatientService\nimport { \nclass PatientService {\n  private readonly baseUrl = '/patients';\n\n  private constructor() {}\n\n  static getInstance(): PatientService {\n    if (!PatientService.instance) {\n      PatientService.instance = new PatientService();\n    }\n    return PatientService.instance;\n  }\n\n  async getPatients(\n    filters: PatientFilters = {},\n    page: number = 1,\n    pageSize: number = 10\n  ): Promise<PatientListResponse> {\n    try {\n      const response = await api.get(this.baseUrl, {\n        params: {\n          ...filters,\n          page,\n          pageSize,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      throw new Error('Error al obtener la lista de pacientes');\n    }\n  }\n\n  async getPatient(id: string): Promise<Patient> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching patient:', error);\n      throw new Error('Error al obtener los datos del paciente');\n    }\n  }\n\n  async createPatient(\n    patient: Omit<Patient, 'id' | 'createdAt' | 'updatedAt'>\n  ): Promise<Patient> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error creating patient:', error);\n      throw new Error('Error al crear el paciente');\n    }\n  }\n\n  async updatePatient(id: string, patient: Partial<Patient>): Promise<Patient> {\n    try {\n\n      return response.data;\n    } catch (error) {\n      console.error('Error updating patient:', error);\n      throw new Error('Error al actualizar el paciente');\n    }\n  }\n\n  async deletePatient(id: string): Promise<void> {\n    try {\n      await api.delete(`${this.baseUrl}/${id}`);\n    } catch (error) {\n      console.error('Error deleting patient:', error);\n      throw new Error('Error al eliminar el paciente');\n    }\n  }\n\n  async searchPatients(query: string): Promise<Patient[]> {\n    try {\n      const response = await api.get(`${this.baseUrl}/search`, {\n        params: { query },\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error searching patients:', error);\n      throw new Error('Error al buscar pacientes');\n    }\n  }\n}\n\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/services/storage/index.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Declaration or statement expected.","line":2,"column":1,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"   HttpService \n } from \"../../../lib/api\"\n  set<T>(key: string, value: T): void\nimport { \ninterface StorageService {\n  get<T>(key: string): T | null;\n  remove(key: string): void;\n  clear(): void;\n}\n\nclass LocalStorageService implements StorageService {\n  get<T>(key: string): T | null {\n    try {\n\n      return item ? JSON.parse(item) : null;\n    } catch (error) {\n      console.error('Error reading from localStorage:', error);\n      return null;\n    }\n  }\n\n  set<T>(key: string, value: T): void {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Error writing to localStorage:', error);\n    }\n  }\n\n  remove(key: string): void {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.error('Error removing from localStorage:', error);\n    }\n  }\n\n  clear(): void {\n    try {\n      localStorage.clear();\n    } catch (error) {\n      console.error('Error clearing localStorage:', error);\n    }\n  }\n}\n\nexport\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/test/setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/types/appointment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/types/dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/types/global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/types/patient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/utils/logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/mauriciosobarzo/Desktop/MapleAIHealth/src/vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
