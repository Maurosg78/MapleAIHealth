name: Error Monitoring

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub
  workflow_dispatch:

jobs:
  lint-and-typescript:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.ref }}

      - name: Set up Node.js
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          node --version
          npm --version

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint src/ --format json > eslint-report.json || true

      - name: Run TypeScript check
        run: npx tsc --noEmit --pretty false > ts-errors.txt || true

      - name: Generate error report
        run: |
          # Crear directorio para reportes
          mkdir -p reports

          # Generar reporte de ESLint
          echo "## ESLint Error Report" > error-report.md
          echo "" >> error-report.md

          # Contar errores críticos
          CRITICAL=$(grep -c '"severity":2' eslint-report.json || echo 0)
          echo "### 🔴 Errores Críticos: $CRITICAL" >> error-report.md

          # Contar errores importantes
          IMPORTANT=$(grep -c '"severity":1' eslint-report.json || echo 0)
          echo "### 🟠 Errores Importantes: $IMPORTANT" >> error-report.md

          # Mostrar errores más comunes
          if [ "$CRITICAL" -gt 0 ]; then
            echo "" >> error-report.md
            echo "#### Top Errores Críticos:" >> error-report.md
            grep '"severity":2' eslint-report.json | grep -o '"ruleId":"[^"]*"' | sort | uniq -c | sort -nr | head -10 | awk '{print "- " $2 ": " $1 " ocurrencias"}' >> error-report.md
          fi

          # Generar reporte de TypeScript
          echo "" >> error-report.md
          echo "## TypeScript Error Report" >> error-report.md
          echo "" >> error-report.md

          # Contar errores TypeScript
          TS_ERRORS=$(grep -c "error TS" ts-errors.txt || echo 0)
          echo "### ⚠️ Errores TypeScript totales: $TS_ERRORS" >> error-report.md

          # Categorizar errores
          ANY_ERRORS=$(grep -c "TS7016\|TS7005\|TS7006" ts-errors.txt || echo 0)
          NULL_ERRORS=$(grep -c "TS2531\|TS2532\|TS2533" ts-errors.txt || echo 0)
          TYPE_ERRORS=$(grep -c "TS2322\|TS2345\|TS2339" ts-errors.txt || echo 0)

          echo "" >> error-report.md
          echo "- 🔴 Errores de tipo 'any': $ANY_ERRORS" >> error-report.md
          echo "- 🟠 Errores de null/undefined: $NULL_ERRORS" >> error-report.md
          echo "- 🟡 Errores de tipo incorrectos: $TYPE_ERRORS" >> error-report.md

          # Generar resumen
          echo "" >> error-report.md
          echo "# 📊 Reporte de Supervisión de Errores" > error-summary.md
          echo "" >> error-summary.md
          echo "Fecha: $(date)" >> error-summary.md
          echo "Rama: ${{ github.ref }}" >> error-summary.md
          echo "" >> error-summary.md

          # Contar errores
          ESLINT_CRITICAL=$CRITICAL
          ESLINT_IMPORTANT=$IMPORTANT

          echo "## Resumen" >> error-summary.md
          echo "" >> error-summary.md
          echo "| Categoría | Cantidad | Prioridad |" >> error-summary.md
          echo "|-----------|----------|-----------|" >> error-summary.md
          echo "| ESLint Errores | $ESLINT_CRITICAL | 🔴 Crítico |" >> error-summary.md
          echo "| ESLint Warnings | $ESLINT_IMPORTANT | 🟠 Importante |" >> error-summary.md
          echo "| TypeScript Errores | $TS_ERRORS | 🔴 Crítico |" >> error-summary.md

          # Evaluar estado general
          TOTAL_CRITICAL=$((ESLINT_CRITICAL + TS_ERRORS))
          echo "TOTAL_CRITICAL=$TOTAL_CRITICAL" >> $GITHUB_ENV

          echo "" >> error-summary.md
          if [ "$TOTAL_CRITICAL" -gt 50 ]; then
            echo "## ❌ Estado: Crítico" >> error-summary.md
            echo "El proyecto tiene un número elevado de errores críticos que deben ser corregidos inmediatamente." >> error-summary.md
          elif [ "$TOTAL_CRITICAL" -gt 10 ]; then
            echo "## ⚠️ Estado: Atención Necesaria" >> error-summary.md
            echo "El proyecto tiene errores críticos que deben ser priorizados." >> error-summary.md
          elif [ "$TOTAL_CRITICAL" -gt 0 ]; then
            echo "## 🟡 Estado: Vigilancia" >> error-summary.md
            echo "El proyecto tiene algunos errores críticos que deben ser resueltos pronto." >> error-summary.md
          else
            echo "## ✅ Estado: Saludable" >> error-summary.md
            echo "El proyecto no tiene errores críticos." >> error-summary.md
          fi

          # Copiar los archivos de reporte
          cp eslint-report.json reports/
          cp ts-errors.txt reports/
          cp error-summary.md reports/
          cp error-report.md reports/

          # Mostrar resumen en la consola
          echo "=======================================";
          echo "          RESUMEN DE ERRORES            ";
          echo "=======================================";
          echo "ESLint Errores Críticos: $ESLINT_CRITICAL";
          echo "ESLint Warnings: $ESLINT_IMPORTANT";
          echo "TypeScript Errores: $TS_ERRORS";
          echo "Total Errores Críticos: $TOTAL_CRITICAL";
          echo "=======================================";

      - name: Create PR comment with error summary
        if: github.event_name == 'pull_request' && env.TOTAL_CRITICAL > 0
        run: |
          SUMMARY=$(cat reports/error-summary.md)
          cat << EOF > pr_comment.md
          ## 🚨 Error Monitoring Alert

          Se encontraron $TOTAL_CRITICAL errores críticos en este PR.

          $SUMMARY
          EOF

          # Instalar CLI de GitHub si no está instalada
          if ! command -v gh &> /dev/null; then
            echo "Instalando GitHub CLI..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
          fi

          # Autenticar con GitHub CLI
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

          # Comentar en el PR
          gh pr comment ${{ github.event.pull_request.number }} -F pr_comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
