name: Error Monitoring

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint src/ --format json > eslint-report.json || true

      - name: Categorize ESLint errors
        run: |
          echo "## ESLint Error Report" > error-report.md
          echo "" >> error-report.md

          # Contar errores cr√≠ticos
          CRITICAL=$(grep -c '"severity":2' eslint-report.json || echo 0)
          echo "### üî¥ Errores Cr√≠ticos: $CRITICAL" >> error-report.md

          # Contar errores importantes (warnings)
          IMPORTANT=$(grep -c '"severity":1' eslint-report.json || echo 0)
          echo "### üü† Errores Importantes: $IMPORTANT" >> error-report.md

          # Mostrar los 10 errores cr√≠ticos m√°s comunes si hay alguno
          if [ "$CRITICAL" -gt 0 ]; then
            echo "" >> error-report.md
            echo "#### Top Errores Cr√≠ticos:" >> error-report.md
            grep '"severity":2' eslint-report.json | grep -o '"ruleId":"[^"]*"' | sort | uniq -c | sort -nr | head -10 | awk '{print "- " $2 ": " $1 " ocurrencias"}' >> error-report.md
          fi

      - name: Upload ESLint report
        uses: actions/upload-artifact@v3
        with:
          name: eslint-report
          path: eslint-report.json

      - name: Create PR Comment with Error Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('error-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  typescript:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check TypeScript
        run: npx tsc --noEmit || true

      - name: Generate TypeScript error report
        run: |
          echo "## TypeScript Error Report" > ts-error-report.md
          echo "" >> ts-error-report.md

          npx tsc --noEmit --pretty false > ts-errors.txt || true

          # Contar errores totales
          TS_ERRORS=$(grep -c "error TS" ts-errors.txt || echo 0)
          echo "### ‚ö†Ô∏è Errores TypeScript totales: $TS_ERRORS" >> ts-error-report.md

          # Categorizar errores
          ANY_ERRORS=$(grep -c "TS7016\|TS7005\|TS7006" ts-errors.txt || echo 0)
          NULL_ERRORS=$(grep -c "TS2531\|TS2532\|TS2533" ts-errors.txt || echo 0)
          TYPE_ERRORS=$(grep -c "TS2322\|TS2345\|TS2339" ts-errors.txt || echo 0)

          echo "" >> ts-error-report.md
          echo "- üî¥ Errores de tipo 'any': $ANY_ERRORS" >> ts-error-report.md
          echo "- üü† Errores de null/undefined: $NULL_ERRORS" >> ts-error-report.md
          echo "- üü° Errores de tipo incorrectos: $TYPE_ERRORS" >> ts-error-report.md

      - name: Upload TypeScript errors
        uses: actions/upload-artifact@v3
        with:
          name: typescript-errors
          path: ts-errors.txt

      - name: Create PR Comment with TS Error Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ts-error-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  summary:
    runs-on: ubuntu-latest
    needs: [lint, typescript]
    if: always()
    steps:
      - uses: actions/checkout@v3

      - name: Download ESLint report
        uses: actions/download-artifact@v3
        with:
          name: eslint-report

      - name: Download TypeScript errors
        uses: actions/download-artifact@v3
        with:
          name: typescript-errors

      - name: Generate Error Summary
        run: |
          echo "# üìä Reporte de Supervisi√≥n de Errores" > error-summary.md
          echo "" >> error-summary.md
          echo "Fecha: $(date)" >> error-summary.md
          echo "Rama: ${{ github.ref }}" >> error-summary.md
          echo "" >> error-summary.md

          # Contar errores de ESLint
          ESLINT_CRITICAL=$(grep -c '"severity":2' eslint-report.json || echo 0)
          ESLINT_IMPORTANT=$(grep -c '"severity":1' eslint-report.json || echo 0)

          # Contar errores de TypeScript
          TS_ERRORS=$(grep -c "error TS" ts-errors.txt || echo 0)

          echo "## Resumen" >> error-summary.md
          echo "" >> error-summary.md
          echo "| Categor√≠a | Cantidad | Prioridad |" >> error-summary.md
          echo "|-----------|----------|-----------|" >> error-summary.md
          echo "| ESLint Errores | $ESLINT_CRITICAL | üî¥ Cr√≠tico |" >> error-summary.md
          echo "| ESLint Warnings | $ESLINT_IMPORTANT | üü† Importante |" >> error-summary.md
          echo "| TypeScript Errores | $TS_ERRORS | üî¥ Cr√≠tico |" >> error-summary.md

          # Evaluar estado general
          TOTAL_CRITICAL=$((ESLINT_CRITICAL + TS_ERRORS))

          echo "" >> error-summary.md
          if [ "$TOTAL_CRITICAL" -gt 50 ]; then
            echo "## ‚ùå Estado: Cr√≠tico" >> error-summary.md
            echo "El proyecto tiene un n√∫mero elevado de errores cr√≠ticos que deben ser corregidos inmediatamente." >> error-summary.md
          elif [ "$TOTAL_CRITICAL" -gt 10 ]; then
            echo "## ‚ö†Ô∏è Estado: Atenci√≥n Necesaria" >> error-summary.md
            echo "El proyecto tiene errores cr√≠ticos que deben ser priorizados." >> error-summary.md
          elif [ "$TOTAL_CRITICAL" -gt 0 ]; then
            echo "## üü° Estado: Vigilancia" >> error-summary.md
            echo "El proyecto tiene algunos errores cr√≠ticos que deben ser resueltos pronto." >> error-summary.md
          else
            echo "## ‚úÖ Estado: Saludable" >> error-summary.md
            echo "El proyecto no tiene errores cr√≠ticos." >> error-summary.md
          fi

          echo "" >> error-summary.md
          echo "Para ver detalles completos, consulta los artefactos de este workflow." >> error-summary.md

      - name: Upload Error Summary
        uses: actions/upload-artifact@v3
        with:
          name: error-summary
          path: error-summary.md

      - name: Create PR Comment with Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('error-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  create-issues:
    runs-on: ubuntu-latest
    needs: [summary]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create GitHub issues for critical errors
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Verificar errores cr√≠ticos en ESLint
            const eslintReport = JSON.parse(fs.readFileSync('eslint-report/eslint-report.json', 'utf8'));
            const criticalEslintErrors = eslintReport.filter(item => item.severity === 2);

            // Agrupar por tipo de error
            const errorGroups = {};
            criticalEslintErrors.forEach(error => {
              if (!errorGroups[error.ruleId]) {
                errorGroups[error.ruleId] = [];
              }
              errorGroups[error.ruleId].push(error);
            });

            // Crear issues para cada grupo de errores cr√≠ticos
            for (const [ruleId, errors] of Object.entries(errorGroups)) {
              if (errors.length >= 10) { // Solo crear issues para errores frecuentes
                const title = `[ERROR] Error cr√≠tico de ESLint: ${ruleId}`;

                let body = `## Error cr√≠tico de linting detectado\n\n`;
                body += `**Regla**: ${ruleId}\n`;
                body += `**Ocurrencias**: ${errors.length}\n\n`;
                body += `### Ejemplos:\n`;

                // Mostrar hasta 5 ejemplos
                errors.slice(0, 5).forEach(error => {
                  body += `- Archivo: \`${error.filePath}\`\n`;
                  body += `  - L√≠nea ${error.line}, columna ${error.column}\n`;
                  body += `  - Mensaje: ${error.message}\n\n`;
                });

                body += `### Prioridad\n`;
                body += `- [x] Cr√≠tico\n`;
                body += `- [ ] Importante\n`;
                body += `- [ ] Menor\n\n`;

                body += `Este issue ha sido generado autom√°ticamente por el sistema de supervisi√≥n de errores.`;

                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['error', 'critical', 'linting']
                });
              }
            }
