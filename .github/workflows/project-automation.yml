name: "Automatización de Proyecto"

on:
  issues:
    types: [opened, reopened, closed, labeled, unlabeled]
  pull_request:
    types: [opened, reopened, closed, review_requested]

permissions:
  issues: write
  pull-requests: write
  repository-projects: write

env:
  PROJECT_ID: "PVT_kwHOCIy6ZM4A1XzO" # MapleAI Health Development (actualizado)
  GH_TOKEN: ${{ secrets.MAPLE_HEALTH_TOKEN }}
  PROJECT_URL: "https://github.com/users/mauriciosobarzo/projects/2" # URL del proyecto actualizada

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    name: Agregar issue o PR al proyecto
    steps:
      - name: Add issue to project
        if: github.event_name == 'issues'
        env:
          GITHUB_TOKEN: ${{ secrets.MAPLE_HEALTH_TOKEN }}
          ISSUE_ID: ${{ github.event.issue.node_id }}
        run: |
          gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=${{ env.PROJECT_ID }} -f issue=$ISSUE_ID
          
      - name: Add PR to project
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.MAPLE_HEALTH_TOKEN }}
          PR_ID: ${{ github.event.pull_request.node_id }}
        run: |
          gh api graphql -f query='
            mutation($project:ID!, $pr:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $pr}) {
                item {
                  id
                }
              }
            }' -f project=${{ env.PROJECT_ID }} -f pr=$PR_ID
            
  update_project_status:
    runs-on: ubuntu-latest
    needs: add_to_project
    steps:
      - name: Get Project Data
        run: |
          echo "Obteniendo datos del proyecto..."
          
          # Query para obtener los campos del proyecto
          QUERY='
          query($project_id: ID!) {
            node(id: $project_id) {
              ... on ProjectV2 {
                fields(first: 20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }'
          
          # Ejecutar query
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v4+json" \
            https://api.github.com/graphql \
            -d @- << EOF
          {
            "query": "$QUERY",
            "variables": {
              "project_id": "${{ env.PROJECT_ID }}"
            }
          }
          EOF
          )
          
          echo "Datos del proyecto obtenidos"
          echo "$RESPONSE" | jq .
          
      - name: Update Item Status
        if: github.event_name == 'issues' || github.event_name == 'pull_request'
        run: |
          # Obtener ID del item
          ITEM_ID="${{ github.event.issue.node_id || github.event.pull_request.node_id }}"
          
          if [[ ! -z "$ITEM_ID" ]]; then
            # Actualizar estado según la acción
            if [[ "${{ github.event.action }}" == "opened" ]]; then
              echo "Nuevo item: Moviendo a To Do"
            elif [[ "${{ github.event.action }}" == "closed" ]]; then
              echo "Item cerrado: Moviendo a Done"
            fi
          fi 